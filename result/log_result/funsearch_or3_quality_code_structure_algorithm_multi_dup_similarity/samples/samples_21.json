{"sample_order": 21, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of priority function.\"\"\"\n\n    # Initialize an array to store priorities\n    priorities = np.zeros_like(bins)\n\n    # Calculate the ratios of item to bins\n    ratios = item / bins\n\n    # Check if item is larger than any bin capacity\n    if item > np.max(bins):\n        priorities.fill(0)  # Item cannot fit in any bin\n        return priorities\n\n    # Calculate priority based on ratio and bin capacity\n    for i in range(len(bins)):\n        if ratios[i] <= 0.5:  # Low ratio, prioritize this bin\n            priorities[i] = 1.0 / ratios[i]\n        elif ratios[i] > 0.5 and ratios[i] <= 0.8:  # Medium ratio\n            priorities[i] = 1.0\n        else:  # High ratio, less priority\n            priorities[i] = 0.5 / ratios[i]\n\n    return priorities\n\n", "score": -327.95}