{"sample_order": 37, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v0` and `priority_v1`.\"\"\"\n    \n    if item <= 0:\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] - item >= 0:\n            priorities[i] = 1 / (bins[i] - item)  # Higher priority for bins with more available space\n        else:\n            priorities[i] = -1  # Lower priority for bins that can't accommodate the item\n    \n    return priorities\n\n", "score": null}