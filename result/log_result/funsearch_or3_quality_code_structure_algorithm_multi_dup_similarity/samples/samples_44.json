{"sample_order": 44, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n\n    remaining_space = bins - item\n    sorted_indices = np.argsort(remaining_space)\n\n    max_capacity_bin = np.max(bins)\n    min_capacity_bin = np.min(bins)\n    mean_capacity_bin = np.mean(bins)\n\n    for i in range(len(bins)):\n        priority = 0\n\n        if remaining_space[sorted_indices[i]] >= 0:\n            if bins[sorted_indices[i]] == max_capacity_bin:\n                priority = 1 / (1 + i)\n            elif bins[sorted_indices[i]] == min_capacity_bin:\n                priority = 0.5 / (1 + i)\n            else:\n                priority = 0.75 / (1 + i)\n        else:\n            priority = -1\n\n        priorities[sorted_indices[i]] = priority\n\n    return priorities\n\n", "score": -212.1}