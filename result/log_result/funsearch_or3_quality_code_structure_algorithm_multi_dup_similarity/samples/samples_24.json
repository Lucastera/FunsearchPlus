{"sample_order": 24, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        return priorities\n\n    remaining_space = bins.copy()\n    remaining_items = item\n    for i in range(len(bins)):\n        if remaining_space[i] >= remaining_items:\n            priorities[i] = 1.0\n            break\n        else:\n            priorities[i] = remaining_space[i] / remaining_items\n            remaining_items -= remaining_space[i]\n            remaining_space[i] = 0\n    \n    # Adjust priorities based on future impact\n    for i in range(len(bins)):\n        if priorities[i] > 0.5:\n            for j in range(i+1, len(bins)):\n                if remaining_space[j] >= remaining_items:\n                    priorities[j] += priorities[i]\n                    remaining_items = 0\n                    break\n                else:\n                    multiplier = remaining_space[j] / remaining_items\n                    priorities[j] += priorities[i] * multiplier\n                    remaining_items -= remaining_space[j]\n    \n    return priorities\n\n", "score": -212.75}