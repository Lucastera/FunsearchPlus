{"sample_order": 32, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Enhanced version of `priority_v1`.\"\"\"\n    \n    # Calculate ratios and log ratios\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    \n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n    \n    # Assign priorities based on different conditions\n    for i, ratio in enumerate(ratios):\n        if ratio < 0.5:\n            priorities[i] = -log_ratios[i] * 1.5\n        elif ratio < 1.0:\n            priorities[i] = -log_ratios[i] * 1.2\n        else:\n            priorities[i] = -log_ratios[i] * 0.8\n            \n    return priorities\n\n", "score": -262.1}