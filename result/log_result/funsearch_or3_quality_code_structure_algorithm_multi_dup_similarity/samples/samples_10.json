{"sample_order": 10, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that balances optimization and clean code structure.\"\"\"\n    result = np.zeros_like(data)  # Initialize result array\n    \n    # Iterate through each element in the data array\n    for i, val in enumerate(data):\n        if val < 0:  # Check if value is negative\n            result[i] = 0  # Assign 0 as result\n        else:\n            # Perform complex calculation based on value and index\n            temp_result = val * (i + 1)\n            if temp_result > 100:  # Check if result exceeds threshold\n                result[i] = 100  # Assign 100 as result\n            else:\n                result[i] = temp_result  # Assign calculated result\n    \n    return result\n\n", "score": null}