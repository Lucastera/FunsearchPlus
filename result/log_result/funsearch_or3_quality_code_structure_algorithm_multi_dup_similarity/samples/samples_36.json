{"sample_order": 36, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0 or len(bins) == 0:\n        return np.zeros(len(bins))\n\n    priorities = np.zeros(len(bins))\n    total_capacity = np.sum(bins)\n    \n    for idx, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:\n            remaining_capacity = total_capacity - bin_capacity\n            priorities[idx] = (total_capacity - remaining_capacity) / total_capacity\n        else:\n            priorities[idx] = 0.0\n    \n    return priorities\n\n", "score": -500.0}