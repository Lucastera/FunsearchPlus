{"sample_order": 52, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    unique_bins = np.unique(bins)\n    priorities = np.zeros_like(bins)\n    \n    for unique_bin in unique_bins:\n        bin_indices = np.where(bins == unique_bin)[0]\n        total_capacity = unique_bin * len(bin_indices)\n        remaining_capacity = unique_bin - np.sum(item)\n        \n        if remaining_capacity >= 0:\n            priorities[bin_indices] = 1.0\n        else:\n            weights = np.exp(item * remaining_capacity)\n            priorities[bin_indices] = weights / np.sum(weights)\n    \n    return priorities\n\n", "score": null}