{"sample_order": 25, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        return priorities\n\n    remaining_space = bins.copy()\n    total_remaining_space = np.sum(remaining_space)\n    \n    for i in range(len(bins)):\n        if remaining_space[i] >= item:\n            priorities[i] = 1.0\n            break\n        else:\n            available_space_ratio = remaining_space / total_remaining_space\n            priorities += available_space_ratio\n            item -= remaining_space[i]\n            total_remaining_space -= remaining_space[i]\n            remaining_space[i] = 0\n\n    return priorities\n\n", "score": null}