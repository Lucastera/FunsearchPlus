{"sample_order": 2, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i]  # Priority based on item size compared to bin capacity\n        else:\n            priorities[i] = -1  # Priority is -1 if bin capacity is less than item size\n    \n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    \n    # Normalize priorities to range [0, 1]\n    normalized_priorities = (priorities - min_priority) / (max_priority - min_priority)\n    \n    return normalized_priorities\n\n", "score": -212.0}