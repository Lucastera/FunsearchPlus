{"sample_order": 31, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    if item > np.max(bins):\n        priorities = np.full_like(bins, -np.inf)\n    else:\n        for i in range(len(bins)):\n            if bins[i] >= item:\n                priorities[i] = -np.log(item / bins[i])\n            else:\n                priorities[i] = -np.inf\n    \n    return priorities\n\n", "score": -236.2}