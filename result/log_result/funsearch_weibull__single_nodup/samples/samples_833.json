{"sample_order": 833, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        if remaining_capacity < 0:\n            priorities[i] = -1.0\n        else:\n            priorities[i] = 1.0 / (1.0 + remaining_capacity) + 0.5\n            priorities[i] *= 1.1 if i % 3 == 0 else 1.0\n            priorities[i] += 0.25 if item % 2 == 0 else 0.0\n            priorities[i] += 1.0 if item > 10 and remaining_capacity < 10 else 0.0\n            priorities[i] *= 2.0 if item % 3 == 0 else 1.0\n            priorities[i] += priorities[i - 1] / 3 if i > 0 else 0.0\n            priorities[i] += 2.0 if item > 20 and bins[i] >= item * 2 else 0.0\n            priorities[i] -= 0.5 if i % 2 != 0 else 0.0\n            priorities[i] += 1.5 if item % 5 == 0 else 0.0\n            if item > 15:\n                if i % 4 == 0:\n                    priorities[i] -= 0.25\n                elif i % 4 == 1:\n                    priorities[i] += 0.5\n                elif i % 4 == 2:\n                    priorities[i] -= 0.75\n                else:\n                    priorities[i] += 1.0\n            if item % 2 == 0:\n                priorities[i] -= 0.5\n            if item > 25:\n                priorities[i] += 3.0\n            if item < 5:\n                priorities[i] -= 0.5\n\n    return priorities\n\n", "score": -2056.0}