{"sample_order": 290, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n    \n    for i in range(len(bins)):\n        if item < bins[i] * 0.75:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n    \n    for j in range(len(bins)):\n        if priorities[j] < 0.5:\n            priorities[j] *= 0.75\n        elif priorities[j] < 0.75:\n            priorities[j] *= 1.25\n        else:\n            priorities[j] = 1.0\n    \n    return priorities\n\n", "score": -2070.6}