{"sample_order": 968, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = (item + bins[i]) / (2 * bins[i])\n        else:\n            priority_diff = (item - bins[i]) / item\n            if priority_diff < 0.2:\n                priorities[i] = 0.3\n            elif priority_diff >= 0.2 and priority_diff < 0.4:\n                priorities[i] = 0.5\n            elif priority_diff >= 0.4 and priority_diff < 0.6:\n                priorities[i] = 0.7\n            elif priority_diff >= 0.6 and priority_diff < 0.8:\n                priorities[i] = 0.9\n            else:\n                priorities[i] = 1.0\n                \n    max_priority = np.max(priorities)\n    for j in range(len(priorities)):\n        if priorities[j] == max_priority:\n            priorities[j] = 1.0\n        else:\n            priorities[j] = 0.0\n        \n    final_priorities = np.zeros_like(priorities)\n    for k in range(len(priorities)):\n        if priorities[k] >= 0.5:\n            final_priorities[k] = priorities[k] * 1.7\n        else:\n            final_priorities[k] = priorities[k] * 0.6\n            \n    return final_priorities\n\n", "score": -2069.2}