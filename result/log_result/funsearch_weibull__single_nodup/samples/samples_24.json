{"sample_order": 24, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i, bin_capacity in enumerate(bins):\n        if item > bin_capacity:\n            priorities[i] = -np.inf\n        else:\n            remaining_capacity = bin_capacity - item\n            priority = 1 / (1 + np.exp(-remaining_capacity))\n            priorities[i] = priority\n    return priorities\n\n", "score": -3405.2}