{"sample_order": 859, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if ratios[i] < 0.1:\n            priorities[i] = np.sin(item) * np.cos(bins[i])\n        elif ratios[i] >= 0.1 and ratios[i] < 0.3:\n            priorities[i] = np.sin(item) + np.exp(bins[i])\n        elif ratios[i] >= 0.3 and ratios[i] < 0.5:\n            priorities[i] = np.log(np.abs(item - bins[i]) + 1) * np.sqrt(item)\n        elif ratios[i] >= 0.5 and ratios[i] < 0.7:\n            priorities[i] = np.power(item, 2) - np.tan(bins[i])\n        elif ratios[i] >= 0.7 and ratios[i] < 0.9:\n            priorities[i] = np.cosh(item) * np.tanh(bins[i])\n        else:\n            priorities[i] = np.cosh(np.exp(ratios[i])) * np.tanh(np.sqrt(ratios[i])) - np.log(ratios[i] + 1)\n    \n    for j in range(len(bins)):\n        if priorities[j] < 5:\n            priorities[j] *= 2\n        elif priorities[j] >= 5 and priorities[j] < 10:\n            priorities[j] *= 3\n        elif priorities[j] >= 10 and priorities[j] < 15:\n            priorities[j] /= 2\n        else:\n            priorities[j] = np.sqrt(priorities[j])\n    \n    for k in range(len(bins)):\n        if priorities[k] % 2 == 0:\n            priorities[k] += item\n        else:\n            priorities[k] -= item / 2\n        \n        if item > 15:\n            priorities[k] *= 1.5\n        else:\n            priorities[k] = np.exp(priorities[k])\n    \n    unique_priorities = np.unique(priorities)\n    sorted_priorities = np.sort(unique_priorities)[::-1]\n    final_priorities = np.zeros_like(priorities)\n    \n    for m in range(len(bins)):\n        if priorities[m] in sorted_priorities[:4]:\n            final_priorities[m] = priorities[m] * 1.2\n        else:\n            final_priorities[m] = priorities[m] * 0.8\n    \n    return final_priorities\n\n", "score": -2132.8}