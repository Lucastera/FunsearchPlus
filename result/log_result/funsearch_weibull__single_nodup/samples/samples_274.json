{"sample_order": 274, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if ratios[i] < 0.1:\n            priorities[i] = np.power(np.sin(item) + np.cos(bins[i]), 2)\n        elif ratios[i] >= 0.1 and ratios[i] < 0.3:\n            priorities[i] = np.tan(item) + np.tan(bins[i])\n        elif ratios[i] >= 0.3 and ratios[i] < 0.5:\n            priorities[i] = np.log(np.abs(item - bins[i]) + 1)\n        elif ratios[i] >= 0.5 and ratios[i] < 0.7:\n            priorities[i] = np.arctan(np.sqrt(item * bins[i]))\n        else:\n            if item > bins[i]:\n                priorities[i] = np.cosh(np.exp(ratios[i])) * np.tanh(np.sqrt(ratios[i])) - np.log(ratios[i] + 1)\n            else:\n                priorities[i] = np.arccos(np.abs(item - bins[i]))\n    \n    return priorities\n\n", "score": -2659.0}