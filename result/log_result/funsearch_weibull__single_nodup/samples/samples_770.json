{"sample_order": 770, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:\n            priorities[i] = 1.0\n        else:\n            remaining_capacity = bin_capacity - item\n            if item > 2 * bin_capacity:\n                priorities[i] = 0.1\n            elif remaining_capacity % 2 == 0:\n                priorities[i] = 0.8\n            else:\n                partial_capacity_sum = 0\n                for j, partial_bin_capacity in enumerate(bins):\n                    partial_capacity_sum += partial_bin_capacity\n                    if partial_capacity_sum >= item:\n                        priorities[j] = 0.6\n                        break\n                if partial_capacity_sum < item:\n                    priorities[np.argmin(bins)] = 0.4\n\n    return priorities\n\n", "score": -2071.8}