{"sample_order": 233, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    priorities = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    for i in range(len(bins)):\n        if bins[i] < item:\n            priorities[i] = -1.0  # Not enough capacity, lowest priority\n            continue\n        \n        if bins[i] == max_capacity:\n            priorities[i] = 2.5  # Give higher priority to bins with maximum capacity\n            continue\n        \n        remaining_capacity = bins[i] - item\n        if remaining_capacity > max_capacity / 2:\n            priorities[i] = 1.0 + (max_capacity - remaining_capacity) / max_capacity  # Priority based on remaining capacity vs max capacity\n        else:\n            priorities[i] = 1.0 + (remaining_capacity / max_capacity)  # Priority inversely proportional to remaining capacity\n        \n        if item % 3 == 0:\n            priorities[i] += 0.5  # Additional priority for items divisible by 3\n        \n        if i % 3 == 0:\n            priorities[i] += 0.25  # Additional priority for bins at every third index\n    \n    return priorities\n\n", "score": -5000.0}