{"sample_order": 556, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i] + 0.1\n        elif bins[i] >= item / 2:\n            priorities[i] = 0.5 * item / bins[i] + 0.2\n        else:\n            count = 0\n            while item > bins[i]:\n                item -= bins[i]\n                count += 1\n            if count % 2 == 0:\n                priorities[i] = 0.8 * count + item / bins[i] + 0.3\n            else:\n                priorities[i] = 0.7 * count + item / bins[i] + 0.3\n            \n            if count > 3:\n                priorities[i] += 1.0\n            elif count == 2:\n                priorities[i] -= 0.5\n            else:\n                priorities[i] += 0.1\n            \n            if item % 10 == 0:\n                priorities[i] *= 1.8\n            elif item % 5 == 0:\n                priorities[i] *= 1.5\n            else:\n                priorities[i] *= 1.2\n            \n            if bins[i] % 2 == 0:\n                priorities[i] *= 2.0\n            elif bins[i] % 3 == 0:\n                priorities[i] *= 2.5\n            else:\n                priorities[i] *= 1.7\n            \n            if count >= 4 and item >= 10:\n                priorities[i] += 2.0\n            elif count <= 2 or item < 5:\n                priorities[i] -= 1.0\n        \n    return priorities\n\n", "score": -2066.6}