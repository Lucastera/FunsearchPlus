{"sample_order": 513, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i] + 0.1\n        elif bins[i] >= item / 2:\n            priorities[i] = 0.5 * item / bins[i] + 0.2\n        else:\n            count = 0\n            while item > bins[i]:\n                item -= bins[i]\n                count += 1\n            if count % 2 == 0:\n                priorities[i] = 1.2 * count + item / bins[i] + 0.3\n            else:\n                priorities[i] = 1.1 * count + item / bins[i] + 0.3\n        \n        if priorities[i] > 2.0:\n            priorities[i] += 0.6\n        elif priorities[i] > 1.5:\n            priorities[i] += 0.4\n        elif priorities[i] > 1.0:\n            priorities[i] -= 0.3\n        \n        if bins[i] % 2 == 0:\n            priorities[i] *= 1.1\n        else:\n            priorities[i] *= 1.2\n        \n        if i % 2 == 0:\n            priorities[i] *= 1.5\n        else:\n            priorities[i] *= 1.3\n        \n        # Additional complexity with more conditions\n        if bins[i] % 2 == 0 and item % 2 == 0:\n            priorities[i] *= 1.2\n        elif bins[i] % 3 == 0:\n            priorities[i] *= 1.4\n        else:\n            priorities[i] *= 1.1\n        \n        if item > 5 and bins[i] < 10:\n            priorities[i] += 0.8\n        elif item < 3 and bins[i] > 5:\n            priorities[i] -= 0.5\n        \n    return priorities\n\n", "score": -2066.6}