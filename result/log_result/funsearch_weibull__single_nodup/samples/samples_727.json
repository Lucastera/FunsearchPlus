{"sample_order": 727, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 0\n        else:\n            remaining_space = bins[i] - item\n            utilization_ratio = remaining_space / bins[i]\n            \n            if utilization_ratio < 0.1:\n                priority_score = 1 / (1 + utilization_ratio)\n            elif utilization_ratio >= 0.1 and utilization_ratio < 0.3:\n                priority_score = 0.7 / (1 + utilization_ratio)\n            elif utilization_ratio >= 0.3 and utilization_ratio < 0.6:\n                priority_score = 0.5 / (1 + utilization_ratio)\n            elif utilization_ratio >= 0.6 and utilization_ratio < 0.8:\n                priority_score = 0.3 / (1 + utilization_ratio)\n            else:\n                priority_score = 0.1 / (1 + utilization_ratio)\n            \n            if bins[i] % 2 == 0 and item % 2 == 0:\n                priority_score *= 1.1\n            elif bins[i] % 2 != 0 and item % 2 != 0:\n                priority_score *= 1.2\n            \n            for j in range(int(item)):\n                priority_score *= 1.02\n            \n            if item % 10 == 0:\n                priority_score += 0.5\n            \n            priorities[i] = priority_score\n            \n    return priorities\n\n", "score": -2068.8}