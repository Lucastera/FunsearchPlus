{"sample_order": 13, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= 0:\n            priorities[i] = 0\n        else:\n            remaining_capacity = bins[i] - item\n            if remaining_capacity < 0:\n                priorities[i] = -1\n            else:\n                priority_score = item / bins[i] + remaining_capacity\n                priorities[i] = priority_score\n    return priorities\n\n", "score": -5000.0}