{"sample_order": 982, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i, ratio in enumerate(ratios):\n        if ratio < 0.1:\n            priorities[i] = 1 / (1 + np.exp(-30 * (ratio - 0.1))) + 0.1\n        elif ratio >= 0.1 and ratio < 0.5:\n            priorities[i] = 1 / (1 + np.exp(-15 * (ratio - 0.3))) + 0.3\n        elif ratio >= 0.5 and ratio < 0.7:\n            priorities[i] = 1 / (1 + np.exp(-10 * (ratio - 0.6))) + 0.4\n        elif ratio >= 0.7 and ratio < 0.9:\n            priorities[i] = 1 / (1 + np.exp(-5 * (ratio - 0.8))) + 0.5\n        else:\n            priorities[i] = 1 / (1 + np.exp(-2 * (ratio - 1))) + 0.6\n\n        if i % 5 == 0:\n            priorities[i] += 0.3\n        else:\n            for j in range(7):\n                if i % (j + 2) == 0:\n                    priorities[i] -= 0.05 * j\n                elif i % (j + 3) == 0:\n                    priorities[i] += 0.07 * j\n                else:\n                    priorities[i] += 0.03 * j\n\n            if i % 2 == 0:\n                priorities[i] *= 1.5\n            else:\n                priorities[i] += 0.5\n\n        if priorities[i] < 0.2:\n            priorities[i] = 0.2\n        elif priorities[i] > 0.8:\n            priorities[i] = 0.8\n\n        if i % 3 == 0:\n            priorities[i] = np.clip(priorities[i], 0.4, 0.7)\n        elif i % 4 == 0:\n            priorities[i] = np.clip(priorities[i], 0.1, 0.5)\n        elif i % 7 == 0:\n            priorities[i] = np.clip(priorities[i], 0.2, 0.6)\n\n    return priorities\n\n", "score": null}