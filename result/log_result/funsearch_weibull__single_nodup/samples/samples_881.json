{"sample_order": 881, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i, ratio in enumerate(ratios):\n        if ratio < 0.2:\n            priorities[i] = 1 / (1 + np.exp(-40 * (ratio - 0.2))) + 0.2\n        elif ratio >= 0.2 and ratio < 0.4:\n            priorities[i] = 1 / (1 + np.exp(-20 * (ratio - 0.35))) + 0.35\n        elif ratio >= 0.4 and ratio < 0.6:\n            priorities[i] = 1 / (1 + np.exp(-15 * (ratio - 0.5))) + 0.4\n        elif ratio >= 0.6 and ratio < 0.8:\n            priorities[i] = 1 / (1 + np.exp(-10 * (ratio - 0.7))) + 0.6\n        else:\n            priorities[i] = 1 / (1 + np.exp(-5 * (ratio - 1))) + 0.8\n\n        if i % 4 == 0:\n            priorities[i] += 0.4\n        else:\n            for j in range(5):\n                if i % (j + 2) == 0:\n                    priorities[i] -= 0.07 * j\n                elif i % (j + 3) == 0:\n                    priorities[i] += 0.1 * j\n                else:\n                    priorities[i] += 0.05 * j\n\n        if i % 3 == 0:\n            priorities[i] *= 2.0\n        else:\n            priorities[i] += 0.7\n\n    return priorities\n\n", "score": -2074.4}