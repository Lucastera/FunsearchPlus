{"sample_order": 927, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n\n        if item > 4 * bins[i]:\n            priorities[i] *= 2.0\n        elif item > 3 * bins[i]:\n            priorities[i] *= 1.8\n        elif item > 2 * bins[i]:\n            priorities[i] *= 1.5\n\n        if bins[i] % 2 == 0:\n            priorities[i] += 0.1\n        elif bins[i] % 3 == 0:\n            priorities[i] += 0.2\n        else:\n            priorities[i] += 0.05\n\n    return priorities\n\n", "score": -2069.2}