{"sample_order": 475, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] == 0:\n            priorities[i] = 0.0\n        elif item < bins[i]:\n            priorities[i] = min(item / bins[i], 0.7)\n        else:\n            remainder = bins[i] % item\n            if remainder == 0:\n                priorities[i] = max((bins[i] - item) / bins[i], 0.3)\n            else:\n                if remainder % 2 == 0:\n                    priorities[i] = min(item / bins[i] + 0.1, 0.8)\n                elif remainder % 3 == 0:\n                    priorities[i] = min(item / bins[i] + 0.2, 0.9)\n                else:\n                    priorities[i] = min(item / bins[i] + 0.3, 1.0)\n    return priorities\n\n", "score": -2071.8}