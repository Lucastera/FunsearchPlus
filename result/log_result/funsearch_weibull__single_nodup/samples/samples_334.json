{"sample_order": 334, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    \n    for bin_capacity in bins:\n        priority_score = 0.0\n        \n        if bin_capacity >= item:\n            priority_score = 1.0\n        elif bin_capacity == 0:\n            priority_score = 0.0\n        else:\n            if item < bin_capacity:\n                priority_score = item / bin_capacity\n            elif item > bin_capacity:\n                priority_score = bin_capacity / item\n            else:\n                priority_score = 0.5\n            \n            if item % 2 == 0:\n                priority_score += 0.1\n                for i in range(2, int(bin_capacity ** 0.5) + 1):\n                    if bin_capacity % i == 0:\n                        priority_score -= 0.05\n            else:\n                priority_score -= 0.1\n                \n        priorities.append(priority_score)\n    \n    return priorities\n\n", "score": -2071.8}