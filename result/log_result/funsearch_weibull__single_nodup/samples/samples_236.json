{"sample_order": 236, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] == 0:\n            priorities[i] = 0.0\n        else:\n            if item < bins[i] * 0.2:\n                priorities[i] = item / bins[i]\n            elif item >= bins[i] * 0.8:\n                priorities[i] = (bins[i] - item) / bins[i]\n            else:\n                priorities[i] = 0.5 * item / bins[i]\n        \n        if i > 0:\n            if priorities[i] == 1.0 and priorities[i-1] != 1.0:\n                priorities[i-1] = 0.8\n            elif priorities[i] < 0.5:\n                priorities[i-1] = max(0.2, priorities[i-1])\n    \n    return priorities\n\n", "score": -2071.8}