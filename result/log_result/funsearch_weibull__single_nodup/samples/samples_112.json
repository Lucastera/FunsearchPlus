{"sample_order": 112, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] % item == 0:\n                priorities[i] = item / bins[i] + 0.5\n            else:\n                priorities[i] = item / bins[i]\n        else:\n            diff = item - bins[i]\n            if diff > bins[i] / 2:\n                priorities[i] = bins[i] / item\n            else:\n                priorities[i] = (bins[i] + diff) / item\n                \n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    \n    for j in range(len(bins)):\n        if priorities[j] == max_priority:\n            priorities[j] *= 1.2\n        elif priorities[j] == min_priority:\n            priorities[j] *= 0.8\n            \n    sorted_indices = np.argsort(priorities)[::-1]\n    \n    for k in range(len(sorted_indices)):\n        priorities[sorted_indices[k]] *= 1.1 * (k + 1)\n    \n    return priorities\n\n", "score": -2090.6}