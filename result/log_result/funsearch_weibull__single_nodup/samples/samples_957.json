{"sample_order": 957, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of priority function.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item <= np.max(bins):\n            priorities[i] = item / bins[i]\n            \n            if item > np.mean(bins):\n                priorities[i] += 0.1\n                \n            if item < np.median(bins):\n                priorities[i] -= 0.1\n                \n            if item % 2 == 0:\n                priorities[i] += 0.05\n            else:\n                priorities[i] -= 0.05\n                \n            if item > np.mean(bins) * 2:\n                priorities[i] *= 1.5\n            elif item > np.mean(bins) * 1.5:\n                priorities[i] *= 1.3\n        else:\n            diff = item - bins[i]\n            \n            if diff > bins[i] / 2:\n                priorities[i] = bins[i] / item\n            else:\n                priorities[i] = (bins[i] + diff) / item\n                \n            if diff > bins[i] * 0.4:\n                priorities[i] *= 1.1\n            elif diff < bins[i] * 0.1:\n                priorities[i] *= 0.9\n                \n            if item > np.median(bins) * 2.5:\n                priorities[i] += 0.2\n            elif item < np.min(bins):\n                priorities[i] -= 0.2\n                \n            if item < np.percentile(bins, 25):\n                priorities[i] -= 0.05\n            elif item > np.percentile(bins, 75):\n                priorities[i] += 0.1\n                \n            if i % 2 == 0:\n                priorities[i] += 0.05\n            else:\n                priorities[i] -= 0.05\n                \n            if item > bins[i] * 2.5:\n                priorities[i] *= 1.7\n            elif item > bins[i] * 2:\n                priorities[i] *= 1.4\n    \n    return priorities\n\n", "score": null}