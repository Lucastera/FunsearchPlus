{"sample_order": 154, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if ratios[i] < 0.2:\n            priorities[i] = np.sqrt(np.power(ratios[i], 3))\n        elif ratios[i] >= 0.2 and ratios[i] < 0.4:\n            priorities[i] = np.power(ratios[i], 2) + np.tan(ratios[i])\n        elif ratios[i] >= 0.4 and ratios[i] < 0.6:\n            priorities[i] = np.log2(ratios[i] + 1) * np.cosh(ratios[i])\n        elif ratios[i] >= 0.6 and ratios[i] < 0.8:\n            priorities[i] = np.sinh(ratios[i] * 2) + np.tanh(ratios[i])\n        else:\n            priorities[i] = np.cosh(ratios[i] * np.pi) - np.sin(ratios[i])\n    \n    return priorities\n\n", "score": -2066.0}