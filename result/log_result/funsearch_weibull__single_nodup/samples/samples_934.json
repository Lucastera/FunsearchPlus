{"sample_order": 934, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        else:\n            if item < 0.3 * bins[i]:\n                priorities[i] = 0.5\n            elif item < 0.6 * bins[i]:\n                priorities[i] = 0.8\n            else:\n                priorities[i] = 0.9\n            if bins[i] % 3 == 0:\n                priorities[i] += 0.1\n            elif bins[i] % 2 == 0:\n                priorities[i] += 0.2\n            else:\n                priorities[i] += 0.3\n    return priorities\n\n", "score": -2071.8}