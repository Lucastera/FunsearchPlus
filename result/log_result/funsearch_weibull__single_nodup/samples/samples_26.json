{"sample_order": 26, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i]\n        else:\n            sub_priority = 0\n            for j in range(len(bins)):\n                if bins[j] >= item:\n                    sub_priority += item / bins[j]\n                else:\n                    sub_priority += -np.log(item / bins[j])\n            priorities[i] = sub_priority / len(bins)\n    \n    return priorities\n\n", "score": -2069.2}