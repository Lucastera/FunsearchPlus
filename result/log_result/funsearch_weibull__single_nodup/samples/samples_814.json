{"sample_order": 814, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] == 0:\n            priorities[i] = 0.0\n        else:\n            if item < bins[i]:\n                priorities[i] = item / bins[i]\n                if item % 2 == 0:\n                    priorities[i] += 0.2\n                else:\n                    priorities[i] -= 0.1\n                for j in range(2, int(bins[i] ** 0.5) + 1):\n                    if bins[i] % j == 0:\n                        priorities[i] += 0.1\n            else:\n                if bins[i] % item == 0:\n                    priorities[i] = (bins[i] - item) / bins[i]\n                else:\n                    if bins[i] % item < 0.5:\n                        priorities[i] = item / bins[i] + 0.2\n                    elif bins[i] % item < 0.8:\n                        priorities[i] = 0.8 - item / bins[i]\n                    else:\n                        priorities[i] = bins[i] - item / bins[i] + 0.4\n                for k in range(2, int(item ** 0.5) + 1):\n                    if item % k == 0:\n                        priorities[i] -= 0.05\n                if item > 1.5 * bins[i] and bins[i] % 5 == 0:\n                    priorities[i] += 0.3\n                elif item < bins[i] * 0.5 and item % 3 == 0:\n                    priorities[i] -= 0.2\n    return priorities\n\n", "score": -2071.8}