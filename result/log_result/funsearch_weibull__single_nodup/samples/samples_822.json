{"sample_order": 822, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i] + 0.1\n        elif bins[i] >= item / 2:\n            priorities[i] = 0.5 * item / bins[i] + 0.2\n        else:\n            count = 0\n            while item > bins[i]:\n                item -= bins[i]\n                count += 1\n            if count % 2 == 0:\n                priorities[i] = 0.8 * count + item / bins[i] + 0.3\n            else:\n                priorities[i] = 0.7 * count + item / bins[i] + 0.3\n                \n    sorted_priorities = np.sort(priorities)[::-1]\n    max_val = sorted_priorities[0]\n    for j in range(len(priorities)):\n        if priorities[j] == max_val:\n            priorities[j] += 0.5\n        elif 0.5 * max_val <= priorities[j] <= max_val - 0.5:\n            priorities[j] += 0.3\n        else:\n            priorities[j] -= 0.2\n        \n    final_priorities = np.zeros_like(bins)\n    for k in range(len(priorities)):\n        if priorities[k] > 1.5:\n            final_priorities[k] = 2 * priorities[k]\n        elif 1 < priorities[k] <= 1.5:\n            final_priorities[k] = 1.5 * priorities[k]\n        else:\n            final_priorities[k] = 1.2 * priorities[k]\n        \n    return final_priorities\n\n", "score": -2066.6}