{"sample_order": 772, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    max_bin_capacity = max(bins)\n\n    if item > max_bin_capacity:\n        remaining_capacity = bins - item\n        max_capacity_bin_index = np.argmax(remaining_capacity)\n        priorities[max_capacity_bin_index] = 1.0\n    else:\n        for i, bin_capacity in enumerate(bins):\n            if item <= bin_capacity:\n                priorities[i] = 1.0\n            else:\n                diff_capacity = item - bin_capacity\n                if diff_capacity % 2 == 0:\n                    priorities[i] = 0.8\n                elif diff_capacity % 3 == 0:\n                    priorities[i] = 0.6\n                elif diff_capacity % 5 == 0:\n                    priorities[i] = 0.4\n                else:\n                    priorities[i] = 0.2\n\n    return priorities\n\n", "score": -2071.8}