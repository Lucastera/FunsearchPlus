{"sample_order": 292, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n\n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n\n    if item > max_bin_capacity * 0.75:\n        for j in range(len(bins)):\n            if bins[j] == max_bin_capacity:\n                priorities[j] *= 1.5\n    elif item < min_bin_capacity * 0.25:\n        for k in range(len(bins)):\n            if bins[k] == min_bin_capacity:\n                priorities[k] *= 0.5\n\n    sum_priorities = np.sum(priorities)\n    \n    if sum_priorities > 2.0:\n        priorities = priorities / sum_priorities\n    \n    for l in range(len(bins)):\n        if bins[l] < item:\n            priorities[l] = 0.0\n\n    return priorities\n\n", "score": null}