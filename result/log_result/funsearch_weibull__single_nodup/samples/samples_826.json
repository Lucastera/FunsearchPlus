{"sample_order": 826, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] < item:\n            priorities[i] = -1.0\n        else:\n            remaining_capacity = bins[i] - item\n            if remaining_capacity > 0:\n                priorities[i] = 1.0 / (1.0 + remaining_capacity) + 0.5\n            else:\n                priorities[i] = 2.0\n                \n            if i % 2 == 0:\n                priorities[i] *= 1.5\n                \n            if item % 2 == 0:\n                priorities[i] += 0.25\n                \n            if item > 5 and remaining_capacity < 10:\n                priorities[i] += 1.0\n                \n            if item % 3 == 0:\n                priorities[i] *= 2.0\n                \n            if i > 0:\n                priorities[i] += priorities[i - 1] / 3\n                \n            if item > 10 and bins[i] >= item * 2:\n                priorities[i] += 2.0\n                \n            if i % 3 == 0:\n                priorities[i] -= 0.5\n                \n            if item % 5 == 0:\n                priorities[i] += 1.5\n                \n            if item > 15:\n                if i % 4 == 0:\n                    priorities[i] -= 0.25\n                elif i % 4 == 1:\n                    priorities[i] += 0.5\n                elif i % 4 == 2:\n                    priorities[i] -= 0.75\n                else:\n                    priorities[i] += 1.0\n\n    for _ in range(3):\n        for i in range(len(priorities)):\n            if priorities[i] < 0.5:\n                priorities[i] -= 0.25\n            elif priorities[i] < 1.5:\n                priorities[i] += 0.75\n            else:\n                priorities[i] += 1.0\n\n    for i in range(len(priorities)):\n        if i % 2 == 0:\n            priorities[i] = np.sqrt(priorities[i]) * 2.0\n        else:\n            priorities[i] = np.cbrt(priorities[i]) * 2.5\n\n        if priorities[i] < 0.5:\n            priorities[i] -= 0.25\n        elif priorities[i] < 1.5:\n            priorities[i] += 0.75\n        else:\n            priorities[i] += 1.0\n\n    return priorities\n\n", "score": -2043.2}