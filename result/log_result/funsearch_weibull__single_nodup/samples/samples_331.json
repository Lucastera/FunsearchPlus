{"sample_order": 331, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1 / bins[i]\n        else:\n            if item > 0:\n                if bins[i] > 0:\n                    ratio = item / bins[i]\n                    if ratio < 0.3:\n                        priorities[i] = 0.4\n                    elif ratio >= 0.3 and ratio < 0.6:\n                        priorities[i] = 0.7\n                    elif ratio >= 0.6 and ratio < 0.8:\n                        priorities[i] = 0.9\n                    else:\n                        priorities[i] = 1.0\n                else:\n                    priorities[i] = 0.1\n            else:\n                priorities[i] = 0.0\n    \n    return priorities\n\n", "score": -2071.8}