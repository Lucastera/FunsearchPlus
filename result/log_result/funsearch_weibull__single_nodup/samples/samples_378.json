{"sample_order": 378, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priorities[i] = 1.0\n        else:\n            remaining_capacity = bins[i] - item\n            if remaining_capacity > 0:\n                priority = 1 / remaining_capacity\n                if priority > 2:\n                    priorities[i] = 0.8\n                elif priority > 1:\n                    priorities[i] = 0.6\n                else:\n                    priorities[i] = 0.4\n            else:\n                max_priority = 0\n                for j in range(i, len(bins)):\n                    if bins[j] - item > 0:\n                        priority = (bins[j] - item) / (len(bins) - j)\n                        if priority > max_priority:\n                            max_priority = priority\n                            priorities[j] = priority\n    \n    return priorities\n\n", "score": -2071.8}