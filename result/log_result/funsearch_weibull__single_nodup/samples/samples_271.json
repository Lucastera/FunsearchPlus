{"sample_order": 271, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    \n    for index, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:\n            priorities[index] = 1.0\n        else:\n            remaining_capacity = bin_capacity - item\n            if remaining_capacity > 0:\n                priority = (max_capacity - remaining_capacity) / max_capacity\n                priorities[index] = min(1.0, max(0, priority))\n            else:\n                priorities[index] = 0.2\n    \n    return priorities\n\n", "score": -2071.8}