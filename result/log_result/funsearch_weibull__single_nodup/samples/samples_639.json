{"sample_order": 639, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n    \n    max_priority_index = np.argmax(priorities)\n    min_priority_index = np.argmin(priorities)\n    \n    for i in range(len(priorities)):\n        if i == max_priority_index:\n            priorities[i] = priorities[i] + 0.1\n        elif i == min_priority_index:\n            priorities[i] = priorities[i] - 0.1\n        elif priorities[i] >= 0.5:\n            priorities[i] = priorities[i] - 0.05\n        else:\n            priorities[i] = priorities[i] + 0.05\n    \n    return priorities\n\n", "score": -2069.2}