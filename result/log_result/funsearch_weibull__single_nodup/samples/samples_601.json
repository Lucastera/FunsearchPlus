{"sample_order": 601, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    if item < np.mean(bins):\n        for i in range(len(bins)):\n            if bins[i] % 2 == 0:\n                priorities[i] = item / (bins[i] + 1)\n            else:\n                priorities[i] = item / (bins[i] + 2)\n    else:\n        for i in range(len(bins)):\n            if bins[i] % 2 == 0:\n                priorities[i] = item / (bins[i] - 1)\n            else:\n                priorities[i] = item / (bins[i] - 2)\n                \n            if priorities[i] < 0.1:\n                priorities[i] = 0.1\n            elif priorities[i] > 0.9:\n                priorities[i] = 0.9\n    \n    for j in range(len(bins)):\n        if bins[j] % 3 == 0:\n            priorities[j] *= 1.2\n        elif bins[j] % 5 == 0:\n            priorities[j] *= 1.5\n        else:\n            priorities[j] *= 1.1\n\n    return priorities\n\n", "score": -2071.8}