{"sample_order": 844, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for index, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:\n            priorities[index] = 1.0\n        else:\n            remaining_capacity = bin_capacity - item\n            if remaining_capacity > 0:\n                priorities[index] = 0.9 if remaining_capacity >= 2 * item else 0.7\n            else:\n                priorities[index] = 0.5 if bin_capacity / item >= 0.5 else 0.3\n                \n                if priorities[index] == 0.5:\n                    for j in range(index+1, len(bins)):\n                        if bins[j] >= item:\n                            priorities[j] = 0.6\n    \n    return priorities\n\n", "score": -2071.8}