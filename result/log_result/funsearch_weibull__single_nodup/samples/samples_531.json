{"sample_order": 531, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for index, bin_capacity in enumerate(bins):\n        remaining_capacity = bin_capacity - item\n        if remaining_capacity <= 0:\n            priorities[index] = 0\n        else:\n            priority = 1 / remaining_capacity\n            if priority < 0.2:\n                priorities[index] = 1.0\n            elif priority >= 0.2 and priority < 0.4:\n                priorities[index] = 0.8\n            elif priority >= 0.4 and priority < 0.6:\n                priorities[index] = 0.6\n            elif priority >= 0.6 and priority < 0.8:\n                priorities[index] = 0.4\n            else:\n                priorities[index] = 0.2\n    \n    return priorities\n\n", "score": -2206.8}