{"sample_order": 38, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if ratios[i] >= 2:\n            priorities[i] = 0\n        elif 1 < ratios[i] < 2:\n            priorities[i] = np.exp(-np.power((ratios[i] - 1), 2))\n        else:\n            remaining_capacity = np.sum(bins) - bins[i]\n            if remaining_capacity > item:\n                priorities[i] = 1 - (remaining_capacity - item) / remaining_capacity\n            else:\n                min_remaining = np.min(bins)\n                priorities[i] = np.sqrt((item - min_remaining) / remaining_capacity)\n\n    return priorities\n\n", "score": -212.75}