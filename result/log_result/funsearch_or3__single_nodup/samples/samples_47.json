{"sample_order": 47, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        if item <= 0:\n            priorities[i] = np.inf\n        elif bins[i] >= item:\n            priorities[i] = 1.0\n        else:\n            priority_sum = sum(bins)\n            normalized_item = item / priority_sum\n            \n            if normalized_item >= 0.3:\n                priorities[i] = normalized_item\n            elif normalized_item >= 0.2:\n                priorities[i] = normalized_item * 0.8\n            elif normalized_item >= 0.1:\n                priorities[i] = normalized_item * 0.6\n            else:\n                priorities[i] = normalized_item * 0.4\n    \n    return priorities\n\n", "score": -212.75}