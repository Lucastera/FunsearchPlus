{"sample_order": 45, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        if item <= 0:\n            priorities[i] = np.inf\n        elif bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] > 0 and item > bins[i]/2:\n            priorities[i] = item / bins[i]\n        else:\n            priority_sum = 0\n            for j in range(len(bins)):\n                priority_sum += bins[j]\n            priorities[i] = (bins[i] + item) / priority_sum\n            \n            for k in range(len(bins)):\n                priorities[k] *= bins[k] / priority_sum\n        \n        if priorities[i] > 2:\n            priorities[i] -= 1\n        \n    return priorities\n\n", "score": -212.75}