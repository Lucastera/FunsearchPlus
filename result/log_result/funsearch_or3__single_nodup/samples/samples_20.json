{"sample_order": 20, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        else:\n            remaining_capacity = bins[i]\n            remaining_items = item\n            priority = 0\n            \n            while remaining_capacity > 0 and remaining_items > 0:\n                if remaining_capacity >= remaining_items:\n                    priority += remaining_items / bins[i]\n                    remaining_items = 0\n                else:\n                    priority += remaining_capacity / bins[i]\n                    remaining_items -= remaining_capacity\n                    remaining_capacity = 0\n                \n                if remaining_items > 0:\n                    closest_bin_capacity = min([x for x in bins if x > 0], key=lambda x:abs(x - remaining_items))\n                    remaining_capacity = closest_bin_capacity\n\n            priorities[i] = priority\n    \n    return priorities\n\n", "score": null}