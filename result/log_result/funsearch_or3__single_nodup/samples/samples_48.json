{"sample_order": 48, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        if item <= 0:\n            priorities[i] = np.inf\n        elif bins[i] >= item:\n            priorities[i] = 1.0\n        else:\n            priority_sum = sum(bins)\n            if priority_sum == 0:\n                priorities[i] = 0.0\n            else:\n                priorities[i] = (bins[i] + item) / priority_sum\n                \n                for j in range(len(bins)):\n                    if bins[j] > 0:\n                        priorities[j] *= bins[j] / priority_sum\n        \n        if priorities[i] > 1.5:\n            priorities[i] -= 0.5\n        elif priorities[i] < 0.5:\n            priorities[i] = np.sqrt(priorities[i])\n    \n    return priorities\n\n", "score": -212.75}