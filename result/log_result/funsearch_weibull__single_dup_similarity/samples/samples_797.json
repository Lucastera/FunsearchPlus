{"sample_order": 797, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 2 * (item - bins[i])\n        else:\n            priorities[i] = bins[i] - item\n\n    max_bin_capacity = np.max(bins)\n    for i in range(len(bins)):\n        if bins[i] == max_bin_capacity:\n            priorities[i] += 1.5 * max_bin_capacity\n        elif bins[i] <= 0.5 * max_bin_capacity:\n            priorities[i] -= 0.3 * bins[i]\n\n    total_capacity = np.sum(bins)\n    capacity_ratio = bins / total_capacity\n    for i in range(len(bins)):\n        if capacity_ratio[i] >= 0.3:\n            priorities[i] += 0.5 * capacity_ratio[i] * max_bin_capacity\n        elif capacity_ratio[i] < 0.1:\n            priorities[i] -= 0.2 * bins[i]\n\n    min_bin_capacity = np.min(bins)\n    for i in range(len(bins)):\n        if bins[i] == min_bin_capacity:\n            priorities[i] = 0  # Remove priority for bins with minimum capacity\n\n    return priorities\n\n", "score": -2071.8}