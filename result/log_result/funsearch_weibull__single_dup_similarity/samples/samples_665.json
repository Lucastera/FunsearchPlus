{"sample_order": 665, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    n = len(bins)\n    \n    for i in range(n):\n        if bins[i] >= item:\n            priorities[i] = bins[i] - item\n        else:\n            remaining_capacity = bins[i]\n            for j in range(i+1, n):\n                remaining_capacity += bins[j]\n            if remaining_capacity >= item:\n                priorities[i] = remaining_capacity - item\n            else:\n                min_diff = float('inf')\n                for j in range(n):\n                    if bins[j] >= item:\n                        min_diff = min(min_diff, bins[j] - item)\n                priorities[i] = min_diff * 1.5\n    \n    return priorities\n\n", "score": -2071.8}