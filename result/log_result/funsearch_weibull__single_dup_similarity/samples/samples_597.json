{"sample_order": 597, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = sum(bins[:i])\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                remaining_items_sum = sum([item for index, item in enumerate(bins) if index > i])\n                if remaining_items_sum >= item:\n                    priorities[i] = 0.9\n                else:\n                    prev_priorities_sum = sum(priorities[:i])\n                    remaining_capacity_items = [(index, item_value) for index, item_value in enumerate(bins) if index > i]\n                    remaining_capacity_items.sort(key=lambda x: x[1])\n                    for index, item_value in remaining_capacity_items:\n                        if item <= remaining_capacity + item_value:\n                            priorities[i] = 0.8 + prev_priorities_sum\n                            break\n                        prev_priorities_sum += 0.05\n    \n    return priorities\n\n", "score": -2067.0}