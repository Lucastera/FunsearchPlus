{"sample_order": 928, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i] / 3:\n            priorities[i] = np.log(item + 2) / bins[i] + np.sqrt(item / bins[i])\n        elif item > bins[i] / 3 and item <= bins[i] / 2:\n            priorities[i] = np.exp(item + 1) / bins[i] + np.log1p(item / bins[i])\n        elif item > bins[i] / 2 and item <= bins[i]:\n            priorities[i] = np.square(item + 5) / bins[i] + np.power(item / bins[i], 0.8)\n        else:\n            priorities[i] = np.cbrt(item + 3) / bins[i] + np.log2(item / bins[i])\n    \n    return priorities\n\n", "score": -2253.8}