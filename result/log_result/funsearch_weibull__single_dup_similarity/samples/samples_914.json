{"sample_order": 914, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        remaining_capacity = bins[i]\n        priority = 0.0\n        \n        if bins[i] >= item:\n            priorities[i] = 1.0\n        else:\n            while remaining_capacity < item:\n                if remaining_capacity < item * 0.2:\n                    priority += 0.1\n                elif remaining_capacity < item * 0.4:\n                    priority += 0.3\n                elif remaining_capacity < item * 0.6:\n                    priority += 0.5\n                elif remaining_capacity < item * 0.8:\n                    priority += 0.7\n                else:\n                    priority += 0.9\n                remaining_capacity += bins[i] * 0.5\n            \n            if priority > 0.6:\n                priorities[i] = priority * 1.3\n            elif priority < 0.4:\n                priorities[i] = priority * 0.7\n            else:\n                priorities[i] = priority\n    \n    for j in range(len(bins)):\n        if priorities[j] > 0.8:\n            priorities[j] = min(priorities[j] * 1.2, 1.0)\n        elif priorities[j] < 0.4:\n            priorities[j] = max(priorities[j] * 0.8, 0.0)\n    \n    return priorities\n\n", "score": -2071.8}