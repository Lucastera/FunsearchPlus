{"sample_order": 316, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity - sum(bins[:i])\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                min_diff = float('inf')\n                target_bin = -1\n                for j in range(i, len(bins)):\n                    diff = bins[j] - item\n                    if diff >= 0 and diff < min_diff:\n                        min_diff = diff\n                        target_bin = j\n                if target_bin != -1:\n                    priorities[target_bin] = 1.0 - (min_diff / item)\n                else:\n                    max_cap = max(bins)\n                    for j, capacity in enumerate(bins):\n                        if capacity == max_cap:\n                            priorities[j] = 1.0 - (capacity - item) / capacity\n    \n    return priorities\n\n", "score": -2067.0}