{"sample_order": 839, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = 0\n            for j in range(i):\n                used_capacity += bins[j]\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                max_diff = -1\n                selected_bin = -1\n                for idx, capacity in enumerate(bins):\n                    if capacity >= item:\n                        diff = capacity - item\n                        if diff > max_diff:\n                            max_diff = diff\n                            selected_bin = idx\n                if selected_bin != -1:\n                    priorities[selected_bin] = 1.0\n                    for j in range(i+1, selected_bin):\n                        priorities[j] = (item - bins[j-1]) / (bins[selected_bin] - bins[j-1])\n                    if selected_bin < len(bins) - 1:\n                        priorities[selected_bin + 1] = (item - bins[selected_bin]) / (bins[selected_bin + 1] - bins[selected_bin])\n                else:\n                    max_capacity = max(bins)\n                    max_index = np.argmax(bins)\n                    priorities[max_index] = 1 - ((item - remaining_capacity) / (max_capacity - remaining_capacity))\n    \n    return priorities\n\n", "score": -2067.0}