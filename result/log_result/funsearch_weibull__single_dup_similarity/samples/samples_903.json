{"sample_order": 903, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n\n    if len(bins) == 0:\n        return priorities\n    \n    total_capacity = sum(bins)\n    \n    if item > total_capacity:\n        msg = \"Item size exceeds total bin capacity\"\n        raise ValueError(msg)\n    \n    for i in range(len(bins)):\n        remaining_capacity = total_capacity - sum(bins[:i])\n        if bins[i] >= item and remaining_capacity >= item:\n            priorities[i] = 1\n            break\n        elif i == len(bins) - 1:\n            priorities[i] = -1\n        else:\n            max_priority = -1\n            for j in range(i + 1, len(bins)):\n                current_priority = 1\n                current_cap = bins[j]\n                while current_cap < item and j < len(bins) - 1:\n                    j += 1\n                    current_cap += bins[j]\n                    current_priority += 1\n                if current_cap >= item and current_priority > max_priority:\n                    max_priority = current_priority\n            priorities[i] = max_priority\n    \n    return priorities\n\n", "score": -2071.8}