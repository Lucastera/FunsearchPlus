{"sample_order": 483, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    \n    for bin_capacity in bins:\n        if item <= bin_capacity:\n            if bin_capacity % item == 0:\n                priority = 2 / (bin_capacity - item + 1)\n            else:\n                for i in range(2, int(bin_capacity/2) + 1):\n                    if bin_capacity % i == 0:\n                        priority = 1 / (bin_capacity - item + i)\n                        break\n                    else:\n                        divisor_sum = sum([d for d in range(1, i) if i % d == 0])\n                        priority = 1 / (bin_capacity - item + divisor_sum)\n        else:\n            priority = -1\n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -2072.8}