{"sample_order": 951, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    remaining_items = item\n\n    if len(bins) == 0:\n        return priorities\n\n    max_capacity_bin_index = np.argmax(bins)\n    \n    if item > sum(bins):\n        max_priority_bins = np.argsort(bins)[::-1][:len(bins)//2]\n        for idx in max_priority_bins:\n            if remaining_items <= bins[idx]:\n                priorities[idx] += remaining_items / bins[idx]\n                remaining_items = 0\n                break\n            else:\n                priorities[idx] = 1\n                remaining_items -= bins[idx]\n    \n    for i in range(len(bins)):\n        if remaining_items == 0:\n            break\n        if bins[i] >= remaining_items:\n            priorities[i] = remaining_items / bins[i]\n            remaining_items = 0\n        else:\n            priorities[i] = 1\n            remaining_items -= bins[i]\n\n    if remaining_items > 0:\n        for j in range(len(bins)):\n            if bins[j] >= remaining_items:\n                priorities[j] += remaining_items / bins[j]\n                remaining_items = 0\n                break\n\n    return priorities\n\n", "score": -2071.8}