{"sample_order": 619, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n\n    priorities = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    avg_capacity = np.mean(bins)\n    total_capacity = np.sum(bins)\n\n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            if item > bins[i]:\n                priorities[i] = abs(item - bins[i]) / (avg_capacity - min_capacity)\n            else:\n                priorities[i] = max_capacity - item\n        elif bins[i] == min_capacity:\n            if item > bins[i]:\n                priorities[i] = abs(item - bins[i]) / (avg_capacity - max_capacity)\n            else:\n                priorities[i] = min_capacity - item\n        else:\n            if item > bins[i]:\n                priorities[i] = (item - bins[i]) / total_capacity\n            else:\n                priorities[i] = bins[i] - item\n\n    return priorities\n\n", "score": -2071.8}