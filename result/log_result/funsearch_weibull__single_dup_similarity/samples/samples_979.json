{"sample_order": 979, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]/3:\n            if item % 3 == 0:\n                priorities[i] = np.sqrt(item) / bins[i]\n            elif item % 3 == 1:\n                priorities[i] = np.cbrt(item) / bins[i]\n            else:\n                priorities[i] = np.square(item) / bins[i]\n        elif item > bins[i]/3 and item <= bins[i]*2/3:\n            if bins[i] % 4 == 0:\n                priorities[i] = np.power(item, 1.7) / np.log1p(item)\n            else:\n                priorities[i] = np.power(item, 0.6) + np.log2(item)\n        else:\n            if item % 6 == 0:\n                priorities[i] = np.cbrt(item) + np.log1p(item)\n            elif item % 6 == 1:\n                priorities[i] = np.square(item) + np.sqrt(item)\n            elif item % 6 == 2:\n                priorities[i] = np.log1p(item) + np.power(item, 1.5)\n            elif item % 6 == 3:\n                priorities[i] = np.exp(item) + np.log(item)\n            elif item % 6 == 4:\n                priorities[i] = np.sqrt(item) + np.cbrt(item)\n            else:\n                priorities[i] = np.log10(item) + np.exp(item)\n    \n    return priorities\n\n", "score": -2111.8}