{"sample_order": 187, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    sorted_bins = np.argsort(bins)\n\n    for i in range(len(sorted_bins)):\n        bin_idx = sorted_bins[i]\n        remaining_capacity = bins[bin_idx] - item\n        if remaining_capacity >= 0:\n            priorities[bin_idx] = i + 1\n        else:\n            for j in range(i, len(bins)):\n                if bins[sorted_bins[j]] >= item:\n                    priorities[sorted_bins[j]] = j + 1\n                    break\n            else:\n                remaining_items = []\n                for k in range(i, len(bins)):\n                    if bins[sorted_bins[k]] < item:\n                        remaining_items.append(sorted_bins[k])\n                sorted_remaining_items = sorted(remaining_items, key=lambda x: bins[x], reverse=True)\n                for idx in range(len(sorted_remaining_items)):\n                    if bins[sorted_remaining_items[idx]] >= item:\n                        priorities[sorted_remaining_items[idx]] = i + 1\n                        break\n\n    return priorities\n\n", "score": null}