{"sample_order": 715, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 2 * (item - bins[i])\n            if bins[i] <= 0.3 * max_bin_capacity:\n                priorities[i] += 1.2 * bins[i]\n            if i % 3 == 0:\n                priorities[i] += 2.3\n            elif i % 3 == 1:\n                priorities[i] -= 1.3\n            if item >= 1.5 * max_bin_capacity:\n                priorities[i] += 3.5  # Additional priority for item larger than 1.5 times max capacity\n            \n        else:\n            priorities[i] = bins[i] - item\n            if bins[i] >= 0.7 * max_bin_capacity:\n                priorities[i] -= 1.1 * (bins[i] - item)\n            if i % 4 == 0:\n                priorities[i] -= 1.5\n            elif i % 4 == 1:\n                priorities[i] += 0.5\n            if item < 0.5 * max_bin_capacity:\n                priorities[i] += 2.7  # Additional priority for item smaller than 0.5 times max capacity\n    \n    return priorities\n\n", "score": -2071.8}