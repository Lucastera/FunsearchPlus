{"sample_order": 468, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if item > 1.1 * bins[i]:\n            priorities[i] = 3 * (item - bins[i])\n            if bins[i] <= 0.25 * max_bin_capacity:\n                priorities[i] += 1.5 * bins[i]\n            else:\n                priorities[i] -= 1\n                \n        elif item > bins[i] and item <= 1.1 * bins[i]:\n            priorities[i] = 2 * (item - bins[i])\n            if bins[i] >= 0.8 * max_bin_capacity:\n                priorities[i] -= 0.8 * (item - bins[i])\n            else:\n                priorities[i] += 0.5 * bins[i]\n        else:\n            priorities[i] = bins[i] - item\n            if bins[i] >= 0.7 * max_bin_capacity:\n                priorities[i] -= 1.2 * (bins[i] - item)\n    \n    return priorities\n\n", "score": -2071.8}