{"sample_order": 639, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n    \n        if item > bins[i]:\n            priorities[i] = -1\n        else:\n            left_capacity = bins[i] - item\n            utilization = item / bins[i]\n            \n            if left_capacity == 0:\n                priorities[i] = 0\n            elif 0.2 <= utilization < 0.4:\n                priorities[i] = 2 / (1 + utilization)\n            elif 0.4 <= utilization < 0.6:\n                priorities[i] = 3 * bins[i]\n            elif 0.6 <= utilization < 0.8:\n                priorities[i] = 4 * np.sqrt(bins[i]) * utilization\n            elif 0.8 <= utilization <= 1.0:\n                priorities[i] = 5 * np.log(utilization + 1)\n                \n    return priorities\n\n", "score": -2500.2}