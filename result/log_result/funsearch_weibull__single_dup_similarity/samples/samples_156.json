{"sample_order": 156, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = []\n    \n    for ratio in ratios:\n        if ratio < 0.2:\n            priority = 1 / (1 + np.exp(-15*(ratio-0.1)))\n        elif ratio >= 0.2 and ratio < 0.5:\n            priority = 1 / (1 + np.exp(-8*(ratio-0.35)))\n        elif ratio >= 0.5 and ratio < 0.8:\n            priority = 1 / (1 + np.exp(-10*(ratio-0.65)))\n        else:\n            priority = -np.log(ratio)\n        \n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -2227.2}