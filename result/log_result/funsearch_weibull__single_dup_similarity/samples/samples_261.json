{"sample_order": 261, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = sum(bins[:i])\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                max_gap = -1\n                max_gap_idx = -1\n                for j, cap in enumerate(bins):\n                    if cap >= item:\n                        gap = cap - item\n                        if gap > max_gap:\n                            max_gap = gap\n                            max_gap_idx = j\n                if max_gap_idx >= 0:\n                    priorities[max_gap_idx] = 1.0\n                    for k in range(max_gap_idx+1, len(bins)):\n                        gap_diff = bins[k] - bins[k-1]\n                        if gap_diff >= item:\n                            priorities[k] = 0.0\n                        else:\n                            priorities[k] = (item - gap_diff) / (bins[k] - bins[k-1])\n                else:\n                    max_capacity = max(bins)\n                    max_index = np.argmax(bins)\n                    priorities[max_index] = 1 - ((item - remaining_capacity) / (max_capacity - remaining_capacity))\n    \n    return priorities\n\n", "score": -2067.0}