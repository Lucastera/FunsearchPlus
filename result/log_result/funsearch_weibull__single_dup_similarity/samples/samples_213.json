{"sample_order": 213, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of the priority function.\"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = sum(bins[:i])\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                excess_capacity = item - remaining_capacity\n                capacity_left = bins[i] - remaining_capacity\n                \n                if excess_capacity < capacity_left * 0.25:\n                    priorities[i] = 0.8\n                elif excess_capacity < capacity_left * 0.5:\n                    priorities[i] = 0.6\n                elif excess_capacity < capacity_left * 0.75:\n                    priorities[i] = 0.4\n                else:\n                    priorities[i] = 0.2\n    \n    return priorities\n\n", "score": -2067.0}