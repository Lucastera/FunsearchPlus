{"sample_order": 952, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    remaining_items = item\n\n    for i in range(len(bins)):\n        if remaining_items == 0:\n            break\n        if bins[i] >= remaining_items:\n            priorities[i] = remaining_items / bins[i]\n            remaining_items = 0\n        else:\n            priorities[i] = 1\n            remaining_items -= bins[i]\n    \n    if remaining_items > 0:\n        max_capacity_bin_index = np.argmax(bins)\n        if remaining_items <= bins[max_capacity_bin_index]:\n            priorities[max_capacity_bin_index] += remaining_items / bins[max_capacity_bin_index]\n            remaining_items = 0\n        else:\n            priorities[max_capacity_bin_index] = 1\n            remaining_items -= bins[max_capacity_bin_index]\n    \n    for j in range(max_capacity_bin_index+1, len(bins)):\n        if remaining_items == 0:\n            break\n        if bins[j] >= remaining_items:\n            priorities[j] = remaining_items / bins[j]\n            remaining_items = 0\n        else:\n            priorities[j] = 1\n            remaining_items -= bins[j]\n    \n    if remaining_items > 0:\n        for k in range(len(bins)):\n            if remaining_items == 0:\n                break\n            if bins[k] >= remaining_items:\n                priorities[k] += remaining_items / bins[k]\n                remaining_items = 0\n    \n    return priorities\n\n", "score": -2071.8}