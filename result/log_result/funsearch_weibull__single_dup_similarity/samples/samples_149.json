{"sample_order": 149, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n\n    max_capacity = max(bins)\n    max_capacity_idx = np.argmax(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = sum(bins[:i])\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                available_bins = [k for k, capacity in enumerate(bins) if capacity >= item]\n                if available_bins:\n                    priorities[available_bins[0]] = 1.0\n                    for idx in range(1, len(available_bins)):\n                        prev_bin_capacity = bins[available_bins[idx-1]]\n                        curr_bin_capacity = bins[available_bins[idx]]\n                        priorities[available_bins[idx]] = (item - prev_bin_capacity) / (curr_bin_capacity - prev_bin_capacity)\n                else:\n                    priorities[max_capacity_idx] = 1 - ((item - remaining_capacity) / (max_capacity - remaining_capacity))\n\n    return priorities\n\n", "score": -2067.0}