{"sample_order": 461, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        ratio_1 = item / bins[i]\n        ratio_2 = bins[i] / item\n        \n        if remaining_capacity >= 0:\n            if ratio_1 > 0.5:\n                priorities[i] = 1 / (1 + np.exp(-ratio_1))\n            else:\n                priorities[i] = 1 / (1 + np.exp(-ratio_2))\n        else:\n            if ratio_1 > 0.8:\n                priorities[i] = -np.log(np.abs(ratio_1))\n            else:\n                priorities[i] = -np.log(np.abs(ratio_2))\n    \n    return priorities\n\n", "score": -3823.0}