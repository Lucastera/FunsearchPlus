{"sample_order": 202, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = -1\n        else:\n            left_capacity = bins[i] - item\n            if left_capacity == 0:\n                priorities[i] = 0\n            else:\n                utilization = item / bins[i]\n                if utilization < 0.2:\n                    priorities[i] = 1 / (1 - utilization)\n                elif 0.2 <= utilization <= 0.5:\n                    priorities[i] = 2\n                elif 0.5 < utilization <= 0.8:\n                    priorities[i] = 3\n                else:\n                    remaining_ratio = left_capacity / item\n                    if remaining_ratio < 0.4:\n                        priorities[i] = np.sqrt(item * remaining_ratio)\n                    elif 0.4 <= remaining_ratio < 0.7:\n                        priorities[i] = np.log(item * remaining_ratio)\n                    else:\n                        priorities[i] = np.exp(item * remaining_ratio)\n    \n    return priorities\n\n", "score": -2195.4}