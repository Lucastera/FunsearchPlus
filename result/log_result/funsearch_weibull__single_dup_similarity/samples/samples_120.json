{"sample_order": 120, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == 0:\n            priorities[i] = 0\n        elif item < bin_capacity/2:\n            priorities[i] = item / bin_capacity\n        elif item >= bin_capacity/2 and item < bin_capacity:\n            priorities[i] = (item - bin_capacity/2) / (bin_capacity/2)\n        else:\n            priorities[i] = 1 - (bin_capacity / item)\n    \n    return priorities\n\n", "score": -2105.0}