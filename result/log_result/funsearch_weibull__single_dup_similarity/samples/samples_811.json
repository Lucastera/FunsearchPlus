{"sample_order": 811, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 4 * (item - bins[i])  # Quadruple the priority\n        else:\n            priorities[i] = 3 * (bins[i] - item)  # Triple the priority\n\n    for i in range(len(bins)):\n        if bins[i] < 0.3 * item:\n            priorities[i] += 0.3 * (item - bins[i])  # Adjust priority for very small bins\n        elif bins[i] < 0.6 * item:\n            priorities[i] += 0.2 * (item - bins[i])  # Adjust priority for small bins\n        elif bins[i] < 0.8 * item:\n            priorities[i] += 0.1 * (item - bins[i])  # Adjust priority for medium bins\n        else:\n            priorities[i] += 0.05 * (item - bins[i])  # Adjust priority for larger bins\n        \n        if i % 3 == 0:\n            priorities[i] += 3  # Add additional priority for bins at every third index\n        elif i % 3 == 1:\n            priorities[i] -= 2  # Reduce priority for bins at every third index + 1\n        else:\n            priorities[i] += 0.5  # Add small priority for bins at every third index + 2\n\n    return priorities\n\n", "score": -2071.8}