{"sample_order": 163, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = []\n\n    for ratio in ratios:\n        if ratio < 0.1:\n            priority = np.sin(10*ratio) + np.cos(5*ratio)\n        elif ratio >= 0.1 and ratio < 0.2:\n            priority = np.sin(7*ratio) * np.cos(4*ratio)\n        elif ratio >= 0.2 and ratio < 0.3:\n            priority = np.tan(ratio) * np.sqrt(ratio)\n        elif ratio >= 0.3 and ratio < 0.4:\n            priority = np.cos(ratio) + np.tan(ratio)\n        elif ratio >= 0.4 and ratio < 0.5:\n            priority = np.log(ratio) * np.exp(ratio)\n        elif ratio >= 0.5 and ratio < 0.6:\n            priority = np.cosh(ratio) + np.sinh(ratio)\n        elif ratio >= 0.6 and ratio < 0.7:\n            priority = np.tanh(ratio) * np.arctan(ratio)\n        elif ratio >= 0.7 and ratio < 0.8:\n            priority = np.arcsin(ratio) * np.arccos(ratio)\n        elif ratio >= 0.8 and ratio < 0.9:\n            priority = np.arctan(ratio) + np.arcsinh(ratio)\n        else:\n            priority = np.tanh(ratio) * np.cosh(ratio)\n\n        priorities.append(priority)\n\n    return np.array(priorities)\n\n", "score": -2153.6}