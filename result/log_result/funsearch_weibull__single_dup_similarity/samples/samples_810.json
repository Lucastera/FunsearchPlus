{"sample_order": 810, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 4 * (item - bins[i])  # Quadruple the priority\n        else:\n            priorities[i] = 3 * (bins[i] - item)  # Triple the priority\n\n    # Add multiple factors to prioritize bins\n    for i in range(len(bins)):\n        if bins[i] < 0.5 * item:\n            priorities[i] += 0.3 * (item - bins[i])  # Adjust priority for smaller bins\n        elif bins[i] < 0.8 * item:\n            priorities[i] += 0.2 * (item - bins[i])  # Adjust priority for medium bins\n        else:\n            priorities[i] += 0.1 * (item - bins[i])  # Adjust priority for larger bins\n        \n        if i % 3 == 0:\n            priorities[i] += 3  # Add more priority for bins with index divisible by 3\n        elif i % 2 == 0:\n            priorities[i] += 2  # Add priority for even-indexed bins\n        else:\n            priorities[i] -= 1  # Reduce priority for odd-indexed bins\n\n    return priorities\n\n", "score": -2071.8}