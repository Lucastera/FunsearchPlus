{"sample_order": 404, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of priority calculation.\"\"\"\n    priorities = []\n\n    for idx, bin_capacity in enumerate(bins):\n        ratio = item / bin_capacity\n\n        if ratio < 0.1:\n            priority = np.sin(5*ratio) + np.cos(3*ratio) - np.tan(1.5*ratio)\n        elif ratio >= 0.1 and ratio < 0.3:\n            priority = np.exp(ratio) * np.log(ratio) + np.sqrt(1.5*ratio)\n        elif ratio >= 0.3 and ratio < 0.5:\n            priority = np.cos(2*ratio) * np.tan(1.5*ratio) + np.sin(3*ratio)\n            # Additional complex calculation\n            for i in range(10):\n                priority *= np.sin(i*ratio)\n        elif ratio >= 0.5 and ratio < 0.7:\n            priority = np.cosh(ratio) * np.sinh(ratio) - np.tanh(ratio)\n            # Additional complex calculation\n            priority = np.log(np.abs(priority))\n        elif ratio >= 0.7 and ratio < 0.9:\n            priority = np.sin(ratio) * np.cos(ratio) * np.tan(ratio)\n            # Additional complex calculation\n            priority = priority ** 2\n        else:\n            priority = np.arcsin(ratio) + np.arccos(ratio) + np.arctan(ratio)\n            # Additional complex calculation\n            priority = np.sqrt(np.abs(priority))\n\n        priorities.append(priority)\n\n    return np.array(priorities)\n\n", "score": -2082.4}