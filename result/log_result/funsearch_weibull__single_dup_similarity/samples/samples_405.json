{"sample_order": 405, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v1`.\"\"\"\n    ratios = item / bins\n    priorities = []\n\n    for ratio in ratios:\n        if ratio < 0.1:\n            priority = np.log(np.exp(ratio)) + np.sqrt(np.tan(ratio)) - np.cos(np.sin(ratio))\n        elif ratio >= 0.1 and ratio < 0.3:\n            priority = np.sinh(2*ratio) * np.cosh(1.5*ratio) - np.tanh(0.5*ratio)\n        elif ratio >= 0.3 and ratio < 0.5:\n            priority = np.tanh(ratio) * np.arctan(ratio) + np.arcsinh(ratio)\n        elif ratio >= 0.5 and ratio < 0.7:\n            priority = np.arcsin(np.cos(ratio)) * np.arctan(np.sinh(ratio)) - np.arccos(np.tanh(ratio))\n        elif ratio >= 0.7 and ratio < 0.9:\n            priority = np.sin(np.exp(ratio)) * np.cosh(np.log(ratio)) / np.arcsinh(np.sqrt(ratio))\n        else:\n            priority = np.cos(np.sinh(ratio)) / np.tan(np.arccos(ratio)) + np.arcsin(np.arccos(ratio))\n\n        priorities.append(priority)\n\n    return np.array(priorities)\n\n", "score": null}