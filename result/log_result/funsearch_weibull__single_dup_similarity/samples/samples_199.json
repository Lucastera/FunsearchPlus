{"sample_order": 199, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Another improved version of `priority`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = -1\n        else:\n            left_capacity = bins[i] - item\n            if left_capacity == 0:\n                priorities[i] = 0\n            else:\n                utilization = item / bins[i]\n                if utilization < 0.3:\n                    priorities[i] = 1 / (1 - utilization)\n                elif 0.3 <= utilization <= 0.7:\n                    priorities[i] = 2\n                else:\n                    remaining_ratio = left_capacity / item\n                    priorities[i] = np.sqrt(item * remaining_ratio)\n    \n    return priorities\n\n", "score": -2167.0}