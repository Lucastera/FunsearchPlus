{"sample_order": 487, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n\n    priorities = np.zeros_like(bins)\n    sorted_bins = np.sort(bins)\n    n = len(bins)\n    \n    for i in range(n):\n        if i == 0:\n            priorities[i] = abs(item - sorted_bins[i])\n        elif i == n-1:\n            priorities[i] = abs(item - sorted_bins[i])\n        else:\n            priorities[i] = abs(item - sorted_bins[i]) / (sorted_bins[n-1] - sorted_bins[0])\n\n    return priorities\n\n", "score": -2071.8}