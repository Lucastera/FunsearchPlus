{"sample_order": 604, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Enhanced version of `priority_v1` with additional logic.\"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = sum(bins[:i])\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                available_bins = [k for k, capacity in enumerate(bins) if capacity >= item]\n                if available_bins:\n                    for idx in available_bins:\n                        priorities[idx] = 1.0 - (item - sum(bins[:idx])) / bins[idx]\n                    for j in range(i, len(bins)):\n                        if priorities[j] == 0:\n                            priorities[j] = 1.0 - (item - sum(bins[:j])) / (bins[j] + max(bins))\n                            break\n                else:\n                    for j in range(i, len(bins)):\n                        if item <= bins[j] + max(bins):\n                            priorities[j] = 1.0 - (item - sum(bins[:j])) / (bins[j] + max(bins))\n                            break\n    \n    return priorities\n\n", "score": -2067.0}