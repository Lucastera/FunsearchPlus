{"sample_order": 382, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity <= 0:\n            priorities[i] = np.nan  # Handle zero or negative capacity bins\n        else:\n            remaining_capacity = max_bin_capacity - bin_capacity\n            \n            if item <= bin_capacity:\n                # Calculate priority based on percentage of remaining capacity used by the item\n                priorities[i] = item / bin_capacity * remaining_capacity\n            else:\n                overflow = item - bin_capacity\n                total_bin_capacity = bin_capacity + remaining_capacity\n                \n                priority_score = overflow * (max_bin_capacity / total_bin_capacity)\n                \n                if overflow > 0.5 * item:\n                    priority_score *= 2  # Adjust priority score for high overflow\n                elif overflow < 0.2 * item:\n                    priority_score *= 0.5  # Adjust priority score for low overflow\n                \n                if priority_score > 0.8 * max_bin_capacity or bin_capacity == min_bin_capacity:\n                    priorities[i] = np.inf  # Mark bins with high priority score or minimum capacity as not feasible\n                else:\n                    priorities[i] = priority_score\n    \n    return priorities\n\n", "score": -2067.0}