{"sample_order": 458, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins)\n    capacities = np.sort(bins)\n    priorities = np.zeros_like(bins)\n    \n    total_capacity = sum(capacities)\n    remaining_capacity = total_capacity\n    \n    for i in range(num_bins):\n        remaining_capacity -= capacities[i]\n        if item <= remaining_capacity:\n            priorities[i] = 1.0 / (i + 1)\n        else:\n            priorities[i] = 0.5 * (item - remaining_capacity)\n    \n    return priorities\n\n", "score": -2072.8}