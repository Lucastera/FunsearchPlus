{"sample_order": 545, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:\n            return 1 + item / bin_capacity * 2\n        elif item <= 0.8 * bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 + np.sqrt(item / bin_capacity)\n\n    def find_best_bin(item: float, remaining_space: np.ndarray) -> int:\n        best_bin = -1\n        best_priority = float('inf')\n        for i in range(len(remaining_space)):\n            if remaining_space[i] >= item:\n                priority = calculate_priority(item, bins[i])\n                if priority < best_priority:\n                    best_bin = i\n                    best_priority = priority\n        return best_bin\n\n    remaining_space = bins - item\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n\n    sorted_indices = np.argsort(priorities)\n    sorted_bins = bins[sorted_indices]\n\n    for i in range(len(sorted_indices)):\n        current_index = sorted_indices[i]\n        if remaining_space[current_index] < 0:\n            nearest_empty_bin = find_best_bin(item, remaining_space)\n            if nearest_empty_bin != -1:\n                priorities[current_index] = 0\n                priorities[nearest_empty_bin] = 1\n                break\n\n    return priorities\n\n", "score": -2068.2}