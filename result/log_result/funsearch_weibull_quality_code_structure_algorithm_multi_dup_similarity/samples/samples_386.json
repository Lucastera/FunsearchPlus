{"sample_order": 386, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = [0.0] * n_bins\n\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    avg_capacity = sum(bins) / n_bins\n\n    total_capacity = sum(bins)\n\n    for i in range(n_bins):\n        remaining_capacity = bins[i] - item\n\n        if remaining_capacity >= 0:\n            priority_score = 1 / (1 + remaining_capacity)\n\n            if bins[i] == max_capacity:\n                priorities[i] = priority_score * 2.0\n            elif bins[i] == min_capacity:\n                priorities[i] = priority_score * 1.5\n            else:\n                priorities[i] = priority_score\n\n            capacity_difference = bins[i] - avg_capacity\n            if capacity_difference > 5:\n                priorities[i] *= 1.8\n            elif 0 < capacity_difference <= 5:\n                priorities[i] *= 1.3\n            elif -5 <= capacity_difference < 0:\n                priorities[i] *= 0.9\n\n            if item > avg_capacity:\n                priorities[i] += 0.5\n\n            if (item + bins[i]) > total_capacity * 0.8:\n                priorities[i] -= 0.3\n\n        else:\n            priorities[i] = 0\n\n    return priorities\n\n", "score": -2066.2}