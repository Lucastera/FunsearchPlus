{"sample_order": 383, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \n    priorities = np.zeros_like(bins)\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    max_bin_capacity = np.max(bins)\n    total_bin_capacity = np.sum(bins)\n    remaining_capacity_ratios = (max_bin_capacity - bins) / total_bin_capacity\n    \n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.nan\n        else:\n            if item <= bins[i]:\n                priorities[i] = item / bins[i] * remaining_capacity_ratios[i]\n            else:\n                overflow = item - bins[i]\n                priority_score = overflow * remaining_capacity_ratios[i]\n                \n                if overflow > 0.3 * item:\n                    priority_score *= 1.5\n                elif overflow < 0.1 * item:\n                    priority_score *= 0.8\n                \n                if priority_score > 0.6 * max_bin_capacity:\n                    priorities[i] = np.inf\n                else:\n                    priorities[i] = priority_score\n    \n    return priorities\n\n", "score": -2071.8}