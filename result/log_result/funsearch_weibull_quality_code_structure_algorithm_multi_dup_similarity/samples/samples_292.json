{"sample_order": 292, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2` with more advanced logic.\"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n\n    total_capacity = sum(bins)\n    avg_bin_capacity = np.mean(bins)\n\n    for i in range(n_bins):\n        remaining_capacity = bins[i] - item\n        if remaining_capacity >= 0:\n            priority_score = 1 / (1 + remaining_capacity)\n            \n            # Adjust priority based on ratio of bin capacity to total capacity\n            capacity_ratio = bins[i] / total_capacity\n            if capacity_ratio > 0.5:\n                priorities[i] = priority_score * 1.5  # Increase priority for high capacity bins\n            elif 0.2 <= capacity_ratio <= 0.5:\n                priorities[i] = priority_score * 1.2  # Increase priority for medium capacity bins\n            else:\n                priorities[i] = priority_score  # Maintain original priority for low capacity bins\n\n            # Adjust priority based on difference from average capacity\n            capacity_difference = bins[i] - avg_bin_capacity\n            if capacity_difference > 0:\n                priorities[i] *= 1.2  # Increase priority for bins above average capacity\n            elif 0 >= capacity_difference > -5:\n                priorities[i] *= 0.8  # Decrease priority slightly for bins slightly below average capacity\n        \n        else:\n            priorities[i] = 0\n\n    return priorities\n\n", "score": -2067.0}