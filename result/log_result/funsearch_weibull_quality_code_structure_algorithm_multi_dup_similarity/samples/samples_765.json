{"sample_order": 765, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of priority calculation.\"\"\"\n    \n    def calculate_space_score(bin_capacity: float) -> float:\n        return (bin_capacity - item) / bin_capacity\n\n    def calculate_proximity_score(bin_capacity: float) -> float:\n        return (bin_capacity - np.min(bins)) / (np.max(bins) - np.min(bins))\n\n    priorities = np.zeros_like(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        space_score = calculate_space_score(bin_capacity)\n        proximity_score = calculate_proximity_score(bin_capacity)\n\n        if item <= bin_capacity:\n            if bin_capacity == np.max(bins):\n                priorities[i] = 1.0\n            else:\n                combined_score = 1.0 - space_score + proximity_score\n                priorities[i] = max(0, min(1, combined_score))\n        else:\n            overflow_ratio = (item - bin_capacity) / item\n            overflow_score = max(0, 1.0 - overflow_ratio)\n            combined_score = overflow_score - proximity_score\n            priorities[i] = max(0, min(1, combined_score))\n\n    return priorities\n\n", "score": null}