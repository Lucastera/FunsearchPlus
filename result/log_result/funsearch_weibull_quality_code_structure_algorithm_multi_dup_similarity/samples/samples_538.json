{"sample_order": 538, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    remaining_capacity = total_capacity - item\n    if remaining_capacity <= 0:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i]\n            item = 0\n            break\n        else:\n            priorities[i] = bins[i] / item\n            item -= bins[i]\n    \n    if item > 0:\n        weights = np.zeros_like(bins)\n        for i in range(len(bins)):\n            weights[i] = bins[i] / total_capacity\n        priorities += 0.2 * weights\n    \n    return priorities\n\n", "score": null}