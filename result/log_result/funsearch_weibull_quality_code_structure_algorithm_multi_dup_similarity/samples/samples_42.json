{"sample_order": 42, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v0`.\"\"\"\n\n    # Initialize an array to store priorities\n    priorities = np.zeros_like(bins)\n\n    # Iterate through each bin\n    for i in range(len(bins)):\n        bin_capacity = bins[i]\n        \n        # If bin can accommodate the item, prioritize it\n        if item <= bin_capacity:\n            priorities[i] = 1.0\n        # If bin is almost full, lower its priority\n        elif item <= 1.2 * bin_capacity:\n            priorities[i] = 0.5\n        # If bin is too small, prioritize other bins\n        else:\n            priorities[i] = 0.1\n\n    return priorities\n\n", "score": -2071.8}