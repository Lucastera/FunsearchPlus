{"sample_order": 483, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:\n            return 1 + item / bin_capacity * 2\n        elif item <= 0.8 * bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 + np.sqrt(item / bin_capacity)  \n    \n    def find_nearest_empty_bin(remaining_space: np.ndarray) -> int:\n        for i in range(len(remaining_space)):\n            if remaining_space[i] >= 0:\n                return i\n        return -1\n    \n    priorities = np.zeros_like(bins)  \n    remaining_space = bins - item  \n    \n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])  \n    \n    while np.any(remaining_space < 0):\n        idx = np.argmin(remaining_space)\n        nearest_empty_idx = find_nearest_empty_bin(remaining_space)\n        \n        if nearest_empty_idx == -1:\n            break\n        \n        if bins[nearest_empty_idx] >= item:\n            priorities[idx] = 0  \n            priorities[nearest_empty_idx] = 1  \n            remaining_space[nearest_empty_idx] -= item\n            remaining_space[idx] += item\n    \n    return priorities\n\n", "score": -2068.2}