{"sample_order": 30, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    \n    # Calculate ratios and weights for each bin\n    ratios = item / bins\n    weighted_ratios = ratios * weights\n    \n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n    \n    # Assign priorities based on weighted ratios\n    for i in range(len(bins)):\n        if weighted_ratios[i] >= 1.0:\n            priorities[i] = 1.0\n        else:\n            priorities[i] = weighted_ratios[i]\n    \n    return priorities\n\n", "score": null}