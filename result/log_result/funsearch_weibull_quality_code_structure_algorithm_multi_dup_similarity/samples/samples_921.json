{"sample_order": 921, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v2`.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n\n    # Calculate normalized space score for each bin\n    space_scores = (bins - item) / bins\n\n    # Calculate proximity score based on distance from ideal capacity\n    proximity_scores = (bins - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                # Determine whether space score or proximity score should have more weight\n                weight_factor = (max_bin_capacity - bins[i]) / (max_bin_capacity - min_bin_capacity)\n                combined_score = (1 - weight_factor) * space_scores[i] + weight_factor * proximity_scores[i]\n                priorities[i] = max(0, min(1, combined_score))  # Normalize priority score\n        else:\n            # Calculate overflow score and give more weight to proximity score\n            overflow_ratio = (item - bins[i]) / item\n            overflow_score = max(0, 1.0 - overflow_ratio)\n            combined_score = 0.3 * overflow_score - 0.7 * proximity_scores[i]\n            priorities[i] = max(0, min(1, combined_score))  # Normalize priority score\n\n    return priorities\n\n", "score": -5000.0}