{"sample_order": 659, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priority_scores = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        remaining_capacity = bin_capacity\n        \n        if remaining_capacity >= item:\n            priority_scores[i] = np.exp(-(item - remaining_capacity) ** 2) * np.sqrt(bin_capacity)\n            remaining_capacity -= item\n            break\n        else:\n            while item > 0:\n                if remaining_capacity >= item:\n                    priority_scores[i] = np.exp(-(item - remaining_capacity) ** 2) * np.sqrt(bin_capacity)\n                    remaining_capacity -= item\n                    break\n                else:\n                    priority_scores[i] = np.exp(-(remaining_capacity - item) ** 2) * np.sqrt(bin_capacity)\n                    item -= remaining_capacity\n                    remaining_capacity = 0\n                    break\n    \n    return priority_scores\n\n", "score": -2071.8}