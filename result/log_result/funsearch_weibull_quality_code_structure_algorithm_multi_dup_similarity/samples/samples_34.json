{"sample_order": 34, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n    \n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 - (item - bin_capacity) / item\n    \n    item_arr = np.full_like(bins, item)\n    remaining_space = bins - item_arr\n    \n    priorities = np.zeros_like(bins)\n    \n    max_capacity = np.max(bins)  # Find the maximum capacity among all bins\n    min_capacity = np.min(bins)  # Find the minimum capacity among all bins\n\n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            priorities[i] = calculate_priority(item, bins[i]) * 1.2  # Give a slight boost to max capacity bin\n        elif bins[i] == min_capacity:\n            priorities[i] = calculate_priority(item, bins[i]) * 0.8  # Reduce priority for min capacity bin\n        else:\n            priorities[i] = calculate_priority(item, bins[i])  # Default priority calculation\n        \n    return priorities\n\n", "score": -2072.0}