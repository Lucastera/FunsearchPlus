{"sample_order": 330, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n    \n    priority_levels = {0.1: 0.9, 0.3: 0.7, 0.5: 0.5, 0.7: 0.3, 0.9: 0.1}\n    \n    for i in range(len(bins)):\n        for level, score in priority_levels.items():\n            if utilization_ratio[i] < level:\n                priorities[i] = score\n                break\n\n    if np.sum(priorities) < 0.6:\n        for i in range(len(bins)):\n            if priorities[i] == 0.0:\n                priorities[i] = 0.1\n            elif priorities[i] == 0.1:\n                priorities[i] = 0.2\n            elif priorities[i] == 0.3:\n                priorities[i] = 0.4\n            elif priorities[i] == 0.5:\n                priorities[i] = 0.6\n            elif priorities[i] == 0.7:\n                priorities[i] = 0.8\n            elif priorities[i] == 0.9:\n                priorities[i] = 1.0\n    \n    return priorities\n\n", "score": -2071.8}