{"sample_order": 174, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        ratio = item / bin_capacity\n        if ratio <= 0.25:\n            return 1.5 + ratio\n        elif ratio <= 0.5:\n            return 2 + (1 - ratio)\n        elif ratio <= 0.75:\n            return 3 - ratio\n        else:\n            return 4 - (2 * ratio)\n\n    item_arr = np.full_like(bins, item)\n    remaining_space = bins - item_arr\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n\n    return priorities\n\n", "score": -2071.8}