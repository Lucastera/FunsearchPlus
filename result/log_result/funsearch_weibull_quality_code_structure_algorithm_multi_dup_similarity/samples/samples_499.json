{"sample_order": 499, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins)\n    thresholds = [0.5, 0.8, 1.0]\n    weights = [2, 1.5, 1.2]\n    biases = [0.5, 0.7, 0.9]\n    \n    priorities = np.zeros_like(bins)\n    ratios = item / bins\n    \n    for i in range(num_bins):\n        for j in range(len(thresholds)):\n            if ratios[i] < thresholds[j]:\n                priorities[i] = weights[j] * ratios[i] + biases[j]\n                break\n    \n    return priorities\n\n", "score": -2088.6}