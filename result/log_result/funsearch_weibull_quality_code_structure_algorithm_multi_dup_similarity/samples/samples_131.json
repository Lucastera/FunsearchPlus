{"sample_order": 131, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    max_bin_capacity = np.max(bins)\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    for i in range(len(bins)):\n        bin_capacity = bins[i]\n        remaining_capacity = max_bin_capacity - bin_capacity\n        \n        if bin_capacity == 0:\n            priorities[i] = np.inf  # Handle zero capacity bins\n        else:\n            if item <= bin_capacity:\n                priorities[i] = item / bin_capacity * remaining_capacity\n            else:\n                overflow = item - bin_capacity\n                total_bin_capacity = bin_capacity + remaining_capacity\n                \n                if overflow >= 0.8 * item:\n                    priority_score = overflow + (max_bin_capacity / total_bin_capacity)\n                elif overflow >= 0.5 * item:\n                    priority_score = overflow * 1.5 + (max_bin_capacity / total_bin_capacity)\n                else:\n                    priority_score = overflow * 0.8 + (max_bin_capacity / total_bin_capacity)\n                \n                priorities[i] = priority_score\n    \n    return priorities\n\n", "score": -2067.0}