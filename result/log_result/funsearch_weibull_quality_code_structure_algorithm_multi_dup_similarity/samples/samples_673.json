{"sample_order": 673, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex priority calculation for each bin based on item size and bin capacities.\"\"\"\n    num_bins = len(bins)\n    priorities = np.zeros(num_bins)\n    \n    for i in range(num_bins):\n        ratio = item / bins[i]\n        \n        if ratio < 0.5:\n            priorities[i] = 2 * ratio + 0.3\n        elif ratio < 1:\n            priorities[i] = 1.5 * ratio + 0.5\n        else:\n            priorities[i] = 1.2 * ratio + 0.7\n            \n        # Adjust priority based on bin position\n        if i % 2 == 0:\n            priorities[i] += 0.2\n        else:\n            priorities[i] -= 0.1\n        \n        # Consider total capacity utilization\n        total_capacity = np.sum(bins)\n        if total_capacity > 100:\n            priorities[i] += 0.5\n        \n    return priorities\n\n", "score": null}