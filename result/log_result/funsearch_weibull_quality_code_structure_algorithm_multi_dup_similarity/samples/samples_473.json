{"sample_order": 473, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    avg_capacity = np.mean(bins)\n\n    total_capacity = sum(bins)\n    avg_bin_capacity = total_capacity / n_bins\n    \n    bin_utilization = [(bin_cap - item) / bin_cap if bin_cap >= item else -1 for bin_cap in bins]\n    \n    for i in range(n_bins):\n        if bin_utilization[i] >= 0:\n            utilization_score = 1 / (1 + bin_utilization[i])\n            \n            if bins[i] == max_capacity:\n                priorities[i] = utilization_score * 1.8\n            elif bins[i] == min_capacity:\n                priorities[i] = utilization_score * 1.2\n            else:\n                priorities[i] = utilization_score\n                \n            bin_difference = bins[i] - avg_bin_capacity\n            if bin_difference > 5:\n                priorities[i] *= 1.5\n            elif 0 < bin_difference <= 5:\n                priorities[i] *= 1.2\n            elif -5 <= bin_difference < 0:\n                priorities[i] *= 0.8\n        else:\n            priorities[i] = 0\n\n    return priorities\n\n", "score": -4997.4}