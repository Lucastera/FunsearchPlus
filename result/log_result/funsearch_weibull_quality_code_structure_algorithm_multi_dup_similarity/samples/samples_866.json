{"sample_order": 866, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform complex calculations on the input data to find the target.\"\"\"\n    \n    result = np.zeros_like(data)\n    \n    # Normalize data\n    normalized_data = (data - np.mean(data)) / np.std(data)\n    \n    for idx, val in enumerate(normalized_data):\n        if val > target:\n            result[idx] = val * 2\n        elif val <= target and val > 0:\n            result[idx] = val * 1.5\n        else:\n            result[idx] = val * 0.5\n    \n    # Apply additional transformation based on target value\n    for i in range(len(result)):\n        if result[i] > target:\n            result[i] = target + (result[i] - target) * 0.8\n        elif result[i] < target:\n            result[i] = target - (target - result[i]) * 0.6\n    \n    # Adjust values based on their positions\n    for i in range(1, len(result)-1):\n        if result[i] > result[i-1] and result[i] > result[i+1]:\n            result[i] = result[i] * 1.2\n    \n    return result\n\n", "score": null}