{"sample_order": 883, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of priority function.\"\"\"\n\n    # Constants for weighting bins\n    MAX_WEIGHT = 1.8\n    MIN_WEIGHT = 1.2\n    DEFAULT_WEIGHT = 1.0\n\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    avg_capacity = np.mean(bins)\n    total_capacity = sum(bins)\n    avg_bin_capacity = total_capacity / n_bins\n\n    # Calculate weights for each bin based on capacity\n    weights = [MAX_WEIGHT if cap == max_capacity\n               else MIN_WEIGHT if cap == min_capacity\n               else DEFAULT_WEIGHT for cap in bins]\n\n    for i in range(n_bins):\n        remaining_capacity = bins[i] - item\n\n        if remaining_capacity >= 0:\n            priority_score = 1 / (1 + remaining_capacity)\n            priorities[i] = priority_score * weights[i]\n\n            # Adjust priorities based on capacity difference from average bin capacity\n            capacity_difference = bins[i] - avg_bin_capacity\n            adjust_factor = 1.0\n\n            if capacity_difference > 5:\n                adjust_factor = 1.7\n            elif 0 < capacity_difference <= 5:\n                adjust_factor = 1.3\n            elif -5 <= capacity_difference < 0:\n                adjust_factor = 0.9\n\n            priorities[i] *= adjust_factor\n\n            # Cap the priority value\n            if priorities[i] > 1.5:\n                priorities[i] = 1.5\n\n        else:\n            priorities[i] = 0\n\n    return priorities\n\n", "score": -2064.2}