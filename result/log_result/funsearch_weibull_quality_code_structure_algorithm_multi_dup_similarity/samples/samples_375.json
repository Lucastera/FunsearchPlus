{"sample_order": 375, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n    total_capacity = np.sum(bins)\n    total_bins = len(bins)\n    \n    avg_bin_capacity = total_capacity / total_bins\n    max_bin_index = np.argmax(bins)\n    min_bin_index = np.argmin(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        remaining_capacity = total_capacity - bin_capacity\n        weighted_ratio = item / bin_capacity * remaining_capacity\n        weighted_overflow = (item - bin_capacity) * (max_bin_capacity / (bin_capacity + 1))\n\n        if bin_capacity <= 0:\n            priorities[i] = np.nan\n        else:\n            if bin_capacity > avg_bin_capacity:\n                priorities[i] = max(weighted_ratio, 1.2 * weighted_overflow)  # Prioritize bins above average capacity\n            else:\n                if i == max_bin_index:\n                    priorities[i] = 1.3 * weighted_overflow  # Boost priority for bin with max capacity\n                elif i == min_bin_index:\n                    priorities[i] = 1.1 * weighted_ratio  # Enhance priority for bin with min capacity\n                else:\n                    priorities[i] = min(1.2 * weighted_overflow, 1.1 * weighted_ratio)  # Balance other bins\n\n    return priorities\n\n", "score": -2067.0}