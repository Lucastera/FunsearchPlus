{"sample_order": 52, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacity = [bin_val - item for bin_val in bins]\n\n    utilization_ratio = [(bin_val - rem_cap) / bin_val for bin_val, rem_cap in zip(bins, remaining_capacity)]\n\n    priorities = []\n\n    for i in range(len(bins)):\n        if utilization_ratio[i] < 0.1:\n            priorities.append(0.9)\n        elif 0.1 <= utilization_ratio[i] < 0.3:\n            priorities.append(0.7)\n        elif 0.3 <= utilization_ratio[i] < 0.6:\n            priorities.append(0.5)\n        elif 0.6 <= utilization_ratio[i] < 0.8:\n            priorities.append(0.3)\n        else:\n            priorities.append(0.1)\n\n    return priorities\n\n", "score": -3081.0}