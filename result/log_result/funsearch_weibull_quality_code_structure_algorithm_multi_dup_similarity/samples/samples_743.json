{"sample_order": 743, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"An advanced version of `priority` function.\"\"\"\n    \n    # Calculate the remaining capacity of each bin after adding the item\n    remaining_capacity = bins - item\n    \n    # Calculate the utilization ratio and sort the bins based on it\n    utilization_ratio = (bins - remaining_capacity) / bins\n    sorted_bins_indices = np.argsort(utilization_ratio)[::-1]\n    \n    # Initialize priorities with zeros\n    priorities = np.zeros_like(bins)\n    \n    # Define priority levels based on utilization ratio\n    for i, index in enumerate(sorted_bins_indices):\n        priority_increment = i * 0.1  # Increment priority for each subsequent bin\n        if utilization_ratio[index] <= 0.1:\n            priorities[index] = 1.0 + priority_increment\n        elif utilization_ratio[index] <= 0.3:\n            priorities[index] = 0.8 + priority_increment\n        elif utilization_ratio[index] <= 0.6:\n            priorities[index] = 0.6 + priority_increment\n        elif utilization_ratio[index] <= 0.8:\n            priorities[index] = 0.4 + priority_increment\n        else:\n            priorities[index] = 0.2 + priority_increment\n        \n        # Adjust priorities based on remaining capacity\n        if bins[index] - item < 0.1 * bins[index]:\n            priorities[index] -= 0.2\n        elif bins[index] - item < 0.3 * bins[index]:\n            priorities[index] -= 0.1\n        \n        # Compare utilization ratio with the next bin\n        if i < len(bins) - 1:\n            next_index = sorted_bins_indices[i + 1]\n            if utilization_ratio[index] > utilization_ratio[next_index]:\n                priorities[index] += 0.1\n            else:\n                priorities[index] -= 0.1\n        \n        # Fine-tune priorities based on specific conditions\n        if i % 2 == 0:  # If bin index is even\n            priorities[index] += 0.2\n        if bins[index] < 0.2 * item:  # If bin capacity is less than 20% of item size\n            priorities[index] -= 0.3\n        \n    return priorities\n\n", "score": -5000.0}