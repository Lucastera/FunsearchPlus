{"sample_order": 296, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform a complex operation on a given matrix.\"\"\"\n    result = np.zeros_like(matrix)\n    \n    # Iterate over each row in the matrix\n    for i in range(matrix.shape[0]):\n        row = matrix[i, :]\n        \n        # Check if the sum of the row is even or odd\n        if np.sum(row) % 2 == 0:\n            # If sum is even, multiply each element by 2\n            result[i, :] = row * 2\n        else:\n            # If sum is odd, take the square root of each element\n            result[i, :] = np.sqrt(row)\n    \n    return result\n\n", "score": null}