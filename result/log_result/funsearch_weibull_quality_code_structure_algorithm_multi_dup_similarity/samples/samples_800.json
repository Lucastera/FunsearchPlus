{"sample_order": 800, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Description of the function\n    \"\"\"\n    \n    result = np.zeros_like(param1)\n    \n    # Perform some initial calculations\n    for i in range(len(param1)):\n        result[i] = param1[i] * param2\n    \n    # Apply additional transformations based on certain conditions\n    for idx, val in enumerate(result):\n        if val < 0:\n            result[idx] = np.abs(val)\n        elif val >= 0 and val < 10:\n            result[idx] = val ** 2\n        else:\n            result[idx] = val / param2\n    \n    # Final processing step\n    for i in range(len(result)):\n        result[i] = np.round(result[i], 2)\n    \n    return result\n\n", "score": null}