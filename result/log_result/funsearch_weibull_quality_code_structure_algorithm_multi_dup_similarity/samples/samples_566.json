{"sample_order": 566, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    if len(bins) == 0:\n        raise ValueError(\"Bins array must not be empty.\")\n    \n    priorities = np.zeros_like(bins)\n    \n    # Calculate priorities based on bin capacities and item size\n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.inf\n        else:\n            priorities[i] = item / bins[i]\n    \n    # Normalize priorities to be between 0 and 1\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    normalized_priorities = (priorities - min_priority) / (max_priority - min_priority)\n    \n    # Apply non-linear weighting to priorities based on different conditions\n    for idx, val in enumerate(bins):\n        priority = normalized_priorities[idx]\n        \n        # Adjust priorities based on item size and bin capacity ratio\n        if val < item:\n            priority *= 1.5\n        elif val >= item and val < (2 * item):\n            priority *= 1.2\n        else:\n            priority *= 0.8\n        \n        # Limit priority score to maximum of 1\n        priority = min(priority, 1)\n        \n        # Apply additional fine-tuning based on distribution of bin capacities\n        sorted_indices = np.argsort(bins)\n        sorted_idx = np.where(sorted_indices == idx)[0][0]\n        \n        if sorted_idx < len(sorted_indices) * 0.2:\n            priority *= 1.1\n        elif sorted_idx >= len(sorted_indices) * 0.2 and sorted_idx < len(sorted_indices) * 0.8:\n            priority *= 1.05\n        else:\n            priority *= 0.9\n        \n        normalized_priorities[idx] = priority\n    \n    return normalized_priorities\n\n", "score": null}