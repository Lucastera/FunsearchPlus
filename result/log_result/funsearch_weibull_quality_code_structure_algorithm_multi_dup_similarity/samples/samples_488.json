{"sample_order": 488, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of priority calculation for bin packing.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    max_bin_capacity = np.max(bins)\n\n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        \n        remaining_space_ratio = (max_bin_capacity - bins[i]) / max_bin_capacity\n        utilization_ratio = (bins[i] - remaining_capacity) / bins[i]\n\n        priority = 0.0\n\n        if remaining_capacity < item:\n            priority = 0.1\n        elif utilization_ratio <= 0.1:\n            priority = 0.9\n        elif remaining_space_ratio < 0.1:\n            priority = 0.2\n        else:\n            priority = 0.5 * utilization_ratio + 0.3 * remaining_space_ratio\n\n        priorities[i] = priority\n\n    return priorities\n\n", "score": -2071.8}