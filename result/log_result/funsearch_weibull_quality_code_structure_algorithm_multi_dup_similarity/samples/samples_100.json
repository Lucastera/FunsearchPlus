{"sample_order": 100, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    weights = np.zeros_like(bins)\n    \n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    range_capacity = max_capacity - min_capacity\n    \n    # Assign weights based on bin capacities\n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            weights[i] = 1.0\n        elif bins[i] == min_capacity:\n            weights[i] = 0.5\n        else:\n            weights[i] = (bins[i] - min_capacity) / range_capacity * 0.5 + 0.5\n    \n    priority_scores = np.zeros_like(bins)\n    \n    # Calculate priority score for each bin\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priority_scores[i] = weights[i] * np.exp(-(item - bins[i]) ** 2)\n        else:\n            priority_scores[i] = weights[i] * np.exp(-(item - bins[i]) ** 2) * 0.5\n    \n    return priority_scores\n\n", "score": -2071.8}