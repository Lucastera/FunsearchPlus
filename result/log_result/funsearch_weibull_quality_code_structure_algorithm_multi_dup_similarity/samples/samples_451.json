{"sample_order": 451, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    avg_bin_capacity = np.mean(bins)\n\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = max(0.1, 1.0 - (bins[i] - item) / bins[i] + (bins[i] - min_bin_capacity) / (max_bin_capacity - min_bin_capacity))\n        else:\n            priorities[i] = max(0.1, 1.0 - (item - bins[i]) / item - (bins[i] - min_bin_capacity) / (max_bin_capacity - min_bin_capacity))\n\n        if bins[i] > avg_bin_capacity:\n            priorities[i] *= 1.2\n        else:\n            priorities[i] *= 0.8\n\n    return priorities\n\n", "score": null}