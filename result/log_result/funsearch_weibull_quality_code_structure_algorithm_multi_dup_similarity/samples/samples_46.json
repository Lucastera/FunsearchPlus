{"sample_order": 46, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that processes input data.\n\n    Args:\n        input_data: Array of input data.\n\n    Returns:\n        Processed array based on complex logic.\n    \"\"\"\n    processed_data = np.zeros_like(input_data)\n\n    # Iterate over each element in input_data\n    for idx, value in enumerate(input_data):\n        if value % 2 == 0:  # Check if value is even\n            processed_data[idx] = value * 2\n        elif value % 3 == 0:  # Check if value is divisible by 3\n            processed_data[idx] = value * 3\n        else:\n            processed_data[idx] = value  # Keep value as is\n\n    return processed_data\n\n", "score": null}