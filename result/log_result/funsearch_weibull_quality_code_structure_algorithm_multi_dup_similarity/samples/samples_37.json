{"sample_order": 37, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity:  \n            return 1 + item / bin_capacity  \n        else:\n            return 1 - (item - bin_capacity) / item  \n    \n    item_arr = np.full_like(bins, item)  \n    remaining_space = bins - item_arr  \n\n    priorities = np.zeros_like(bins)  \n\n    for i in range(len(bins)):\n        if i % 2 == 0:  # Assign higher priority to alternate bins\n            priorities[i] = calculate_priority(item, bins[i]) * 1.5\n        else:\n            priorities[i] = calculate_priority(item, bins[i]) * 0.8\n    \n    sum_priorities = np.sum(priorities)\n    priorities = priorities / sum_priorities  # Normalize priorities to sum up to 1\n    \n    return priorities\n\n", "score": -2069.8}