{"sample_order": 612, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function to calculate priority scores for multiple items and bins.\"\"\"\n    priorities = np.zeros((len(items), len(bins)))\n\n    max_bin_capacity = np.max(bins)\n    total_capacity = np.sum(bins)\n    \n    for i, item in enumerate(items):\n        for j, bin_capacity in enumerate(bins):\n            remaining_capacity = total_capacity - bin_capacity\n            weighted_ratio = item / bin_capacity * remaining_capacity\n            weighted_overflow = (item - bin_capacity) * (max_bin_capacity / (bin_capacity + 1))\n\n            if bin_capacity <= 0:\n                priorities[i][j] = np.nan\n            else:\n                if item <= bin_capacity:\n                    priorities[i][j] = min(weighted_ratio, 1.2 * weighted_overflow)  # Adding a cap to prioritize smaller bins\n                else:\n                    if weighted_overflow > 0.1 * item:\n                        priorities[i][j] = max(1.5 * weighted_overflow, 0.7 * weighted_ratio)  # Balancing prioritization\n                    else:\n                        priorities[i][j] = min(0.8 * weighted_overflow, 1.2 * weighted_ratio)  # Handling overflow scenarios\n\n    return priorities\n\n", "score": null}