{"sample_order": 841, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n\n    max_utilization = np.max(utilization_ratio)\n    min_utilization = np.min(utilization_ratio)\n    utilization_range = max_utilization - min_utilization\n\n    for i in range(len(bins)):\n        if utilization_ratio[i] == max_utilization:\n            priorities[i] = 1.0\n        elif utilization_ratio[i] == min_utilization:\n            priorities[i] = 0.2\n        else:\n            priorities[i] = 0.2 + 0.6 * (utilization_ratio[i] - min_utilization) / utilization_range\n\n        future_capacity = bins[i] - item\n        future_utilization = future_capacity / bins[i]\n\n        if utilization_ratio[i] > 0.8:  # High utilization\n            priorities[i] += 0.3\n        elif utilization_ratio[i] < 0.2:  # Low utilization\n            priorities[i] += 0.2\n        elif future_utilization < 0.5:  # Potential savings\n            priorities[i] += 0.1\n\n        # Additional condition based on nearby bin utilization\n        if i > 0:\n            utilization_diff = abs(utilization_ratio[i] - utilization_ratio[i-1])\n            if utilization_diff > 0.3:  \n                priorities[i] += 0.2\n            elif utilization_diff < 0.1:\n                priorities[i] -= 0.1\n\n        # Adjust priority for large items\n        if item > bins[i] * 0.8:\n            priorities[i] += 0.5\n\n    return priorities\n\n", "score": -2068.2}