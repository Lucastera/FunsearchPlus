{"sample_order": 711, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    result = np.zeros_like(data)\n    \n    # Normalize data\n    normalized_data = data / np.max(data)\n    \n    # Apply different operations based on data value\n    for i in range(len(normalized_data)):\n        if normalized_data[i] < 0.2:\n            result[i] = normalized_data[i] * 2\n        elif 0.2 <= normalized_data[i] < 0.5:\n            result[i] = normalized_data[i] * 3\n        elif 0.5 <= normalized_data[i] < 0.8:\n            result[i] = normalized_data[i] * 4\n        else:\n            result[i] = normalized_data[i] * 5\n    \n    # Add some additional processing\n    for i in range(len(result)):\n        if i % 2 == 0:\n            result[i] += 1\n        else:\n            result[i] -= 1\n    \n    return result\n\n", "score": null}