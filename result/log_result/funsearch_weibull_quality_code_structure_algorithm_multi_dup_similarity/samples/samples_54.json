{"sample_order": 54, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v1`.\"\"\"\n    \n    # Initialize array to store priorities\n    priorities = np.zeros_like(bins)\n    \n    # Calculate total capacity of all bins\n    total_capacity = np.sum(bins)\n    \n    # Calculate average capacity per bin\n    avg_capacity = total_capacity / len(bins)\n    \n    # Calculate deviation of each bin capacity from average capacity\n    deviations = [abs(capacity - avg_capacity) for capacity in bins]\n    \n    # Calculate priority based on deviation\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priorities[i] = 1.0 - (bins[i] - item) / bins[i] + (deviations[i] / total_capacity)\n        else:\n            priorities[i] = max(0, 1.0 - (item - bins[i]) / item - (deviations[i] / total_capacity))\n    \n    return priorities\n\n", "score": -2069.2}