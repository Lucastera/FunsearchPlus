{"sample_order": 141, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n    \n    total_capacity = np.sum(bins)\n    \n    if total_capacity == 0:\n        return priorities\n    \n    avg_capacity = total_capacity / len(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            remaining_space_ratio = (bins[i] - item) / bins[i]\n            future_space = remaining_space_ratio * total_capacity\n            if future_space >= item:\n                priorities[i] = 1.0 - remaining_space_ratio + (abs(bins[i] - avg_capacity) / total_capacity)\n            else:\n                priorities[i] = 1.0 - remaining_space_ratio + (2 * abs(item - future_space) / total_capacity)\n        else:\n            extra_space_ratio = (item - bins[i]) / item\n            future_space = extra_space_ratio * total_capacity\n            if future_space < item:\n                priorities[i] = max(0, 1.0 - extra_space_ratio - (abs(bins[i] - avg_capacity) / total_capacity))\n            else:\n                priorities[i] = max(0, 1.0 - extra_space_ratio - (2 * abs(item - future_space) / total_capacity))\n    \n    return priorities\n\n", "score": -2069.2}