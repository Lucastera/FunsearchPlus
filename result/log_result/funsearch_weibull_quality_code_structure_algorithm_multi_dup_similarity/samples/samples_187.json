{"sample_order": 187, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of priority function.\"\"\"\n    priorities = np.zeros_like(bins) # Initialize priorities array\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n    total_bin_capacity = np.sum(bins)\n    total_bins = len(bins)\n\n    for i in range(total_bins):\n        if bins[i] <= 0:\n            priorities[i] = np.nan\n        else:\n            remaining_capacity = max_bin_capacity - bins[i]\n            weighted_ratio = item / bins[i] * remaining_capacity\n            weighted_overflow = (item - bins[i]) * (total_bin_capacity / (bins[i] + 1))\n\n            if weighted_overflow >= weighted_ratio:\n                if remaining_capacity >= item:\n                    priorities[i] = remaining_capacity * 1.5 # Boost priority for bins with enough remaining capacity\n                elif bins[i] < total_bin_capacity / total_bins:\n                    priorities[i] = weighted_overflow * 1.3 # Increase priority for bins with lower capacity\n                else:\n                    priorities[i] = weighted_overflow * 1.2\n            else:\n                priorities[i] = weighted_ratio\n\n    return priorities\n\n", "score": -2067.0}