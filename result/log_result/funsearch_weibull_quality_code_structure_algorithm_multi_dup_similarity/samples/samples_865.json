{"sample_order": 865, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    if len(bins) == 0:\n        raise ValueError(\"Bins array must not be empty.\")\n    \n    priorities = np.zeros_like(bins)\n    \n    # Determine the total remaining capacity of all bins\n    total_capacity = sum(bins)\n    \n    # Calculate priorities based on a weighted approach considering total capacity\n    for i in range(len(bins)):\n        remaining_capacity = total_capacity - bins[i]\n        if remaining_capacity == 0:\n            priorities[i] = np.inf\n        else:\n            priorities[i] = item / remaining_capacity\n            \n    return priorities\n\n", "score": -2071.8}