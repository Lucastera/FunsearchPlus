{"sample_order": 724, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n\n    priorities = np.zeros_like(bins)\n    \n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                free_space_ratio = (bins[i] - item) / bins[i]\n                near_full_ratio = (bins[i] - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n                capacity_ratio = bins[i] / total_capacity\n                priority_score = 1.0 - free_space_ratio + near_full_ratio + capacity_ratio\n                priorities[i] = max(0, min(1, priority_score))\n        else:\n            overflow_ratio = (item - bins[i]) / item\n            near_full_ratio = (bins[i] - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n            capacity_ratio = bins[i] / total_capacity\n            priority_score = 1.0 - overflow_ratio - near_full_ratio + capacity_ratio\n            priorities[i] = max(0, min(1, priority_score))\n            \n    return priorities\n\n", "score": -2006.6}