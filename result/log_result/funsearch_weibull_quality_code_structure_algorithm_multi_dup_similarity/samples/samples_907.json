{"sample_order": 907, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n\n    max_utilization = np.max(utilization_ratio)\n    min_utilization = np.min(utilization_ratio)\n    utilization_range = max_utilization - min_utilization\n\n    for i in range(len(bins)):\n        if utilization_ratio[i] == max_utilization:\n            priorities[i] = 1.0\n        elif utilization_ratio[i] == min_utilization:\n            priorities[i] = 0.2\n        else:\n            priorities[i] = 0.2 + 0.6 * (utilization_ratio[i] - min_utilization) / utilization_range\n\n        # Add complexity based on available capacity in other bins\n        future_capacities = np.delete(bins, i) - item\n        future_utilizations = future_capacities / np.delete(bins, i)\n\n        if utilization_ratio[i] > 0.5:  # High utilization\n            priorities[i] += 0.4 * np.mean(future_utilizations)\n        elif utilization_ratio[i] < 0.5:  # Low utilization\n            priorities[i] += 0.3 * np.min(future_utilizations)\n        else:\n            priorities[i] += 0.2 * np.max(future_utilizations)\n\n    return priorities\n\n", "score": null}