{"sample_order": 182, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of priority function with optimized logic.\"\"\"\n    priorities = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        utilization_ratio = (bins[i] - remaining_capacity[i]) / max_bin_capacity\n        \n        if utilization_ratio < 0.1:\n            priorities[i] = 0.9\n        elif 0.1 <= utilization_ratio < 0.3:\n            priorities[i] = 0.7\n        elif 0.3 <= utilization_ratio < 0.6:\n            priorities[i] = 0.5\n        else:\n            priorities[i] = 0.3\n\n        if utilization_ratio > 0.7:\n            priorities[i] += 0.1\n\n    total_capacity = np.sum(bins)\n    used_capacity = np.sum(bins) - np.sum(remaining_capacity)\n    remaining_capacity_ratio = (total_capacity - used_capacity) / total_capacity\n\n    if remaining_capacity_ratio < 0.3:\n        priorities -= 0.1\n    elif remaining_capacity_ratio > 0.8:\n        priorities += 0.2\n\n    return priorities\n\n", "score": null}