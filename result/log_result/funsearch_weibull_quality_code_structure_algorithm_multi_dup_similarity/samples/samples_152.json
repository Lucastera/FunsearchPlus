{"sample_order": 152, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n\n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        future_capacity = max_capacity - item\n        past_capacity = min_capacity - item\n\n        if remaining_capacity >= 0:\n            if bins[i] == max_capacity:\n                priority = 1.5 / (1 + remaining_capacity)  \n            elif bins[i] == min_capacity:\n                priority = 1 / (1 + remaining_capacity)  \n            else:\n                priority = 1.2 / (1 + remaining_capacity)  \n        else:\n            if future_capacity >= 0:\n                priority = 0.5 / (1 + future_capacity)  \n            else:\n                priority = 0.8 / (1 + past_capacity)  \n\n        # Adjust priority based on index\n        if i % 2 == 0:  # Even index bins get a boost\n            priority *= 1.2\n        else:  # Odd index bins get a penalty\n            priority *= 0.8\n\n        # Adjust priority based on bin capacity range\n        capacity_range = max_capacity - min_capacity\n        priority -= 0.1 * (1 - (bins[i] - min_capacity) / capacity_range)\n\n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": null}