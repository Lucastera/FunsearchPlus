{"sample_order": 893, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n    \n    priorities = np.zeros_like(bins)  # Initialize priorities array\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    max_bin_capacity = np.max(bins)\n    total_bins = len(bins)\n    \n    for i in range(total_bins):\n        if bins[i] <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        else:\n            remaining_capacity_ratio = bins[i] / max_bin_capacity  # Calculate remaining capacity ratio\n            \n            if item <= bins[i]:\n                priority_score = (item / bins[i]) * (max_bin_capacity - bins[i]) * (1 + remaining_capacity_ratio)  # Weighted ratio based on remaining capacity\n            else:\n                overflow = item - bins[i]\n                total_bin_capacity = bins[i] + (max_bin_capacity - bins[i])\n                overflow_factor = overflow / total_bins  # Calculate overflow factor\n                \n                if overflow > 0.5 * item:\n                    priority_score = overflow_factor * (max_bin_capacity / total_bin_capacity) * (1 + remaining_capacity_ratio) * 1.5  # Weighted overflow considering overall bin capacity with extra weight\n                elif overflow < 0.2 * item:\n                    priority_score = overflow_factor * (max_bin_capacity / total_bin_capacity) * (1 + remaining_capacity_ratio) * 0.8  # Weighted overflow considering overall bin capacity with reduced weight\n                else:\n                    priority_score = overflow_factor * (max_bin_capacity / total_bin_capacity) * (1 + remaining_capacity_ratio)  # Regular weighted overflow\n                \n            priorities[i] = priority_score\n    \n    return priorities\n\n", "score": -2067.0}