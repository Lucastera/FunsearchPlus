{"sample_order": 219, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    if len(bins) == 0:\n        raise ValueError(\"Bins array must not be empty.\")\n    \n    priorities = np.zeros_like(bins)\n    \n    lowest_capacity_bin = np.argmin(bins)\n    \n    for i in range(len(bins)):\n        if i == lowest_capacity_bin:\n            priorities[i] = np.inf\n        else:\n            priorities[i] = item / bins[i]\n    \n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    \n    normalized_priorities = (priorities - min_priority) / (max_priority - min_priority)\n    \n    weighted_priorities = normalized_priorities ** 2\n    \n    return weighted_priorities\n\n", "score": -2070.4}