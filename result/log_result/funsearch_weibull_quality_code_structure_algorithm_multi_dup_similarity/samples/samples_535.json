{"sample_order": 535, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex priority calculation for adding item to each bin.\"\"\"\n    \n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n    \n    # Calculate total, min, and max capacities of bins\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    \n    # Iterate through each bin and calculate priority score\n    for i, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:  # If item can fit in the bin\n            if bin_capacity == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = 1.0 - (bin_capacity - item) / bin_capacity + (bin_capacity - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n        else:  # If item cannot fit in the bin\n            priorities[i] = max(0, 1.0 - (item - bin_capacity) / item - (bin_capacity - min_bin_capacity) / (max_bin_capacity - min_bin_capacity))\n    \n    return priorities\n\n", "score": -2006.6}