{"sample_order": 940, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= 0.5 * bin_capacity:\n            return 1 + item / bin_capacity * 2\n        elif item <= 0.9 * bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 + np.exp(item / bin_capacity)\n\n    remaining_space = bins - item\n    priorities = np.zeros_like(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        priorities[i] = calculate_priority(item, bin_capacity)\n\n    sorted_indices = np.argsort(priorities)\n\n    for index in sorted_indices:\n        if remaining_space[index] >= 0:\n            break\n        else:\n            best_swap = -1\n            max_priority_increase = -np.inf\n            for empty_bin_index in sorted_indices:\n                if remaining_space[empty_bin_index] >= item:\n                    new_priority = calculate_priority(item, bins[empty_bin_index])\n                    priority_increase = new_priority - priorities[index]\n                    if priority_increase > max_priority_increase:\n                        best_swap = empty_bin_index\n                        max_priority_increase = priority_increase\n            if best_swap != -1:\n                priorities[index] = 0\n                priorities[best_swap] = 1\n                remaining_space[best_swap] -= item\n                break\n\n    remaining_space = bins - item\n    sorted_indices = np.argsort(priorities)\n\n    for index in sorted_indices:\n        if remaining_space[index] >= 0:\n            break\n        else:\n            best_swap = -1\n            max_priority_increase = -np.inf\n            for empty_bin_index in sorted_indices:\n                if remaining_space[empty_bin_index] >= item:\n                    new_priority = calculate_priority(item, bins[empty_bin_index])\n                    priority_increase = new_priority - priorities[index]\n                    if priority_increase > max_priority_increase:\n                        best_swap = empty_bin_index\n                        max_priority_increase = priority_increase\n            if best_swap != -1:\n                priorities[index] = 0\n                priorities[best_swap] = 1\n                remaining_space[best_swap] -= item\n                break\n\n    return priorities\n\n", "score": -2065.4}