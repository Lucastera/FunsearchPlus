{"sample_order": 367, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    total_capacity = np.sum(bins)\n    avg_capacity = total_capacity / len(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priority_factor = (bins[i] - item) / bins[i] + (avg_capacity - bins[i]) / total_capacity\n            priorities[i] = max(0, 1.0 - priority_factor)\n        else:\n            priority_factor = (item - bins[i]) / item + (bins[i] - avg_capacity) / total_capacity\n            priorities[i] = max(0, 1.0 - priority_factor)\n    \n    return priorities\n\n", "score": -2071.8}