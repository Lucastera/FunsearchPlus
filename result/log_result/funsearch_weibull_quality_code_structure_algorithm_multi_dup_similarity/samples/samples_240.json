{"sample_order": 240, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function with optimized solution quality and clean code structure.\"\"\"\n    \n    # Preprocess the data\n    processed_data = [item ** 2 for item in data if item > 0]  # Square positive elements\n    \n    # Initialize variables\n    result = np.zeros_like(processed_data)\n    total_sum = np.sum(processed_data)\n    \n    # Check if total sum is even or odd\n    if total_sum % 2 == 0:  # Total sum is even\n        target_sum = total_sum // 2\n    else:  # Total sum is odd\n        target_sum = (total_sum + 1) // 2\n    \n    # Find the combination that gives sum closest to the target sum\n    for i in range(len(processed_data)):\n        for j in range(i+1, len(processed_data)):\n            if processed_data[i] + processed_data[j] <= target_sum:\n                result[i] = processed_data[i]\n                result[j] = processed_data[j]\n                break\n    \n    return result\n\n", "score": null}