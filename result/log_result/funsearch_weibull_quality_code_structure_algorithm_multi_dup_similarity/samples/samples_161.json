{"sample_order": 161, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that processes input data.\"\"\"\n    \n    def process_data(data: np.ndarray) -> np.ndarray:\n        processed_data = np.zeros_like(data)  # Initialize processed data array\n        \n        for i in range(len(data)):\n            if data[i] % 2 == 0:  # If number is even\n                processed_data[i] = data[i] * 2  # Double the number\n            else:  # If number is odd\n                processed_data[i] = data[i] + 1  # Increment the number by 1\n                \n        return processed_data\n\n    def analyze_data(processed_data: np.ndarray) -> np.ndarray:\n        analysis_result = np.zeros_like(processed_data)  # Initialize analysis result array\n        \n        for i in range(len(processed_data)):\n            if processed_data[i] < 5:  # If processed data is less than 5\n                analysis_result[i] = 0  # Set analysis result to 0\n            elif processed_data[i] >= 5 and processed_data[i] < 10:  # If processed data is between 5 and 10\n                analysis_result[i] = 1  # Set analysis result to 1\n            else:  # If processed data is greater than or equal to 10\n                analysis_result[i] = 2  # Set analysis result to 2\n                \n        return analysis_result\n\n    processed_data = process_data(data)  # Process input data\n    final_result = analyze_data(processed_data)  # Analyze processed data\n\n    return final_result\n\n", "score": null}