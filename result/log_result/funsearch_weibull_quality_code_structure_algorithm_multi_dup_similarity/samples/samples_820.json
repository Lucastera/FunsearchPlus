{"sample_order": 820, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Alternative approach for calculating priority scores for adding item to each bin.\"\"\"\n\n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n\n    # Calculate total, min, and max capacities of bins\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n\n    # Calculate additional parameters for priority calculation\n    avg_bin_capacity = np.mean(bins)\n    std_bin_capacity = np.std(bins)\n\n    # Iterate through each bin and calculate priority score\n    for i, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:  # If item can fit in the bin\n            if bin_capacity == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                free_space_ratio = (bin_capacity - item) / bin_capacity\n                near_full_ratio = (bin_capacity - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n                capacity_ratio = bin_capacity / total_capacity\n                std_ratio = (bin_capacity - avg_bin_capacity) / std_bin_capacity\n                priority_score = 1.0 - free_space_ratio + near_full_ratio + capacity_ratio + std_ratio\n                priorities[i] = max(0, min(1, priority_score))\n        else:  # If item cannot fit in the bin\n            overflow_ratio = (item - bin_capacity) / item\n            near_full_ratio = (bin_capacity - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n            capacity_ratio = bin_capacity / total_capacity\n            std_ratio = (bin_capacity - avg_bin_capacity) / std_bin_capacity\n            priority_score = 1.0 - overflow_ratio - near_full_ratio + capacity_ratio + std_ratio\n            priorities[i] = max(0, min(1, priority_score))\n\n    return priorities\n\n", "score": -3709.4}