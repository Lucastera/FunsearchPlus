{"sample_order": 763, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Optimized version of priority calculation with advanced scoring technique.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n\n    space_scores = (bins - item) / bins\n    proximity_scores = (bins - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] == max_bin_capacity:\n                priority = 1.0\n            else:\n                space_score = space_scores[i]\n                proximity_score = proximity_scores[i]\n                proximity_factor = 1.0 - ((bins[i] - min_bin_capacity) / (total_capacity - min_bin_capacity))\n                weighted_space = 0.6  # Weight of space score\n                weighted_proximity = 0.3  # Weight of proximity score\n                weighted_proximity_factor = 0.1  # Weight of proximity factor\n                priority = (weighted_space * space_score) + (weighted_proximity * proximity_score) + (weighted_proximity_factor * proximity_factor)\n            priorities[i] = max(0, min(1, priority))\n        else:\n            adjusted_item = item - bins[i]\n            overflow_ratio = adjusted_item / item\n            overflow_score = max(0, 1.0 - overflow_ratio)\n            proximity_score = proximity_scores[i]\n            overflow_weight = 0.7  # Weight of overflow score\n            proximity_weight = 0.3  # Weight of proximity score\n            priority = (overflow_weight * overflow_score) - (proximity_weight * proximity_score)\n            priorities[i] = max(0, min(1, priority))\n\n    return priorities\n\n", "score": -5000.0}