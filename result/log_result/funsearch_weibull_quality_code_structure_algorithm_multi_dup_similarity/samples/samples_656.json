{"sample_order": 656, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n    \n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        bin_capacity = bins[i]\n        \n        if item <= bin_capacity:\n            if bin_capacity == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                remaining_capacity = bin_capacity - item\n                priority_factor1 = (remaining_capacity) / bin_capacity\n                priority_factor2 = (bin_capacity - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n                priorities[i] = 1.0 - priority_factor1 + priority_factor2\n        else:\n            adjusted_item = item - bin_capacity\n            priority_factor1 = (adjusted_item) / item\n            priority_factor2 = (bin_capacity - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n            priorities[i] = max(0, 1.0 - priority_factor1 - priority_factor2)\n    \n    return priorities\n\n", "score": -2006.6}