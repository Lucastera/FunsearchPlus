{"sample_order": 169, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Perform a complex operation on the input data.\n\n    Args:\n        data: Input data in the form of a NumPy array.\n\n    Returns:\n        Processed data after performing the complex operation.\n    \"\"\"\n\n    # Ensure the input data is not empty\n    if data.size == 0:\n        raise ValueError(\"Input data must not be empty.\")\n\n    processed_data = np.zeros_like(data)\n\n    # Loop over each element in the input data\n    for i in range(len(data)):\n        if data[i] < 0:\n            processed_data[i] = data[i] * 2  # Double the value if it's negative\n        else:\n            processed_data[i] = data[i] / 2  # Halve the value if it's non-negative\n\n        # Additional complex operation based on the position of the element\n        if i % 2 == 0:\n            processed_data[i] = processed_data[i] ** 2  # Square the value if index is even\n        else:\n            processed_data[i] = np.sqrt(processed_data[i])  # Square root the value if index is odd\n\n    return processed_data\n\n", "score": null}