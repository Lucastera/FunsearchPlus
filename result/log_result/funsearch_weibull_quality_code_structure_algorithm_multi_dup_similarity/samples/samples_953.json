{"sample_order": 953, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= 0.5 * bin_capacity:\n            return 1 + item / bin_capacity * 3\n        elif item <= 0.8 * bin_capacity:\n            return 1 + item / bin_capacity * 2\n        elif item <= 0.9 * bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 + np.exp(item / bin_capacity)\n\n    \n    remaining_space = bins - item\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n\n    sorted_indices = np.argsort(priorities)\n\n    for i in range(len(sorted_indices)):\n        current_index = sorted_indices[i]\n        if remaining_space[current_index] >= 0:\n            break\n        else:\n            max_increase = -1\n            max_increase_index = -1\n            for j in range(len(sorted_indices)):\n                if i == j:\n                    continue\n                increase = (remaining_space[sorted_indices[j]] - item) / bins[sorted_indices[j]]\n                if increase > max_increase:\n                    max_increase = increase\n                    max_increase_index = sorted_indices[j]\n                    \n            if max_increase_index != -1:\n                priorities[current_index] = 0\n                priorities[max_increase_index] = 1\n                remaining_space[current_index] = bins[current_index] - item\n                remaining_space[max_increase_index] -= item\n            else:\n                priorities[current_index] = -1\n\n    return priorities\n\n", "score": -2060.0}