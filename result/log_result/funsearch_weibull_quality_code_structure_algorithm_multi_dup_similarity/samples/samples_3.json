{"sample_order": 3, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        remaining_capacity = bin_capacity - item\n        num_items = len(bins) - np.count_nonzero(bins - bin_capacity)\n        \n        if remaining_capacity >= 0:\n            priorities[i] = 1 / (num_items ** 2)\n        else:\n            priorities[i] = -1\n    \n    return priorities\n\n", "score": null}