{"sample_order": 272, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    remaining_capacity = total_capacity\n    \n    for i in range(len(bins)):\n        if item == 0:\n            break\n        \n        if bins[i] >= item:\n            priorities[i] = item / bins[i]\n            break\n        else:\n            priorities[i] = bins[i] / item\n            item -= bins[i]\n            remaining_capacity -= bins[i]\n    \n    # Adjust priorities based on specific conditions\n    min_capacity_bin = np.argmin(bins)\n    max_capacity_bin = np.argmax(bins)\n    \n    if priorities[min_capacity_bin] < 0.2:  \n        priorities[min_capacity_bin] = 0.5 * priorities[min_capacity_bin]\n    \n    if priorities[max_capacity_bin] > 0.8:  \n        priorities[max_capacity_bin] = 0.9 * priorities[max_capacity_bin]\n    \n    # Further adjustments based on remaining capacity\n    for i in range(len(bins)):\n        if remaining_capacity == 0:\n            break\n        \n        if priorities[i] == 0:\n            priorities[i] = 0.1  # Assign small priority to empty bins\n            remaining_capacity -= bins[i]\n    \n    return priorities\n\n", "score": -2071.8}