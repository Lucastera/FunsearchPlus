{"sample_order": 290, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n    bin_usage = np.zeros(n_bins)\n\n    # Calculate total capacity and remaining capacity of each bin\n    total_capacity = sum(bins)\n    remaining_capacities = bins - item\n\n    for i in range(n_bins):\n        if remaining_capacities[i] >= 0:\n            priority_score = 1 / (1 + remaining_capacities[i])\n            bin_usage[i] = bins[i] / total_capacity  # Calculate bin usage ratio\n\n            # Adjust priority based on bin usage ratio\n            if bin_usage[i] > 0.7:\n                priorities[i] = priority_score * 0.9  # Reduce priority for heavily used bins\n            elif 0.3 <= bin_usage[i] <= 0.7:\n                priorities[i] = priority_score * 1.1  # Increase priority for moderately used bins\n            else:\n                priorities[i] = priority_score  # Maintain original priority\n        else:\n            priorities[i] = 0\n\n    return priorities\n\n", "score": -2067.0}