{"sample_order": 384, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Most advanced version of priority function.\"\"\"\n\n    # Check if item size is negative\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    # Calculate max bin capacity\n    max_bin_capacity = np.max(bins)\n\n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n\n    # Loop through each bin\n    for i in range(len(bins)):\n        # Handle bins with zero capacity\n        if bins[i] <= 0:\n            priorities[i] = np.nan\n        else:\n            # Calculate remaining capacity in the bin\n            remaining_capacity = max_bin_capacity - bins[i]\n            \n            # Check if item can fit in the bin\n            if item <= bins[i]:\n                priorities[i] = item / bins[i] * remaining_capacity\n            else:\n                # Calculate overflow and total bin capacity\n                overflow = item - bins[i]\n                total_bin_capacity = bins[i] + remaining_capacity\n                \n                # Calculate priority score based on overflow and total capacity\n                priority_score = overflow * (max_bin_capacity / total_bin_capacity)\n                \n                # Adjust priority score based on overflow percentage\n                if overflow > 0.5 * item:\n                    priority_score *= 2\n                elif overflow < 0.2 * item:\n                    priority_score *= 0.5\n                \n                # If priority score is too high, mark as not feasible\n                if priority_score > 0.8 * max_bin_capacity:\n                    priorities[i] = np.inf\n                else:\n                    priorities[i] = priority_score\n\n    return priorities\n\n", "score": -2067.0}