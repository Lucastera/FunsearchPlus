{"sample_order": 166, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"This function performs a complex operation on the input data.\"\"\"\n    \n    result = np.zeros_like(data)\n    \n    # Iterate over each element in the data array\n    for i in range(len(data)):\n        if data[i] % 2 == 0:\n            # If the element is even, square it\n            result[i] = data[i] ** 2\n        else:\n            # If the element is odd, cube it\n            result[i] = data[i] ** 3\n            \n    # Find the sum of all elements in the result array\n    total_sum = np.sum(result)\n    \n    # Check if the total sum is a prime number\n    is_prime = True\n    for i in range(2, int(np.sqrt(total_sum)) + 1):\n        if total_sum % i == 0:\n            is_prime = False\n            break\n    \n    # If the total sum is a prime number, multiply all elements in the result array by 2\n    if is_prime:\n        result *= 2\n    \n    return result\n\n", "score": null}