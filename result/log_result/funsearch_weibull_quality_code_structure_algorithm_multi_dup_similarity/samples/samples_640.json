{"sample_order": 640, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    remaining_capacity = total_capacity\n    sorted_bins = np.argsort(bins)\n    priorities_assigned = 0\n    \n    for i in range(len(sorted_bins)):\n        bin_index = sorted_bins[i]\n        \n        if item == 0:\n            break\n        \n        if bins[bin_index] >= item:\n            priorities[bin_index] = (item / bins[bin_index]) * (1 - priorities_assigned)\n            priorities_assigned += priorities[bin_index]\n            item = 0\n        else:\n            priorities[bin_index] = (bins[bin_index] / item) * (1 - priorities_assigned)\n            priorities_assigned += priorities[bin_index]\n            item -= bins[bin_index]\n    \n    for i in range(len(bins)):\n        if item == 0:\n            break\n        \n        if priorities[i] == 0:\n            priorities[i] = 1 / len(bins) * (1 - priorities_assigned)\n            priorities_assigned += priorities[i]\n    \n    return priorities\n\n", "score": -2069.0}