{"sample_order": 11, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    \n    priorities = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity == 0:\n            priorities[i] = np.inf\n        else:\n            priorities[i] = -log_ratios[i] * bin_capacity / item\n    \n    min_priority = np.min(priorities)\n    max_priority = np.max(priorities)\n    \n    normalized_priorities = (priorities - min_priority) / (max_priority - min_priority)\n    \n    adjusted_priorities = np.where(bins < item, np.full_like(bins, np.inf), normalized_priorities)\n    \n    return adjusted_priorities\n\n", "score": -3653.4}