{"sample_order": 533, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of priority function with optimized logic.\"\"\"\n\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= 0.3 * bin_capacity:\n            return 1.5 + item / bin_capacity\n        elif item <= 0.6 * bin_capacity:\n            return 2 + item / bin_capacity\n        elif item <= 0.8 * bin_capacity:\n            return 2.5 + item / bin_capacity\n        else:\n            return 3 + np.sqrt(item / bin_capacity)\n\n    remaining_space = bins - item\n\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n\n    return priorities\n\n", "score": -2072.2}