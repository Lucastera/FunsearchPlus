{"sample_order": 252, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    if len(bins) == 0:\n        raise ValueError(\"Bins array must not be empty.\")\n    \n    # Initialize arrays for priorities and remaining capacities\n    priorities = np.zeros_like(bins)\n    remaining_capacities = bins.copy()\n    \n    # Sort bins in descending order of capacity\n    sorted_bins = np.flip(np.argsort(remaining_capacities))\n    \n    # Calculate priorities based on remaining capacities and item size\n    for i in sorted_bins:\n        if remaining_capacities[i] <= 0:\n            priorities[i] = np.inf\n        else:\n            priorities[i] = item / remaining_capacities[i]\n    \n    # Apply non-linear weighting to priorities\n    normalized_priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))\n    weighted_priorities = np.sqrt(normalized_priorities)\n    \n    return weighted_priorities\n\n", "score": -2069.2}