{"sample_order": 36, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v2` with optimized logic.\"\"\"\n    \n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        space_ratio = item / bin_capacity\n        if space_ratio <= 0.5:  # If remaining space is more than half of bin capacity\n            return 2 * space_ratio  # Priority is twice the ratio of space\n        else:\n            return 1 + space_ratio  # Priority is 1 plus the ratio of space\n\n    item_arr = np.full_like(bins, item)  # Array of the same size as bins filled with item value\n\n    priorities = np.zeros_like(bins)  # Array to store priorities\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])  # Calculate priority for each bin\n\n    return priorities\n\n", "score": -2070.0}