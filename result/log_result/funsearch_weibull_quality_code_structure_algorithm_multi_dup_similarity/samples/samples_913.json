{"sample_order": 913, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority_score(item, remaining_capacity, bins):\n        return np.exp(-(item - remaining_capacity) ** 2) * np.sqrt(bins)\n\n    priority_scores = np.zeros_like(bins)\n    remaining_capacity = bins.copy()\n    total_capacity = sum(bins)\n\n    while item > 0:\n        best_score = -1\n        best_bin = -1\n\n        for i in range(len(remaining_capacity)):\n            if remaining_capacity[i] >= item:\n                score = calculate_priority_score(item, remaining_capacity[i], bins[i])\n                future_capacity = remaining_capacity[i] - item\n                future_score = calculate_priority_score(item, future_capacity, bins[i])\n                overall_score = 0.7 * score + 0.3 * future_score\n                \n                if overall_score > best_score:\n                    best_score = overall_score\n                    best_bin = i\n            else:\n                score = 0.5 * calculate_priority_score(remaining_capacity[i], remaining_capacity[i], bins[i])\n                future_capacity = remaining_capacity[i]\n                future_score = calculate_priority_score(item, future_capacity, bins[i])\n                overall_score = 0.7 * score + 0.3 * future_score\n                \n                if overall_score > best_score:\n                    best_score = overall_score\n                    best_bin = i\n                    item -= remaining_capacity[i]\n        \n        if remaining_capacity[best_bin] >= item:\n            priority_scores[best_bin] = calculate_priority_score(item, remaining_capacity[best_bin], bins[best_bin])\n            remaining_capacity[best_bin] -= item\n            break\n        else:\n            priority_scores[best_bin] = calculate_priority_score(remaining_capacity[best_bin], remaining_capacity[best_bin], bins[best_bin])\n            item -= remaining_capacity[best_bin]\n            remaining_capacity[best_bin] = 0\n\n    return priority_scores\n\n", "score": -2066.8}