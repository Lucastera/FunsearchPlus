{"sample_order": 135, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v2`.\"\"\"\n\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    avg_capacity = total_capacity / len(bins)\n\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] < avg_capacity:\n                priorities[i] = 1.0 - (bins[i] - item) / bins[i] + 0.5 * (avg_capacity - bins[i]) / avg_capacity\n            else:\n                priorities[i] = 1.0 - (bins[i] - item) / bins[i] - 0.5 * (bins[i] - avg_capacity) / avg_capacity\n        else:\n            if item < avg_capacity:\n                priorities[i] = max(0, 1.0 - (item - bins[i]) / item + 0.5 * (avg_capacity - item) / avg_capacity)\n            else:\n                priorities[i] = max(0, 1.0 - (item - bins[i]) / item - 0.5 * (item - avg_capacity) / avg_capacity)\n\n    return priorities\n\n", "score": -2071.8}