{"sample_order": 243, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns priority with which we want to add item to each bin in a more complex way.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        ratio = item / bins[i]\n        \n        if ratio < 0.3:\n            priorities[i] = 2 * ratio + 0.5\n        elif ratio >= 0.3 and ratio < 1.2:\n            priorities[i] = 1.2 * ratio + 0.6\n        else:\n            priorities[i] = 1.5 * ratio + 1.2\n        \n    return priorities\n\n", "score": -2071.8}