{"sample_order": 97, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    \n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = -log_ratios[i]\n        else:\n            remaining_capacity = bins[i]\n            total_priority = -log_ratios[i]\n            \n            for j in range(i+1, len(bins)):\n                if remaining_capacity >= item:\n                    break\n                    \n                if bins[j] >= item:\n                    priorities[i] += total_priority * (remaining_capacity / item)\n                    break\n                \n                priorities[i] += total_priority\n                remaining_capacity += bins[j]\n                \n            if remaining_capacity >= item:\n                priorities[i] += total_priority * (item / remaining_capacity)\n    \n    return priorities\n\n", "score": -5000.0}