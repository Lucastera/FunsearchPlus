{"sample_order": 138, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of prioritizing bins based on item size and remaining capacities.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n    \n    total_capacity = np.sum(bins)\n    \n    if total_capacity == 0:\n        return priorities\n    \n    avg_capacity = total_capacity / len(bins)\n    \n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        \n        if item <= bins[i]:\n            if remaining_capacity > avg_capacity:\n                priority_score = 1.0 - (remaining_capacity / bins[i])\n            else:\n                priority_score = 1.0 - (remaining_capacity / bins[i]) + (abs(bins[i] - avg_capacity) / total_capacity)\n        else:\n            if remaining_capacity > 0:\n                extra_space_ratio = (item - bins[i]) / item\n                priority_score = max(0, 1.0 - extra_space_ratio - (abs(bins[i] - avg_capacity) / total_capacity))\n            else:\n                priority_score = 0.0\n        \n        priorities[i] = priority_score\n    \n    return priorities\n\n", "score": -2069.2}