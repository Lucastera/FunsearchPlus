{"sample_order": 196, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform a complex operation on input data.\"\"\"\n    \n    if len(input_data) == 0:\n        raise ValueError(\"Input data must not be empty.\")\n    \n    output_data = np.zeros_like(input_data)\n    \n    # Perform complex operation\n    for i in range(len(input_data)):\n        if input_data[i] < 0:\n            output_data[i] = input_data[i] ** 2\n        elif input_data[i] % 2 == 0:\n            output_data[i] = input_data[i] * 3\n        else:\n            output_data[i] = input_data[i] / 2\n    \n    return output_data\n\n", "score": null}