{"sample_order": 345, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that processes input array and returns modified array.\"\"\"\n    result = np.zeros_like(data)\n    \n    for i in range(len(data)):\n        if data[i] % 2 == 0:  # Check if number is even\n            result[i] = data[i] * 2\n        else:\n            if data[i] > 0:  # Check if number is positive\n                result[i] = data[i] ** 2\n            else:\n                result[i] = data[i]  # Keep negative numbers unchanged\n    \n    for i in range(1, len(result)):\n        if result[i] < result[i - 1]:  # Ensure the array is sorted in non-decreasing order\n            result[i] = result[i - 1]\n    \n    return result\n\n", "score": null}