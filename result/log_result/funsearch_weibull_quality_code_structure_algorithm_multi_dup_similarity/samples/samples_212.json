{"sample_order": 212, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n    \n    for i, ratio in enumerate(ratios):\n        if ratio < 0.3:\n            priorities[i] = 2 * ratio + 0.5\n        elif ratio < 0.5:\n            priorities[i] = 1.8 * ratio + 0.7\n        elif ratio < 0.7:\n            priorities[i] = 1.5 * ratio + 0.8\n        elif ratio < 0.75:\n            priorities[i] = 1.3 * ratio + 0.9\n        elif ratio < 0.8:\n            priorities[i] = 1.1 * ratio + 1\n        elif ratio < 0.85:\n            priorities[i] = ratio + 1.1\n        elif ratio < 0.9:\n            priorities[i] = 0.8 * ratio + 1.2\n        elif ratio < 0.95:\n            priorities[i] = 0.6 * ratio + 1.3\n        else:\n            priorities[i] = 0.4 * ratio + 1.4\n        \n    return priorities\n\n", "score": -2071.8}