{"sample_order": 602, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform complex operations on input data.\n\n    Args:\n        data: Input data in numpy array.\n\n    Returns:\n        Processed data after complex operations.\n    \"\"\"\n    output = np.zeros_like(data)\n\n    # Iterate over each element in input data\n    for i in range(len(data)):\n        if data[i] < 0:\n            # If element is negative, take square root and store in output\n            output[i] = np.sqrt(abs(data[i]))\n        elif data[i] > 0:\n            # If element is positive, take cube root and store in output\n            output[i] = np.cbrt(data[i])\n        else:\n            # If element is zero, store it as it is in output\n            output[i] = data[i]\n\n    # Normalize the output data\n    output = output / np.max(np.abs(output))\n\n    return output\n\n", "score": null}