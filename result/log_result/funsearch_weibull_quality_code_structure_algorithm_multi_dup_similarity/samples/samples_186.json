{"sample_order": 186, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of priority function.\"\"\"\n    total_bins = len(bins)\n    max_bin_capacity = np.max(bins)\n    total_bin_capacity = np.sum(bins)\n    \n    priorities = np.zeros_like(bins)\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    for i in range(total_bins):\n        if bins[i] <= 0:\n            priorities[i] = np.nan\n        else:\n            remaining_capacity = max_bin_capacity - bins[i]\n            weighted_ratio = item / bins[i] * remaining_capacity\n            weighted_overflow = (item - bins[i]) * (total_bin_capacity / (bins[i] + 1))\n            \n            if weighted_ratio < 0.5 * weighted_overflow:\n                priorities[i] = 1.5 * weighted_overflow\n            elif weighted_ratio < 0.8 * weighted_overflow:\n                priorities[i] = 1.2 * weighted_overflow\n            else:\n                priorities[i] = weighted_ratio\n\n    return priorities\n\n", "score": -2067.0}