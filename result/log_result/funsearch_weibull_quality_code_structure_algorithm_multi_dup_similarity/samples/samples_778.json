{"sample_order": 778, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins)\n    capacities = np.sort(bins)\n    priorities = np.zeros_like(bins)\n    \n    remaining_capacity = capacities - item\n    utilization_ratio = 1 - remaining_capacity / capacities\n    \n    min_utilization = utilization_ratio[0]\n    max_utilization = utilization_ratio[-1]\n    utilization_range = max_utilization - min_utilization\n    \n    for i in range(num_bins):\n        if utilization_ratio[i] == max_utilization:\n            priorities[np.where(bins == capacities[i])] = 1.0\n        elif utilization_ratio[i] == min_utilization:\n            priorities[np.where(bins == capacities[i])] = 0.2\n        else:\n            priorities[np.where(bins == capacities[i])] = 0.2 + 0.6 * (utilization_ratio[i] - min_utilization) / utilization_range\n\n    for i in range(num_bins):\n        remaining_item_ratio = remaining_capacity[i] / item\n        \n        if remaining_item_ratio < 0.2:\n            priorities[np.where(bins == capacities[i])] += 0.3\n        elif remaining_item_ratio < 0.5:\n            priorities[np.where(bins == capacities[i])] += 0.2\n        elif remaining_item_ratio < 0.8:\n            priorities[np.where(bins == capacities[i])] += 0.1\n\n    return priorities\n\n", "score": null}