{"sample_order": 184, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Sophisticated version of priority calculation based on multiple factors.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    # Calculate utilization ratio and excess ratio for each bin\n    utilization_ratios = (bins - item) / bins\n    excess_ratios = (item - bins) / bins\n\n    for i in range(len(bins)):\n        # Determine priority based on utilization ratio\n        if utilization_ratios[i] < 0.3:\n            priorities[i] = 0.9\n        elif 0.3 <= utilization_ratios[i] < 0.6:\n            priorities[i] = 0.7\n        elif 0.6 <= utilization_ratios[i]:\n            priorities[i] = 0.5\n        \n        # Adjust priority based on excess ratio\n        if excess_ratios[i] > 0.2:\n            priorities[i] -= 0.1\n        elif excess_ratios[i] > 0.1:\n            priorities[i] -= 0.05\n        \n    # Normalize priorities to sum up to 1\n    priorities = np.divide(priorities, np.sum(priorities))\n\n    return priorities\n\n", "score": -2071.8}