{"sample_order": 45, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns priority with which we want to add item to each bin based on complex logic.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \n    priorities = np.zeros_like(bins)  # Initialize priority scores\n    \n    for i in range(len(bins)):\n        bin_capacity = bins[i]\n        if item <= bin_capacity * 0.1:\n            priorities[i] = 1.0  # High priority if item is very small compared to bin capacity\n        elif item <= bin_capacity * 0.5:\n            priorities[i] = 0.5  # Medium priority if item is moderately sized compared to bin capacity\n        else:\n            priorities[i] = 0.1  # Low priority if item is large compared to bin capacity\n    \n    return priorities\n\n", "score": -2080.2}