{"sample_order": 317, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"An example of a complex function.\"\"\"\n\n    result = []\n    \n    # Iterate over each row in the input data\n    for row in input_data:\n        output_row = []\n        \n        # Perform a series of calculations on each element in the row\n        for elem in row:\n            if elem % 2 == 0:\n                square = elem ** 2\n                if square < 50:\n                    output_row.append(square)\n                else:\n                    output_row.append(square // 2)\n            else:\n                cube = elem ** 3\n                if cube > 100:\n                    output_row.append(cube // 2)\n                else:\n                    output_row.append(cube)\n        \n        result.append(output_row)\n    \n    return np.array(result)\n\n", "score": null}