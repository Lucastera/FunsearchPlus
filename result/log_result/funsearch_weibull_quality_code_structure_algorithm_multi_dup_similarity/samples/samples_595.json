{"sample_order": 595, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v2`.\"\"\"\n    priorities = np.zeros_like(bins)\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n    total_capacity = np.sum(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        remaining_capacity = total_capacity - bin_capacity\n        weighted_ratio = item / bin_capacity * remaining_capacity\n        weighted_overflow = (item - bin_capacity) * (max_bin_capacity / (bin_capacity + 1))\n\n        if bin_capacity <= 0:\n            priorities[i] = np.nan\n        else:\n            if item <= bin_capacity:\n                priorities[i] = min(weighted_ratio, 1.2 * weighted_overflow)\n            else:\n                if weighted_overflow > max_bin_capacity * 0.1:\n                    priorities[i] = max(1.5 * weighted_overflow, 0.7 * weighted_ratio)\n                else:\n                    priorities[i] = min(0.8 * weighted_overflow, 1.2 * weighted_ratio)\n    \n    # Apply secondary optimization\n    sorted_indices = np.argsort(-priorities)  # Sort in descending order\n    cumulative_capacity = 0\n    for idx in sorted_indices:\n        cumulative_capacity += bins[idx]\n        if cumulative_capacity >= total_capacity * 0.6:  # Adjust threshold based on total capacity\n            priorities[idx] *= 1.2  # Boost priority for bins covering majority of capacity\n        else:\n            priorities[idx] *= 0.8  # Reduce priority for other bins\n\n    return priorities\n\n", "score": -2067.0}