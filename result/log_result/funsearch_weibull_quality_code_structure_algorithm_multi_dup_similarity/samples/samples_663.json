{"sample_order": 663, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Performs a series of complex operations on input_data.\"\"\"\n    \n    result = np.zeros_like(input_data)\n    \n    # Perform initial processing\n    for i in range(len(input_data)):\n        if input_data[i] < 0:\n            result[i] = input_data[i] * 2\n        else:\n            result[i] = input_data[i]\n    \n    # Further processing based on specific conditions\n    for i in range(1, len(input_data) - 1):\n        if input_data[i-1] > input_data[i] and input_data[i+1] > input_data[i]:\n            result[i] += 10\n        elif input_data[i-1] < input_data[i] and input_data[i+1] < input_data[i]:\n            result[i] -= 5\n        \n    return result\n\n", "score": null}