{"sample_order": 57, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priorities[i] = 1.0 - (bins[i] - item) / bins[i]\n        else:\n            priorities[i] = max(0, 1.0 - (item - bins[i]) / item)\n    \n    # Applying non-linear weighting based on bin capacity\n    max_capacity = np.max(bins)\n    for i in range(len(bins)):\n        priorities[i] *= bins[i] / max_capacity\n    \n    # Handling edge cases where item is much larger than all bin capacities\n    if np.max(bins) < item:\n        priorities = np.ones_like(bins)\n    \n    return priorities\n\n", "score": -2071.8}