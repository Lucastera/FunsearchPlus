{"sample_order": 426, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \n    priorities = np.zeros_like(bins)\n    \n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    remaining_bins = bins.copy()\n    sorted_indices = np.argsort(remaining_bins)[::-1]\n    \n    remaining_space = remaining_bins - item\n    capacity_ratio = remaining_bins / item\n    \n    for i in range(len(bins)):\n        if remaining_bins[sorted_indices[i]] >= item:\n            priorities[sorted_indices[i]] = 1.0\n            break\n        else:\n            for j in range(len(bins)):\n                if remaining_bins[sorted_indices[j]] >= item:\n                    priorities[sorted_indices[j]] = 0.8 - (0.6 * j / len(bins))\n                else:\n                    priorities[sorted_indices[j]] = 0.2 + (0.6 * (j+1) / len(bins))\n                    \n                item -= remaining_bins[sorted_indices[j]]\n                remaining_bins[sorted_indices[j]] = 0\n                if item <= 0:\n                    break\n    \n    return priorities\n\n", "score": -5000.0}