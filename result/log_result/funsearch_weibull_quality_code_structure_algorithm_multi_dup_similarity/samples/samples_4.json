{"sample_order": 4, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v1`.\"\"\"\n    priorities = []\n    \n    for bin_capacity in bins:\n        if item < 0.5 * bin_capacity:\n            priority_score = 1 / (bin_capacity - item)\n        elif item >= 0.5 * bin_capacity and item < 0.8 * bin_capacity:\n            priority_score = 2 / (bin_capacity - item)\n        else:\n            priority_score = 3 / (bin_capacity - item)\n        \n        priorities.append(priority_score)\n    \n    return np.array(priorities)\n\n", "score": null}