{"sample_order": 144, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n\n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        else:\n            if item <= bins[i]:\n                remaining_capacity_ratio = (max_bin_capacity - bins[i]) / max_bin_capacity\n                if item < 0.5 * bins[i]:\n                    priorities[i] = item / bins[i] * remaining_capacity_ratio\n                else:\n                    priorities[i] = item / bins[i] * (1 - remaining_capacity_ratio)\n            else:\n                overflow_ratio = (item - bins[i]) / item\n                total_bin_capacity_ratio = bins[i] / max_bin_capacity\n                if overflow_ratio >= 0.7:\n                    priorities[i] = overflow_ratio * total_bin_capacity_ratio\n                elif overflow_ratio >= 0.4:\n                    priorities[i] = overflow_ratio + total_bin_capacity_ratio\n                else:\n                    priorities[i] = overflow_ratio * 1.5 + total_bin_capacity_ratio\n\n    return priorities\n\n", "score": -2071.8}