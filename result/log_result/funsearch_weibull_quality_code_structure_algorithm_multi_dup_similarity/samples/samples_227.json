{"sample_order": 227, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more advanced version of priority function.\"\"\"\n\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        # Define a custom priority calculation based on item and bin capacity\n        if item < bin_capacity * 0.1:  \n            return 1 + item / bin_capacity  \n        elif item < bin_capacity * 0.3:  \n            return 1 + np.sqrt(item / bin_capacity)  \n        elif item < bin_capacity * 0.6:  \n            return 1 + np.log(item / bin_capacity)  \n        else:\n            return 1 + np.power(item / bin_capacity, 3)  \n\n    item_arr = np.full_like(bins, item)  \n    remaining_space = bins - item_arr  \n\n    priorities = np.zeros_like(bins)  \n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])  \n\n    return priorities\n\n", "score": -2075.2}