{"sample_order": 312, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns processed data based on complex logic.\"\"\"\n    \n    processed_data = np.zeros_like(input_data)\n    \n    for i in range(len(input_data)):\n        if input_data[i] < 0.3:\n            processed_data[i] = input_data[i] ** 2 + 0.5\n        elif input_data[i] < 0.6:\n            processed_data[i] = input_data[i] ** 1.5 + 0.7\n        else:\n            processed_data[i] = input_data[i] ** 1.3 + 0.9\n    \n    return processed_data\n\n", "score": null}