{"sample_order": 912, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority_score(item, remaining_capacity, bins):\n        return np.exp(-(item - remaining_capacity) ** 2) * np.sqrt(bins)\n    \n    def update_best(bin_index, remaining_capacity, item, bins, priority_scores):\n        nonlocal item\n        nonlocal remaining_capacity\n        \n        if remaining_capacity[bin_index] >= item:\n            priority_scores[bin_index] = calculate_priority_score(item, remaining_capacity[bin_index], bins[bin_index])\n            remaining_capacity[bin_index] -= item\n            item = 0\n        else:\n            priority_scores[bin_index] = calculate_priority_score(remaining_capacity[bin_index], remaining_capacity[bin_index], bins[bin_index])\n            item -= remaining_capacity[bin_index]\n            remaining_capacity[bin_index] = 0\n    \n    priority_scores = [0.0] * len(bins)\n    remaining_capacity = bins.copy()\n    \n    while item > 0:\n        best_score = -1\n        best_bin = -1\n        \n        for i in range(len(remaining_capacity)):\n            if remaining_capacity[i] >= item:\n                score = calculate_priority_score(item, remaining_capacity[i], bins[i])\n                if score > best_score:\n                    best_score = score\n                    best_bin = i\n            else:\n                score = calculate_priority_score(remaining_capacity[i], remaining_capacity[i], bins[i])\n                if score > best_score:\n                    best_score = score\n                    best_bin = i\n                    update_best(i, remaining_capacity, item, bins, priority_scores)\n        \n        if best_score != -1:\n            update_best(best_bin, remaining_capacity, item, bins, priority_scores)\n    \n    return priority_scores\n\n", "score": null}