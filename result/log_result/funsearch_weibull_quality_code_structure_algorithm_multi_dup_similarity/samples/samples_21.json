{"sample_order": 21, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    \n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = -log_ratios[i]\n        else:\n            remaining_capacity = bins[i] - item\n            future_ratios = item / np.delete(bins, i)\n            future_log_ratios = np.log(future_ratios)\n            future_priority = -np.mean(future_log_ratios)\n            \n            priorities[i] = -log_ratios[i] * future_priority\n    \n    return priorities\n\n", "score": -2308.2}