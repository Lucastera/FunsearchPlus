{"sample_order": 220, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Check if input data is valid and not empty\n    if len(input_data) == 0:\n        raise ValueError(\"Input data must not be empty.\")\n    \n    output_data = np.zeros_like(input_data)\n    \n    # Perform complex calculations on input data to generate output data\n    for i in range(len(input_data)):\n        if input_data[i] % 2 == 0:\n            output_data[i] = input_data[i] ** 2\n        else:\n            output_data[i] = input_data[i] * 2\n    \n    # Apply additional logic based on output data values\n    for i in range(1, len(output_data)):\n        if output_data[i] > output_data[i-1]:\n            output_data[i] += 5\n    \n    return output_data\n\n", "score": null}