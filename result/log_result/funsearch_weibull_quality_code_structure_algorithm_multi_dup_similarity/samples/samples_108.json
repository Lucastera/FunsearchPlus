{"sample_order": 108, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version with complex logic.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n    \n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n    \n    priority_levels = {\n        0.2: 0.8,\n        0.5: 0.6,\n        0.8: 0.4\n    }\n    \n    for i in range(len(bins)):\n        if utilization_ratio[i] < 0.2:\n            priorities[i] = 1.0\n        elif utilization_ratio[i] >= 0.2 and utilization_ratio[i] < 0.5:\n            priorities[i] = 0.8\n        elif utilization_ratio[i] >= 0.5 and utilization_ratio[i] < 0.8:\n            priorities[i] = 0.6\n        else:\n            priorities[i] = 0.4\n            \n        # Apply additional conditions for finer priority adjustments\n        if bins[i] > 1.5 * item:\n            priorities[i] += 0.1\n        elif bins[i] <= item:\n            priorities[i] -= 0.1\n    \n    return priorities\n\n", "score": -2128.8}