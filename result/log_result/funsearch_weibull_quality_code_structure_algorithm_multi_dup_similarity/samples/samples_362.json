{"sample_order": 362, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    total_capacity = sum(bins)\n\n    # Determine if adding the item will exceed total capacity\n    if item > total_capacity:\n        return np.zeros_like(bins)  # No priority for bins if item cannot fit in any\n\n    # Calculate base priority based on remaining capacity and location of min/max capacity bins\n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        \n        if bins[i] == max_capacity:\n            priority = 2 / (1 + remaining_capacity)  # Higher weight for bin with max capacity\n        elif bins[i] == min_capacity:\n            priority = 1 / (1 + remaining_capacity)  # Regular weight for bin with min capacity\n        else:\n            priority = 1.5 / (1 + remaining_capacity)  # Moderate weight for other bins\n        \n        priorities.append(priority)\n\n    # Adjust priorities based on future or past capacities\n    for i, priority in enumerate(priorities):\n        if bins[i] != max_capacity and max_capacity - item >= 0:\n            priorities[i] += 0.5 / (1 + (max_capacity - item))  # Add bonus if future capacity is available\n        \n        if bins[i] != min_capacity and min_capacity - item >= 0:\n            priorities[i] += 0.2 / (1 + (min_capacity - item))  # Add bonus if past capacity is available\n    \n    return np.array(priorities)\n\n", "score": null}