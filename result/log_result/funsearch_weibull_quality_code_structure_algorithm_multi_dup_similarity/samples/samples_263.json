{"sample_order": 263, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Sophisticated version of `priority_v2`.\"\"\"\n    \n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n    \n    # Check if item size is negative\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    # Calculate total capacity and maximum bin capacity\n    total_capacity = np.sum(bins)\n    max_bin_capacity = np.max(bins)\n    \n    # Iterate through each bin\n    for i in range(len(bins)):\n        # Handle case where bin capacity is zero\n        if bins[i] <= 0:\n            priorities[i] = np.nan\n        else:\n            # Calculate remaining capacity in other bins\n            remaining_capacity = total_capacity - bins[i]\n            \n            # Calculate weighted ratio and weighted overflow\n            weighted_ratio = item / bins[i] * remaining_capacity\n            weighted_overflow = (item - bins[i]) * (max_bin_capacity / (bins[i] + 1))\n\n            # Choose priority based on item size relative to bin capacity\n            if item <= bins[i]:\n                priorities[i] = weighted_ratio\n            else:\n                # Adjust priority based on overflow and threshold\n                if weighted_overflow > 0.1 * item:\n                    priorities[i] = 1.5 * weighted_overflow\n                else:\n                    priorities[i] = 0.8 * weighted_overflow\n\n    return priorities\n\n", "score": -2067.0}