{"sample_order": 15, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    \n    priorities = np.zeros_like(bins)  # Initialize priorities array\n    \n    if item <= 0:\n        return priorities\n    \n    # Calculate remaining capacities of each bin after adding the item\n    remaining_capacities = bins - item\n    \n    # Calculate fill percentages of each bin after adding the item\n    fill_percentages = 1 - (remaining_capacities / bins)\n    \n    for i in range(len(bins)):\n        # Priority is higher for bins with higher fill percentages\n        priority = fill_percentages[i]\n        \n        # Adjust priority based on bin capacity\n        if remaining_capacities[i] < 0:\n            priority *= 0.5  # Reduce priority for bins that are already over capacity\n        \n        priorities[i] = priority\n    \n    return priorities\n\n", "score": -2069.2}