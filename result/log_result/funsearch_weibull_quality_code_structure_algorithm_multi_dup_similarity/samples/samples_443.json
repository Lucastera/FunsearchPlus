{"sample_order": 443, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v2`.\"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    max_bin_capacity = np.max(bins)\n    remaining_capacities = max_bin_capacity - bins\n    \n    for i in range(len(bins)):\n        if bins[i] == 0:\n            priorities[i] = np.inf  # Handle zero capacity bins\n        else:\n            if item <= bins[i]:\n                priorities[i] = item / bins[i] * remaining_capacities[i]  # Weighted ratio based on remaining capacity\n            else:\n                overflow = item - bins[i]\n                total_bin_capacity = bins[i] + remaining_capacities[i]\n                \n                priority_score = overflow * (max_bin_capacity / total_bin_capacity)\n                \n                if overflow > 0.5 * item:\n                    priority_score *= 2  # Increase priority for large overflow\n                elif overflow < 0.2 * item:\n                    priority_score *= 0.5  # Decrease priority for small overflow\n                \n                priorities[i] = priority_score  # Weighted overflow considering overall bin capacity\n                \n                if bins[i] < 0.5 * max_bin_capacity:\n                    priorities[i] *= 1.5  # Boost priority for bins with low occupancy\n                elif bins[i] > 0.8 * max_bin_capacity:\n                    priorities[i] *= 0.7  # Reduce priority for bins nearing full capacity\n    \n    return priorities\n\n", "score": -2067.0}