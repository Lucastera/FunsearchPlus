{"sample_order": 14, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    adjusted_bins = bins * weights  # Apply weights to bin capacities\n    \n    priorities = np.zeros(len(bins))\n    remaining_capacity = adjusted_bins - item\n    \n    for i in range(len(bins)):\n        if remaining_capacity[i] >= 0:\n            priorities[i] = 1 / remaining_capacity[i]\n        else:\n            priorities[i] = np.inf\n    \n    return priorities\n\n", "score": null}