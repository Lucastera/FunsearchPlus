{"sample_order": 504, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more complex version of priority function.\"\"\"\n\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:  \n            return 1 + item / bin_capacity * 2  # If item is less than half of bin capacity\n        elif item <= 0.8 * bin_capacity:  \n            return 1 + item / bin_capacity  # If item is less than 80% of bin capacity\n        else:\n            return 1 + np.sqrt(item / bin_capacity)  # Priority is 1 plus square root of the ratio of item to bin capacity\n\n    def update_priorities(priorities: np.ndarray, index: int, value: float):\n        priorities[index] = value  # Update priority in priorities array at the given index\n\n    remaining_space = bins - item  # Calculate remaining space in each bin after adding item\n\n    priorities = np.zeros_like(bins)  # Initialize array to store priorities\n\n    for i in range(len(bins)):\n        update_priorities(priorities, i, calculate_priority(item, bins[i]))  # Calculate and update priority for each bin\n\n    return priorities\n\n", "score": -2068.2}