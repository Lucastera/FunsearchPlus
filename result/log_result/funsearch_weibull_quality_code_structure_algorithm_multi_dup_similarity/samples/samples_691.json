{"sample_order": 691, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform complex operations on the input matrix.\"\"\"\n    # Calculate the sum of each row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Calculate the product of each column\n    column_products = np.prod(matrix, axis=0)\n    \n    # Calculate the square of each element\n    squared_matrix = np.square(matrix)\n    \n    # Replace negative values with zero\n    non_negative_matrix = np.maximum(matrix, 0)\n    \n    # Normalize each row by dividing by the maximum element in the row\n    normalized_matrix = matrix / np.max(matrix, axis=1).reshape(-1, 1)\n    \n    return row_sums, column_products, squared_matrix, non_negative_matrix, normalized_matrix\n\n", "score": null}