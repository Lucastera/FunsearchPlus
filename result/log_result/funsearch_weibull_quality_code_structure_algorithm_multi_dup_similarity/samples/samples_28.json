{"sample_order": 28, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n\n    priorities = np.zeros_like(bins)  # Initialize array to store priorities\n\n    for i in range(len(bins)):\n        remaining_space = bins[i] - item  # Calculate remaining space in bin after adding item\n\n        if item <= bins[i] / 2: \n            priorities[i] = 1 + item / bins[i]  # Priority is 1 + ratio of item to bin capacity\n        elif item <= bins[i]:\n            priorities[i] = 1.5 * item / bins[i]  # Priority is 1.5 times ratio of item to bin capacity\n        else:\n            priorities[i] = 1 - (item - bins[i]) / item  # Priority is 1 minus ratio of remaining item to total item\n\n    return priorities\n\n", "score": -2087.0}