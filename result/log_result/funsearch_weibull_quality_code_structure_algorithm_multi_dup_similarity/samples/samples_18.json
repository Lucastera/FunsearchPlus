{"sample_order": 18, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n\n    item_arr = np.full_like(bins, item)  # Create an array of the same size as bins filled with item value\n    remaining_space = bins - item_arr  # Calculate remaining space in each bin after adding item\n\n    priorities = np.zeros_like(bins)  # Initialize array to store priorities\n\n    for i in range(len(bins)):\n        if item <= bins[i]:  # If item can fit in the bin\n            priorities[i] = 1 + item / bins[i]  # Priority is 1 + ratio of item to bin capacity\n        else:\n            priorities[i] = 1 - (item - bins[i]) / item  # Priority is 1 minus ratio of remaining item to total item\n\n    return priorities\n\n", "score": -2069.2}