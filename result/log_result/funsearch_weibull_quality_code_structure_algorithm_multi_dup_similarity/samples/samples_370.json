{"sample_order": 370, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2` with more complex logic.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        remaining_capacity = bin_capacity - item\n        if remaining_capacity > 0:\n            utilization_ratio = (bin_capacity - remaining_capacity) / bin_capacity\n            \n            if utilization_ratio < 0.3:\n                priorities[i] = 2 * utilization_ratio + 0.5\n            elif utilization_ratio < 0.5:\n                priorities[i] = 1.8 * utilization_ratio + 0.7\n            elif utilization_ratio < 0.7:\n                priorities[i] = 1.5 * utilization_ratio + 0.8\n            elif utilization_ratio < 0.9:\n                priorities[i] = 1.3 * utilization_ratio + 0.9\n            elif utilization_ratio < 1:\n                priorities[i] = 1.1 * utilization_ratio + 1\n            elif utilization_ratio < 1.2:\n                priorities[i] = utilization_ratio + 1.3\n            elif utilization_ratio < 1.4:\n                priorities[i] = 0.8 * utilization_ratio + 1.5\n            else:\n                priorities[i] = 2.3 * utilization_ratio\n        \n    return priorities\n\n", "score": -2087.8}