{"sample_order": 510, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n\n    priorities = []\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    \n    for bin_capacity in bins:\n        remaining_capacity = bin_capacity - item\n        future_capacity = max_capacity - item\n        past_capacity = min_capacity - item\n\n        if remaining_capacity >= 0:\n            if bin_capacity == max_capacity:\n                priority = 1.8 / (1 + remaining_capacity) if remaining_capacity >= item else 1.1 / (1 + remaining_capacity)\n            elif bin_capacity == min_capacity:\n                priority = 0.9 / (1 + remaining_capacity)\n            else:\n                priority = 1.3 / (1 + remaining_capacity)\n        else:\n            if future_capacity >= 0:\n                priority = 1.2 / (1 + future_capacity) if future_capacity > remaining_capacity else 0.6 / (1 + future_capacity)\n            else:\n                priority = 0.9 / (1 + past_capacity) if past_capacity > remaining_capacity else 0.7 / (1 + past_capacity)\n        \n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -2063.6}