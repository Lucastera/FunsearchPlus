{"sample_order": 32, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item < 0.5 * bins[i]:\n            priorities[i] = 1.0 / (bins[i] - item)\n        elif item < 0.8 * bins[i]:\n            priorities[i] = 0.8 / (bins[i] - item)\n        else:\n            priorities[i] = 0.5 / (bins[i] - item)\n    \n    return priorities\n\n", "score": null}