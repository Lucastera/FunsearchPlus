{"sample_order": 767, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]/3:\n            if item % 2 == 0:\n                priorities[i] = (item + 2) / bins[i]\n            elif item % 2 == 1:\n                priorities[i] = 3*(item + 4) / bins[i]\n            else:\n                priorities[i] = (item + 6) / bins[i]\n        elif item > bins[i]/3 and item <= bins[i]*2/3:\n            if bins[i] % 4 == 0:\n                priorities[i] = np.exp(item / bins[i]) + np.cos(item / bins[i])\n            else:\n                priorities[i] = np.tan(item / bins[i]) + np.sin(item / bins[i])\n        else:\n            if item % 9 == 0:\n                priorities[i] = np.tanh(item / bins[i]) + np.arcsin(item / bins[i])\n            elif item % 9 == 1:\n                priorities[i] = np.arctan(item / bins[i]) + np.sinh(item / bins[i])\n            elif item % 9 == 2:\n                priorities[i] = np.cosh(item / bins[i]) + np.arccos(item / bins[i])\n            elif item % 9 == 3:\n                priorities[i] = np.arcsinh(item / bins[i]) + np.cosh(item / bins[i])\n            else:\n                priorities[i] = np.arccosh(item / bins[i]) + np.tanh(item / bins[i])\n    \n    return priorities\n\n", "score": -2290.2}