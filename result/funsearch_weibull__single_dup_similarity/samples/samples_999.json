{"sample_order": 999, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    if len(bins) == 0:\n        return priorities\n    \n    max_capacity = max(bins)\n    \n    if item > max_capacity:\n        msg = \"Item size exceeds maximum bin capacity\"\n        raise ValueError(msg)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1\n        else:\n            bin_sum = bins[i]\n            if len(bins) - i >= 2:\n                for j in range(i+1, len(bins)):\n                    bin_sum += bins[j]\n                    if bin_sum >= item:\n                        allocated_indices = list(range(i, j+1))\n                        for idx, alloc_idx in enumerate(allocated_indices, start=1):\n                            priorities[alloc_idx] = idx\n                        break\n                    elif j == len(bins) - 1:\n                        for idx, alloc_idx in enumerate(allocated_indices, start=1):\n                            priorities[alloc_idx] = -1\n            else:\n                priorities[i] = -1\n    \n    return priorities\n\n", "score": null}