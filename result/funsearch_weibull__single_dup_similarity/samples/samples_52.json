{"sample_order": 52, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v1`.\n    Now considering additional factors for priority calculation.\n    \"\"\"\n    \n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 2 * (item - bins[i])  # Double the priority\n        else:\n            priorities[i] = bins[i] - item\n    \n    # Add an additional factor based on bin capacity ratio\n    max_bin_capacity = np.max(bins)\n    for i in range(len(bins)):\n        priorities[i] += 0.5 * (max_bin_capacity - bins[i])  # Adjust priority based on capacity ratio\n    \n    return priorities\n\n", "score": -2071.8}