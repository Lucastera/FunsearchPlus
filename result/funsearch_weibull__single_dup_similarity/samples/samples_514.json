{"sample_order": 514, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]/2:\n            priorities[i] = item / bins[i]\n        elif item > bins[i]/2 and item <= bins[i]:\n            if item % 2 == 0:\n                priorities[i] = np.sqrt(item / bins[i])\n            else:\n                priorities[i] = np.cbrt(item / bins[i])\n        else:\n            if bins[i] % 2 == 0:\n                priorities[i] = np.log2(item / bins[i])\n            else:\n                priorities[i] = np.log10(item / bins[i])\n    \n    # Additional logic for special cases\n    if item > sum(bins)/len(bins):  # If item is larger than average bin capacity\n        priorities = np.power(priorities, 2)  # Increase priority score by squaring\n    elif item < np.min(bins):  # If item is smaller than the smallest bin\n        priorities = np.multiply(priorities, 1.5)  # Increase priority score by 50%\n    else:\n        priorities = np.divide(priorities, 2)  # Decrease priority score by dividing by 2\n    \n    return priorities\n\n", "score": null}