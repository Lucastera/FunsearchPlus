{"sample_order": 578, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    remaining_bins = len(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priorities[i] = bins[i] - item\n        else:\n            remaining_capacity = 0\n            for j in range(i, len(bins)):\n                remaining_capacity += bins[j]\n            if remaining_capacity >= item * remaining_bins:\n                priorities[i] = (remaining_capacity / remaining_bins) - item\n                remaining_bins -= 1\n            else:\n                priorities[i] = abs(item - remaining_capacity) * (i+1)\n    \n    return priorities\n\n", "score": -2071.8}