{"sample_order": 993, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros(len(bins))\n\n    for i in range(len(bins)):\n        if ratios[i] > 1.2:\n            if item > 25 and bins[i] > 20:\n                priorities[i] = 10\n            elif item > 20 and bins[i] > 15:\n                priorities[i] = 9\n            else:\n                priorities[i] = 8\n        elif ratios[i] > 1.1:\n            if item > 18 and bins[i] > 12:\n                priorities[i] = 8\n            else:\n                priorities[i] = 7\n        elif ratios[i] > 1.0:\n            if item > 15 and bins[i] > 10:\n                priorities[i] = 7\n            elif item > 12 and bins[i] > 8:\n                priorities[i] = 6\n            else:\n                priorities[i] = 5\n        elif ratios[i] > 0.9:\n            if item > 10 and bins[i] > 6:\n                priorities[i] = 5\n            elif item > 8 and bins[i] > 5:\n                priorities[i] = 4\n            else:\n                priorities[i] = 3\n        elif ratios[i] > 0.8:\n            if item > 6 and bins[i] > 4:\n                priorities[i] = 4\n            elif item > 4 and bins[i] > 3:\n                priorities[i] = 3\n            else:\n                priorities[i] = 2\n        elif ratios[i] > 0.6:\n            if item > 3 and bins[i] > 2:\n                priorities[i] = 3\n            elif item > 2 and bins[i] > 1:\n                priorities[i] = 2\n            else:\n                priorities[i] = 1\n        else:\n            if bins[i] >= 1:\n                priorities[i] = 2\n            else:\n                priorities[i] = 0\n\n    return priorities\n\n", "score": -2066.6}