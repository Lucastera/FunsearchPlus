{"sample_order": 743, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]/3:\n            priorities[i] = np.sin(item) + np.cos(bins[i])\n        elif item > bins[i]/3 and item <= bins[i]/2:\n            priorities[i] = np.tan(item) * np.arctan(bins[i])\n        elif item > bins[i]/2 and item <= 2*bins[i]/3:\n            priorities[i] = np.exp(item) + np.exp(bins[i])\n        elif item > 2*bins[i]/3 and item <= bins[i]:\n            priorities[i] = np.log(item) * np.log1p(bins[i])\n        else:\n            priorities[i] = np.sqrt(item) + np.cbrt(bins[i])\n    \n    return priorities\n\n", "score": -2154.4}