{"sample_order": 585, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more advanced version of `priority_v1`.\"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = 0\n            for j in range(i):\n                used_capacity += bins[j]\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                adjustment_factor = 0.8\n                for k in range(i + 1, len(bins)):\n                    adjustment_factor -= 0.1\n                    if adjustment_factor < 0.3:\n                        adjustment_factor = 0.3\n                    if item <= (bin_capacity + sum(bins[i+1:k])):\n                        priorities[i] = adjustment_factor\n                        break\n                    priorities[i] = 0.2\n    \n    return priorities\n\n", "score": -2067.0}