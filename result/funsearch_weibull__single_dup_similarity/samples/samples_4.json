{"sample_order": 4, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    # Handling special case when item is larger than all bin capacities\n    if item >= np.sum(bins):\n        priorities.fill(-np.inf)\n        return priorities\n    \n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        if remaining_capacity >= 0:\n            priorities[i] = 1 / (1 + remaining_capacity)\n        else:\n            priorities[i] = -np.inf\n    \n    return priorities\n\n", "score": -2069.2}