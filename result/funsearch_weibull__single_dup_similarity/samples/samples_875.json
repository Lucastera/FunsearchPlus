{"sample_order": 875, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    \n    for i in range(len(bins)):\n        priority = 0\n        \n        if item > bins[i]:\n            priority = -1\n        else:\n            left_capacity = bins[i] - item\n            if left_capacity == 0:\n                priority = 0\n            else:\n                utilization = item / bins[i]\n                \n                if utilization < 0.1:\n                    priority = 1 / (1 - utilization)\n                elif 0.1 <= utilization < 0.2:\n                    priority = 2 / (1 + utilization)\n                elif 0.2 <= utilization < 0.3:\n                    priority = 3\n                elif 0.3 <= utilization < 0.4:\n                    priority = 4 * utilization\n                elif 0.4 <= utilization < 0.6:\n                    priority = 5 * np.sqrt(utilization)\n                elif 0.6 <= utilization <= 1.0:\n                    priority = 6 * np.log(utilization)\n        \n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -2649.4}