{"sample_order": 861, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = -1\n        else:\n            left_capacity = bins[i] - item\n            if left_capacity == 0:\n                priorities[i] = 0\n            else:\n                utilization = item / bins[i]\n                if utilization < 0.2:\n                    priorities[i] = (1 - utilization) ** 2\n                elif 0.2 <= utilization < 0.4:\n                    priorities[i] = (2 - 1 / utilization) * np.log(utilization + 1)\n                elif 0.4 <= utilization < 0.6:\n                    priorities[i] = 2 * np.sin(utilization * np.pi)\n                elif 0.6 <= utilization < 0.8:\n                    priorities[i] = np.exp(utilization) / (utilization + 0.5)\n                elif 0.8 <= utilization <= 1.0:\n                    priorities[i] = np.cosh(utilization)\n    \n    return priorities\n\n", "score": -2103.2}