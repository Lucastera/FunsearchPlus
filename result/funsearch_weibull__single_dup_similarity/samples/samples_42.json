{"sample_order": 42, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    size_diffs = bins - item\n    size_diffs[size_diffs < 0] = np.inf\n    sorted_indices = np.argsort(size_diffs)\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_idx in enumerate(sorted_indices):\n        priorities[bin_idx] = i + 1\n    \n    return priorities\n\n", "score": -5000.0}