{"sample_order": 687, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    rows, cols = data.shape\n    similarity_matrix = np.zeros((rows, rows))\n    \n    for i in range(rows):\n        for j in range(rows):\n            if i == j:\n                similarity_matrix[i, j] = 1.0\n            else:\n                dist = np.linalg.norm(data[i] - data[j])\n                similarity_matrix[i, j] = 1 / (1 + dist)\n    \n    return similarity_matrix\n\n", "score": null}