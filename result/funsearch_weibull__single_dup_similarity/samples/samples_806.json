{"sample_order": 806, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]/4:\n            if item % 2 == 0:\n                priorities[i] = (item + 1) / bins[i]\n            elif item % 2 == 1:\n                priorities[i] = 3*(item + 4) / bins[i]\n            else:\n                priorities[i] = (item + 7) / bins[i]\n        elif item > bins[i]/4 and item <= bins[i]/2:\n            if bins[i] % 4 == 0:\n                priorities[i] = np.power(item / bins[i], 2) + np.log(item / bins[i])\n            else:\n                priorities[i] = np.power(item / bins[i], 1.2) + np.log10(item / bins[i])\n        elif item > bins[i]/2 and item <= bins[i] - 5:\n            if item % 5 == 0:\n                priorities[i] = np.log2(item / bins[i]) + np.sqrt(item / bins[i])\n            elif item % 5 == 1:\n                priorities[i] = np.log10(item / bins[i]) + np.cbrt(item / bins[i])\n            elif item % 5 == 2:\n                priorities[i] = np.exp(item / bins[i]) + np.square(item / bins[i])\n            elif item % 5 == 3:\n                priorities[i] = np.log1p(item / bins[i]) + np.cbrt(item / bins[i])\n            else:\n                priorities[i] = np.log(item / bins[i]) + np.square(item / bins[i])\n        else:\n            if item % 6 == 0:\n                priorities[i] = np.cosh(item / bins[i]) + np.tanh(item / bins[i])\n            elif item % 6 == 1:\n                priorities[i] = np.sinh(item / bins[i]) + np.tanh(item / bins[i])\n            elif item % 6 == 2:\n                priorities[i] = np.arcsinh(item / bins[i]) + np.arctanh(item / bins[i])\n            elif item % 6 == 3:\n                priorities[i] = np.cosh(item / bins[i]) + np.arctanh(item / bins[i])\n            else:\n                priorities[i] = np.sinh(item / bins[i]) + np.arcsinh(item / bins[i])\n    return priorities\n\n", "score": -2080.2}