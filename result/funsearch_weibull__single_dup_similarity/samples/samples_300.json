{"sample_order": 300, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = 0\n            for j in range(i):\n                used_capacity += bins[j]\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                available_bins = [k for k, capacity in enumerate(bins) if capacity >= item and k != i]\n                if available_bins:\n                    for idx in available_bins:\n                        cum_capacity = sum(bins[:idx])\n                        if item <= cum_capacity + bins[idx]:\n                            priorities[idx] = 1 - ((item - cum_capacity) / bins[idx])\n                            break\n                    else:\n                        max_idx = np.argmax([p for p in priorities])\n                        priorities[max_idx] = 1 - ((item - remaining_capacity) / (bins[max_idx] - remaining_capacity))\n                else:\n                    max_idx = np.argmax([p for p in priorities])\n                    priorities[max_idx] = 1 - ((item - remaining_capacity) / (bins[max_idx] - remaining_capacity))\n    \n    return priorities\n\n", "score": null}