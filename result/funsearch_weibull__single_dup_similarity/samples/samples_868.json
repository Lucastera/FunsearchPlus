{"sample_order": 868, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v1`.\"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 3 * (item - bins[i])  # Triple the priority\n        else:\n            priorities[i] = bins[i] - item\n        \n        if i % 2 == 0:\n            priorities[i] += 0.5 * bins[i]  # Increase priority for even indexed bins\n        else:\n            priorities[i] -= 0.3 * bins[i]  # Decrease priority for odd indexed bins\n        \n        capacity_ratio = bins[i] / total_capacity\n        if capacity_ratio >= 0.5:\n            priorities[i] += 0.3 * (capacity_ratio - 0.5) * total_capacity  # Adjust based on capacity distribution\n        \n        if bins[i] == max_bin_capacity:\n            priorities[i] += 1.5 * max_bin_capacity  # Increase priority for bins with max capacity\n        elif bins[i] == min_bin_capacity:\n            priorities[i] -= 1.2 * min_bin_capacity  # Decrease priority for bins with min capacity\n    \n    return priorities\n\n", "score": -2071.8}