{"sample_order": 125, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = sum(bins[:i])\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                extra_capacity_needed = item - remaining_capacity\n                feasible_bins = [bins[k] for k in range(i) if bins[k] >= extra_capacity_needed]\n                if feasible_bins:\n                    min_feasible_bin = min(feasible_bins)\n                    min_feasible_bin_index = bins.index(min_feasible_bin)\n                    min_extra_capacity = min_feasible_bin - extra_capacity_needed\n                    priorities[i] = 1 - (min_extra_capacity / (bin_capacity - remaining_capacity))\n                    priorities[min_feasible_bin_index] = 1.0\n                else:\n                    priorities[i] = 0.0\n    \n    return priorities\n\n", "score": null}