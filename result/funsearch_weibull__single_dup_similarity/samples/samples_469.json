{"sample_order": 469, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 1.5 * (item - bins[i])\n            if bins[i] <= 0.4 * max_bin_capacity:\n                priorities[i] += 1.3 * bins[i]\n            if i % 2 == 0:\n                priorities[i] += 2.7  # Additional priority for every even-indexed bin\n            elif i % 3 == 1:\n                priorities[i] -= 1.7  # Reduced priority for every odd-indexed bin\n            \n        else:\n            priorities[i] = 0.8 * (bins[i] - item)\n            if bins[i] >= 0.6 * max_bin_capacity:\n                priorities[i] -= 1.2 * (bins[i] - item)\n            if i % 5 == 0:\n                priorities[i] -= 1.8  # Reduced priority for every 5th bin\n            elif i % 5 == 1:\n                priorities[i] += 0.8  # Increased priority for every 5th bin\n    \n    return priorities\n\n", "score": -2071.8}