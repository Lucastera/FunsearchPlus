{"sample_order": 49, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = -1\n        elif item == 0:\n            priorities[i] = 0\n        else:\n            priorities[i] = item / bins[i]\n    \n    max_priority = max(priorities)\n    if max_priority != 0:\n        priorities = [p / max_priority for p in priorities]\n    \n    return np.array(priorities)\n\n", "score": null}