{"sample_order": 76, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]/4:\n            priorities[i] = np.power(item / bins[i], 2)\n        elif item > bins[i]/4 and item <= bins[i]/2:\n            priorities[i] = np.cbrt(item / bins[i])\n        elif item > bins[i]/2 and item <= 3*bins[i]/4:\n            priorities[i] = np.square(np.sqrt(item / bins[i]))\n        else:\n            priorities[i] = np.exp(item / bins[i])\n    \n    return priorities\n\n", "score": -2070.8}