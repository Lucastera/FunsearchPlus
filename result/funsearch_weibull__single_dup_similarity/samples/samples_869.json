{"sample_order": 869, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v1`.\"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 3 * (item - bins[i])  # Triple the priority\n        else:\n            priorities[i] = bins[i] - item\n        \n        if i % 3 == 0:\n            priorities[i] += 0.8 * bins[i]  # Increase priority for every third indexed bin\n        elif i % 3 == 1:\n            priorities[i] -= 0.6 * bins[i]  # Decrease priority for bins with index 1 mod 3\n        else:\n            priorities[i] += 0.4 * bins[i]  # Increase priority for bins with index 2 mod 3\n    \n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n    for i in range(len(bins)):\n        if i % 2 == 0:\n            priorities[i] += 0.5 * max_bin_capacity  # Increase priority for even indexed bins with max capacity\n        else:\n            priorities[i] -= 0.3 * min_bin_capacity  # Decrease priority for odd indexed bins with min capacity\n    \n    return priorities\n\n", "score": -2071.8}