{"sample_order": 450, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]/3:\n            if item % 3 == 0:\n                priorities[i] = np.sqrt(np.log(item / bins[i]))\n            else:\n                priorities[i] = np.cbrt(np.log10(item / bins[i]))\n        elif item > bins[i]/3 and item <= bins[i]*2/3:\n            if item % 2 == 0:\n                priorities[i] = np.cbrt(item / bins[i])\n            else:\n                priorities[i] = np.sqrt(item / bins[i])\n        else:\n            if bins[i] % 2 == 0:\n                priorities[i] = np.log2(np.sqrt(item / bins[i]))\n            else:\n                priorities[i] = np.log10(np.cbrt(item / bins[i]))\n    \n    return priorities\n\n", "score": -2071.8}