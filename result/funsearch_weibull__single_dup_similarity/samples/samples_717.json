{"sample_order": 717, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 2 * (item - bins[i])\n            if bins[i] <= 0.3 * max_bin_capacity:\n                priorities[i] += 1.2 * bins[i]\n            if i % 2 == 0:\n                priorities[i] += 1.5  # Additional priority for every 2nd bin\n            else:\n                priorities[i] -= 0.5  # Reduced priority for other bins\n            \n            if bins[i] < 0.2 * max_bin_capacity:\n                priorities[i] += 2.0  # Additional priority for bins with very low capacity\n            elif bins[i] >= 0.8 * max_bin_capacity:\n                priorities[i] -= 1.7  # Reduced priority for bins with very high capacity\n        else:\n            priorities[i] = bins[i] - item\n            if bins[i] >= 0.7 * max_bin_capacity:\n                priorities[i] -= 1.1 * (bins[i] - item)\n            if i % 3 == 0:\n                priorities[i] -= 1.2  # Reduced priority for every 3rd bin\n            else:\n                priorities[i] += 0.8  # Increased priority for other bins\n          \n    return priorities\n\n", "score": -2071.8}