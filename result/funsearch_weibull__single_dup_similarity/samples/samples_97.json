{"sample_order": 97, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    if np.all(item <= bins):\n        return np.zeros_like(bins)\n    \n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = item - bins[i]\n        else:\n            priorities[i] = bins[i] - item\n        \n        if bins[i] < 0.5 * item:\n            priorities[i] *= 1.5  # Increase priority for bins with low capacity\n        elif bins[i] > 1.5 * item:\n            priorities[i] *= 0.5  # Decrease priority for bins with high capacity\n        else:\n            priorities[i] *= 1.0  # Keep priority unchanged\n        \n        if i % 2 == 0:\n            priorities[i] += 2  # Add additional priority for even-indexed bins\n        else:\n            priorities[i] -= 1  # Reduce priority for odd-indexed bins\n    \n    return priorities\n\n", "score": -2071.8}