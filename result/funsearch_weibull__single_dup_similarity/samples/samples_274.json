{"sample_order": 274, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    if len(bins) == 0:\n        return priorities\n    \n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    \n    if item > max_capacity:\n        msg = \"Item size exceeds maximum bin capacity\"\n        raise ValueError(msg)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1\n        else:\n            remaining_capacity = bins[i]\n            for j in range(i+1, len(bins)):\n                remaining_capacity += bins[j]\n                if bins[j] >= item and remaining_capacity >= item:\n                    priorities[j] = (j - i) + 1\n                    break\n                elif j == len(bins) - 1:\n                    priorities[i] = -1\n    \n    return priorities\n\n", "score": -2071.8}