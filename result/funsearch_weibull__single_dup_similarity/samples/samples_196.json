{"sample_order": 196, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    \n    for bin_capacity in bins:\n        if item <= bin_capacity:\n            if bin_capacity % item == 0:\n                priority = 2 / (bin_capacity - item + 1)\n            else:\n                prime_factors = []\n                for i in range(2, int(bin_capacity/2) + 1):\n                    while bin_capacity % i == 0:\n                        prime_factors.append(i)\n                        bin_capacity //= i\n                \n                if len(prime_factors) > 0:\n                    priority = sum(prime_factors) / item\n                else:\n                    priority = 1 / (bin_capacity - item + 1)\n        else:\n            priority = -1\n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -2108.4}