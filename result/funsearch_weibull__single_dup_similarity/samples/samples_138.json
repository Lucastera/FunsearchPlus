{"sample_order": 138, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Calculate remaining capacities of each bin after adding the item\n    remaining_capacities = bins - item\n    \n    # Calculate utilization ratios of each bin\n    ratios = remaining_capacities / bins\n    \n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n    \n    # Assign priorities based on utilization ratios\n    for i, ratio in enumerate(ratios):\n        if ratio >= 0.75:\n            priorities[i] = 3\n        elif ratio >= 0.5:\n            priorities[i] = 2\n        elif ratio >= 0.25:\n            priorities[i] = 1\n        else:\n            priorities[i] = 0\n            \n    return priorities\n\n", "score": -3345.6}