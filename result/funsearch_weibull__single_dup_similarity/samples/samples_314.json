{"sample_order": 314, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    \n    for i, bin_capacity in enumerate(bins):\n        if item == bin_capacity:\n            priorities[i] = 1.0\n        elif item < bin_capacity:\n            priorities[i] = item / bin_capacity\n        else:\n            remaining_capacity = bin_capacity\n            used_capacity = np.sum(bins[:i])\n            remaining_capacity -= used_capacity\n            if item <= remaining_capacity:\n                priorities[i] = 1.0\n            else:\n                total_available_capacity = remaining_capacity\n                for j in range(i+1, len(bins)):\n                    total_available_capacity += bins[j]\n                    if item <= total_available_capacity:\n                        for k in range(i, j):\n                            priorities[k] = (total_available_capacity - item) / (total_available_capacity - bins[i])\n                        break\n                    elif item > total_available_capacity and j == len(bins) - 1:\n                        for k in range(i, j+1):\n                            priorities[k] = 0.0\n    \n    return priorities\n\n", "score": -2067.0}