{"sample_order": 37, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    max_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if item <= 0.5 * max_capacity:\n            priorities[i] = (bins[i] / total_capacity) + (1 / bins[i])\n        elif item <= max_capacity:\n            priorities[i] = (0.75 * bins[i] / total_capacity) + (1 / bins[i])\n        else:\n            priorities[i] = 0.5 / bins[i]\n    \n    return priorities\n\n", "score": -212.75}