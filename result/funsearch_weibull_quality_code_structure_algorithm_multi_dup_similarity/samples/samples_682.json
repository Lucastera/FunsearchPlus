{"sample_order": 682, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins)\n    capacities = np.sort(bins)\n    priorities = np.zeros(num_bins)\n    \n    for i in range(num_bins):\n        remaining_capacity = capacities[i] - item\n        density = remaining_capacity / capacities[i]\n        \n        if density < 0.3:\n            priorities[i] = 2 * density + 0.4\n        elif density < 0.7:\n            priorities[i] = 1.5 * density + 0.6\n        else:\n            priorities[i] = 1.2 * density + 0.8\n    \n    return priorities\n\n", "score": -4978.0}