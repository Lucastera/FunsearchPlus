{"sample_order": 425, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Complex function that processes the input data.\n\n    Args:\n        data: Input data array.\n\n    Returns:\n        Processed data array.\n    \"\"\"\n    result = np.zeros_like(data)\n    \n    for i in range(len(data)):\n        if data[i] % 2 == 0:\n            # For even numbers, square the value\n            result[i] = data[i] ** 2\n        else:\n            # For odd numbers, cube the value\n            result[i] = data[i] ** 3\n    \n    # Normalize result array between 0 and 1\n    min_val = np.min(result)\n    max_val = np.max(result)\n    normalized_result = (result - min_val) / (max_val - min_val)\n    \n    # Apply non-linear transformation to normalized result\n    transformed_result = np.sqrt(normalized_result)\n    \n    return transformed_result\n\n", "score": null}