{"sample_order": 117, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n\n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        else:\n            remaining_capacity = bins[i] - item\n            if remaining_capacity >= 0:\n                priorities[i] = (max_bin_capacity - bins[i]) / max_bin_capacity  # Utilize remaining capacity ratio\n            else:\n                overflow = item - bins[i]\n                if overflow < max_bin_capacity:\n                    priorities[i] = overflow / max_bin_capacity  # Prioritize bins with less overflow first\n                else:\n                    priorities[i] = 1  # Priority for bins that cannot accommodate the item at all\n\n    return priorities\n\n", "score": -2071.8}