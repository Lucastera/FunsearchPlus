{"sample_order": 618, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further enhanced version of `priority_v2`.\"\"\"\n    priorities = np.zeros_like(bins)\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    total_bins = len(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity <= 0:\n            priorities[i] = np.nan\n        else:\n            remaining_capacity = np.sum(bins) - bin_capacity\n            weighted_ratio = item / bin_capacity * remaining_capacity\n            weighted_overflow = (item - bin_capacity) * (np.max(bins) / (bin_capacity + 1))\n\n            if i == np.argmax(bins):\n                priorities[i] = max(1.3 * weighted_overflow, 1.2 * weighted_ratio)\n            elif i == np.argmin(bins):\n                priorities[i] = max(1.1 * weighted_ratio, 1.2 * weighted_overflow)\n            else:\n                priorities[i] = min(1.2 * weighted_overflow, 1.1 * weighted_ratio)\n\n    return priorities\n\n", "score": null}