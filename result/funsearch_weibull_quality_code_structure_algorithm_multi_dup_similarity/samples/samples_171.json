{"sample_order": 171, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform complex operations on input data.\"\"\"\n    \n    result = np.zeros_like(data)\n    \n    # Perform initial data processing\n    for i in range(len(data)):\n        if data[i] % 2 == 0:\n            result[i] = data[i] * 2\n        else:\n            result[i] = data[i] * 3\n    \n    # Further refine the result\n    for i in range(1, len(data)-1):\n        if data[i] > data[i-1] and data[i] > data[i+1]:\n            result[i] += 10\n        elif data[i] < data[i-1] and data[i] < data[i+1]:\n            result[i] -= 5\n    \n    # Apply final adjustments\n    for i in range(len(data)):\n        if data[i] == 0:\n            result[i] = 0\n        elif data[i] > 100:\n            result[i] *= 1.5\n    \n    return result\n\n", "score": null}