{"sample_order": 438, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex version of priority function.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    remaining_bins = bins.copy()\n    remaining_capacity = np.sum(remaining_bins)\n    \n    for i in range(len(bins)):\n        if remaining_capacity == 0:\n            break\n        \n        if remaining_bins[i] >= item:\n            priorities[i] = item / remaining_bins[i]\n            remaining_bins[i] -= item\n            remaining_capacity -= item\n            break\n        else:\n            priorities[i] = remaining_bins[i] / item\n            item -= remaining_bins[i]\n            remaining_capacity -= remaining_bins[i]\n            remaining_bins[i] = 0\n    \n    avg_capacity = total_capacity / len(bins)\n    for i in range(len(bins)):\n        if bins[i] > avg_capacity:\n            priorities[i] *= 1.2  # Increase priority for bins above average capacity\n        elif bins[i] < avg_capacity:\n            priorities[i] *= 0.8  # Decrease priority for bins below average capacity\n        \n        if remaining_bins[i] == 0:\n            priorities[i] = 0  # Exclude fully filled bins from priority\n        \n    return priorities\n\n", "score": -2071.8}