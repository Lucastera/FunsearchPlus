{"sample_order": 739, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Enhanced version of priority function with optimized decision-making.\"\"\"\n\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= 0.4 * bin_capacity:\n            return 1 + item / bin_capacity * 1.5\n        elif item <= 0.8 * bin_capacity:\n            return 1 + item / bin_capacity * 1.2\n        else:\n            return 1 + np.log(item / bin_capacity + 1)\n\n    # Initialize remaining space in each bin\n    remaining_space = bins - item\n\n    # Calculate priorities for each bin\n    priorities = np.array([calculate_priority(item, bin_capacity) for bin_capacity in bins])\n\n    # Sort bins based on priorities\n    sorted_indices = np.argsort(priorities)\n\n    # Assign items to bins based on priorities and remaining space\n    for index in sorted_indices:\n        if remaining_space[index] >= 0:\n            break\n        else:\n            for empty_bin_index in sorted_indices:\n                if remaining_space[empty_bin_index] >= item:\n                    priorities[index] = 0\n                    priorities[empty_bin_index] = 1\n                    break\n\n    return priorities\n\n", "score": -2126.8}