{"sample_order": 860, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that processes the input data.\"\"\"\n    \n    def process_subarray(subarray: np.ndarray) -> np.ndarray:\n        \"\"\"Process a subarray of the input data.\"\"\"\n        \n        processed_subarray = np.zeros_like(subarray)\n        \n        # Perform some complex processing on the subarray\n        for i in range(len(subarray)):\n            if subarray[i] % 2 == 0:\n                processed_subarray[i] = subarray[i] * 2\n            else:\n                processed_subarray[i] = subarray[i] / 2\n        \n        return processed_subarray\n    \n    result = np.zeros_like(data)\n    \n    # Split the data into chunks and process each chunk\n    chunk_size = len(data) // 3\n    for i in range(0, len(data), chunk_size):\n        chunk = data[i:i + chunk_size]\n        processed_chunk = process_subarray(chunk)\n        result[i:i + chunk_size] = processed_chunk\n    \n    return result\n\n", "score": null}