{"sample_order": 232, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:  \n            return 1 + item / bin_capacity * 2  \n        elif item <= 0.8 * bin_capacity:\n            return 1 + item / bin_capacity  \n        else:\n            return 1 + np.sqrt(item / bin_capacity)\n\n    remaining_space = bins - item  \n\n    priorities = np.zeros_like(bins)\n    \n    sorted_bins = np.argsort(bins)  \n    \n    for i in sorted_bins:\n        if remaining_space[i] >= 0:\n            priorities[i] = calculate_priority(item, bins[i])\n            remaining_space[i] -= item\n        else:\n            break\n\n    return priorities\n\n", "score": -2068.2}