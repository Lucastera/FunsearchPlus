{"sample_order": 197, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    unique_values, counts = np.unique(data, return_counts=True)\n    \n    weighted_counts = counts * (1 / unique_values)\n    \n    sorted_indices = np.argsort(weighted_counts)[::-1]\n    \n    result = np.zeros_like(data)\n    \n    current_index = 0\n    for index in sorted_indices:\n        value = unique_values[index]\n        for i in range(len(data)):\n            if data[i] == value:\n                result[i] = current_index\n        current_index += 1\n    \n    return result\n\n", "score": null}