{"sample_order": 342, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    total_bins = len(bins)\n    max_bin_capacity = np.max(bins)\n    total_bin_capacity = np.sum(bins)\n\n    priorities = np.zeros_like(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity <= 0:\n            priorities[i] = np.nan\n        else:\n            remaining_capacity = max_bin_capacity - bin_capacity\n\n            if item <= bin_capacity:\n                priorities[i] = item / total_bin_capacity + remaining_capacity\n            else:\n                overflow = item - bin_capacity\n                total_bin_capacity = bin_capacity + remaining_capacity\n\n                priority_score = overflow * (max_bin_capacity / total_bin_capacity)\n\n                if overflow > 0.6 * item:\n                    priority_score *= 2\n                elif overflow < 0.3 * item:\n                    priority_score *= 0.7\n\n                if priority_score > 0.75 * max_bin_capacity:\n                    priorities[i] = np.inf\n                else:\n                    priorities[i] = priority_score\n\n    return priorities\n\n", "score": -2067.0}