{"sample_order": 13, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item: # If bin has enough capacity for the item, prioritize it\n            priorities[i] = 1.0\n        elif bins[i] == 0: # If bin is full, give it lowest priority\n            priorities[i] = 0.0\n        else:\n            remaining_capacity = bins[i] - item\n            fill_ratio = item / bins[i]\n            priorities[i] = fill_ratio + np.sqrt(remaining_capacity) # Adjusting priority based on remaining capacity\n    \n    return priorities\n\n", "score": -2071.8}