{"sample_order": 170, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Performs complex operations on a given matrix.\"\"\"\n    \n    # Calculate the transpose of the matrix\n    transposed_matrix = np.transpose(matrix)\n    \n    # Flatten the transposed matrix\n    flattened_matrix = transposed_matrix.flatten()\n    \n    # Find the unique values in the flattened matrix\n    unique_values = np.unique(flattened_matrix)\n    \n    # Create a mask for values greater than the mean of unique values\n    mean_value = np.mean(unique_values)\n    mask = flattened_matrix > mean_value\n    \n    # Apply the mask to the flattened matrix\n    masked_values = flattened_matrix[mask]\n    \n    # Reshape the masked values into a square matrix\n    size = int(np.sqrt(len(masked_values)))\n    reshaped_matrix = masked_values[:size*size].reshape((size, size))\n    \n    return reshaped_matrix\n\n", "score": null}