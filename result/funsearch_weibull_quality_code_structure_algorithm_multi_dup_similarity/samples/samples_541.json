{"sample_order": 541, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Assigns priority scores to each item based on bin capacities and item sizes.\"\"\"\n    \n    priorities = np.zeros(len(items))  # Initialize priority scores for items\n    \n    total_capacity = np.sum(bins)  # Calculate total capacity of all bins\n    \n    for idx, item in enumerate(items):\n        remaining_bins = bins.copy()  # Make copy of bin capacities for each item\n        \n        if item > total_capacity:  # If item size exceeds total capacity, assign max priority to bin with largest capacity\n            priorities[idx] = 1.0\n        else:\n            for i in range(len(bins)):\n                if remaining_bins[i] >= item:\n                    priorities[idx] = item / remaining_bins[i]  # Calculate priority based on available capacity\n                    remaining_bins[i] -= item  # Update remaining capacity of bin\n                    break\n                else:\n                    priorities[idx] += remaining_bins[i] / item\n                    item -= remaining_bins[i]\n                    remaining_bins[i] = 0\n        \n    return priorities\n\n", "score": null}