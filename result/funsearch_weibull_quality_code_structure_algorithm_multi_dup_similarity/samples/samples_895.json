{"sample_order": 895, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"A complex function that processes data and returns a list of results.\"\"\"\n\n    results = []\n\n    for key, value in data.items():\n        if isinstance(value, list):\n            # Process list values\n            total = sum(value)\n            avg = total / len(value)\n            results.append({\"key\": key, \"total\": total, \"avg\": avg})\n        elif isinstance(value, dict):\n            # Process dictionary values\n            max_value = max(value.values())\n            min_value = min(value.values())\n            results.append({\"key\": key, \"max\": max_value, \"min\": min_value})\n        else:\n            # Process other types of values\n            if value % 2 == 0:\n                results.append({\"key\": key, \"is_even\": True})\n            else:\n                results.append({\"key\": key, \"is_even\": False})\n\n    return results\n\n", "score": null}