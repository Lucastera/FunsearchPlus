{"sample_order": 590, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Sophisticated version of priority calculation based on various factors.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n    excess_ratio = (item - bins) / bins\n    \n    for i in range(len(bins)):\n        # Determine priority based on utilization ratio\n        if utilization_ratio[i] <= 0.1:\n            priorities[i] = 1.0\n        elif utilization_ratio[i] <= 0.3:\n            priorities[i] = 0.8\n        elif utilization_ratio[i] <= 0.6:\n            priorities[i] = 0.6\n        elif utilization_ratio[i] <= 0.8:\n            priorities[i] = 0.4\n        else:\n            priorities[i] = 0.2\n        \n        # Adjust priority based on excess ratio\n        if excess_ratio[i] >= 0.5:\n            priorities[i] -= 0.3\n        elif excess_ratio[i] >= 0.3:\n            priorities[i] -= 0.2\n        elif excess_ratio[i] >= 0.1:\n            priorities[i] -= 0.1\n        \n        # Consider neighboring bins\n        if i > 0:\n            if utilization_ratio[i] > utilization_ratio[i-1]:\n                priorities[i] += 0.1\n            else:\n                priorities[i] -= 0.1\n        \n        # Fine-tune priorities based on item size\n        if item > 0.8 * bins[i]:\n            priorities[i] -= 0.2\n        elif item > 0.5 * bins[i]:\n            priorities[i] -= 0.1\n        \n    # Normalize priorities to sum up to 1\n    priorities = np.divide(priorities, np.sum(priorities))\n    \n    return priorities\n\n", "score": -2071.8}