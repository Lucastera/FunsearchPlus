{"sample_order": 7, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n\n    # Initialize an array to store the priority score of each bin\n    priorities = np.zeros_like(bins)\n\n    # Calculate the remaining capacity in each bin\n    remaining_capacity = bins - item\n\n    # Loop through each bin to calculate the priority score\n    for i in range(len(bins)):\n        if remaining_capacity[i] >= 0:\n            # If there is enough space in the bin, calculate priority based on remaining capacity\n            priorities[i] = remaining_capacity[i]\n        else:\n            # If there is not enough space in the bin, set priority to a high value\n            priorities[i] = np.max(bins)\n\n    return priorities\n\n", "score": -5000.0}