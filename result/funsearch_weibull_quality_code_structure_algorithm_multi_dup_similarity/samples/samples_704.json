{"sample_order": 704, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= 0.3 * bin_capacity:\n            return 1 + item / bin_capacity * 3\n        elif item <= 0.7 * bin_capacity:\n            return 1 + item / bin_capacity * 2\n        else:\n            return 1 + np.sqrt(item / bin_capacity)\n        \n    def compute_score(priority: float, remaining: float, original_capacity: float) -> float:\n        return priority * np.exp(-remaining / original_capacity)\n    \n    remaining_space = bins - item\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n    \n    sorted_indices = np.argsort(priorities)\n    \n    for i in range(len(sorted_indices)):\n        current_index = sorted_indices[i]\n        if remaining_space[current_index] >= 0:\n            break\n        else:\n            candidates = []\n            for j in range(len(bins)):\n                if remaining_space[j] >= item:\n                    new_priority = calculate_priority(item, bins[j])\n                    score = compute_score(new_priority, remaining_space[j], bins[j])\n                    candidates.append((j, score))\n            if candidates:\n                best_swap = max(candidates, key=lambda x: x[1])[0]\n                priorities[current_index] = 0\n                priorities[best_swap] = 1\n        \n    return priorities\n\n", "score": null}