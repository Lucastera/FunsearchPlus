{"sample_order": 87, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:\n            return 1.5 + item / bin_capacity * 2.5\n        elif item <= bin_capacity:\n            return 1.2 + item / bin_capacity * 1.8\n        else:\n            return 1 - (item - bin_capacity) / item\n\n    item_arr = np.full_like(bins, item)\n    remaining_space = bins - item_arr\n\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    avg_priority = np.mean(priorities)\n\n    for i in range(len(bins)):\n        if priorities[i] == max_priority:\n            priorities[i] *= 1.5\n        elif priorities[i] == min_priority:\n            priorities[i] *= 0.8\n        else:\n            priorities[i] *= 1.2\n\n    return priorities\n\n", "score": -2069.2}