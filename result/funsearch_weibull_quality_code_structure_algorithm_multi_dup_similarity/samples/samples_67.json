{"sample_order": 67, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    if item > np.max(bins):\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    remaining_bins = bins.copy()\n    \n    for i in range(len(bins)):\n        if remaining_bins[i] >= item:\n            priorities[i] = item / remaining_bins[i]\n            break\n        else:\n            if remaining_bins[i] == 0:\n                priorities[i] = 0\n            else:\n                priorities[i] = remaining_bins[i] / item\n            item -= remaining_bins[i]\n            remaining_bins[i] = 0\n    \n    if np.sum(remaining_bins) < item:\n        priorities += np.maximum(remaining_bins, item) / np.sum(remaining_bins)\n    \n    return priorities\n\n", "score": null}