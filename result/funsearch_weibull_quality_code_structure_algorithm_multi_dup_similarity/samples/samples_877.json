{"sample_order": 877, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins)\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i in range(num_bins):\n        if ratios[i] < 0.3:\n            priorities[i] = 2 * ratios[i] + 0.8\n        elif ratios[i] < 0.6:\n            priorities[i] = 1.7 * ratios[i] + 0.6\n        elif ratios[i] < 0.8:\n            priorities[i] = 1.4 * ratios[i] + 0.4\n        else:\n            priorities[i] = 1.1 * ratios[i] + 0.2\n\n    max_priority = np.amax(priorities)\n    min_priority = np.amin(priorities)\n    \n    for i in range(num_bins):\n        if priorities[i] == max_priority:\n            priorities[i] *= 1.2\n        elif priorities[i] == min_priority:\n            priorities[i] *= 0.8\n        else:\n            priorities[i] *= 1.0\n\n    return priorities\n\n", "score": -2071.8}