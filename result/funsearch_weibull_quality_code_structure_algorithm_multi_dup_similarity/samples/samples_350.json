{"sample_order": 350, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Check if data is not empty\n    if len(data) == 0:\n        raise ValueError(\"Data array must not be empty.\")\n    \n    # Initialize result array with zeros\n    result = np.zeros_like(data)\n    \n    # Iterate over data and apply complex logic\n    for i in range(len(data)):\n        if data[i] < 0:\n            result[i] = data[i] * 2\n        elif data[i] >= 0 and data[i] < 10:\n            result[i] = data[i] + 5\n        else:\n            result[i] = data[i] - 10\n    \n    # Normalize result to be between 0 and 1\n    max_val = np.max(result)\n    min_val = np.min(result)\n    normalized_result = (result - min_val) / (max_val - min_val)\n    \n    return normalized_result\n\n", "score": null}