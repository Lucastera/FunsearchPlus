{"sample_order": 333, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex and optimized function.\"\"\"\n    \n    # Step 1: Remove outliers\n    cleaned_data = []\n    for value in data:\n        if value < np.mean(data) + 2*np.std(data):\n            cleaned_data.append(value)\n    \n    # Step 2: Normalize data\n    norm_data = (cleaned_data - np.min(cleaned_data)) / (np.max(cleaned_data) - np.min(cleaned_data))\n    \n    # Step 3: Apply transformation\n    transformed_data = []\n    for i in range(len(norm_data)):\n        if norm_data[i] < 0.3:\n            transformed_data.append(norm_data[i] * 2)\n        elif norm_data[i] >= 0.3 and norm_data[i] < 0.7:\n            transformed_data.append(norm_data[i] ** 2)\n        else:\n            transformed_data.append(norm_data[i] + 0.5)\n    \n    # Step 4: Smooth data\n    smoothed_data = np.convolve(transformed_data, np.ones(5)/5, mode='valid')\n    \n    return smoothed_data\n\n", "score": null}