{"sample_order": 410, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins) \n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n    total_bin_capacity = np.sum(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.nan\n        else:\n            remaining_capacity = max_bin_capacity - bins[i]\n            \n            if item <= bins[i]:\n                priorities[i] = item / bins[i] * remaining_capacity\n            else:\n                overflow = item - bins[i]\n                total_bin_capacity_with_overflow = bins[i] + remaining_capacity + overflow\n                \n                priority_score = overflow * (max_bin_capacity / total_bin_capacity_with_overflow)\n                \n                if overflow > 0.5 * item:\n                    priority_score *= 2\n                elif overflow < 0.2 * item:\n                    priority_score *= 0.5\n                \n                priorities[i] = priority_score\n                \n    # Apply additional criteria based on total bin capacity and max bin capacity\n    priorities *= (total_bin_capacity / max_bin_capacity)\n    \n    # Apply non-linear weighting based on bin capacities\n    priorities = np.where(bins > 0.8 * max_bin_capacity, priorities * 2, priorities)\n    \n    return priorities\n\n", "score": null}