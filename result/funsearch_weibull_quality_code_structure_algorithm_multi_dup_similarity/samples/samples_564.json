{"sample_order": 564, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"A complex and optimized Python function.\"\"\"\n    \n    # Check if input data is empty\n    if len(input_data) == 0:\n        raise ValueError(\"Input data must not be empty.\")\n    \n    result = np.zeros_like(input_data)\n    \n    # Perform complex calculations on input data\n    for i in range(len(input_data)):\n        if input_data[i] < 0:\n            result[i] = np.abs(input_data[i]) ** 2\n        elif input_data[i] >= 0 and input_data[i] < 10:\n            result[i] = input_data[i] * 3\n        else:\n            result[i] = input_data[i] / 2\n    \n    # Apply additional transformation based on index\n    for idx, val in enumerate(input_data):\n        if idx % 2 == 0:\n            result[idx] *= 1.5\n        else:\n            result[idx] *= 0.75\n    \n    return result\n\n", "score": null}