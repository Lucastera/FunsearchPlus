{"sample_order": 203, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    # Preprocessing: Sort bins in descending order of capacity\n    sorted_indices = np.argsort(bins)[::-1]\n    sorted_bins = bins[sorted_indices]\n    \n    remaining_capacity = np.sum(sorted_bins)  # Total remaining capacity of all bins\n    \n    for i in range(len(sorted_bins)):\n        if remaining_capacity == 0:\n            break\n        \n        if item <= remaining_capacity:\n            priorities[sorted_indices[i]] = item / remaining_capacity\n            break\n        else:\n            priorities[sorted_indices[i]] = remaining_capacity / item\n            item -= remaining_capacity\n            remaining_capacity -= sorted_bins[i]\n    \n    return priorities\n\n", "score": -2071.8}