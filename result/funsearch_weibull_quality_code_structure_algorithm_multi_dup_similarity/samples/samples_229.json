{"sample_order": 229, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:\n            return 1 + item / bin_capacity * 2\n        elif item <= 0.8 * bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 + np.power(item / bin_capacity, 1.5)  # Priority is 1 plus item to the power of 1.5 divided by bin capacity\n\n    remaining_space = bins - item\n    priorities = np.zeros_like(bins)\n\n    for i, (space, capacity) in enumerate(zip(remaining_space, bins)):\n        if space >= 0.3 * capacity:\n            priorities[i] = calculate_priority(item, capacity)\n        else:\n            priorities[i] = -1  # Mark the bin as not suitable for item addition\n\n    return priorities\n\n", "score": -2399.6}