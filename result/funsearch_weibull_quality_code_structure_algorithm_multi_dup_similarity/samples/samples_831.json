{"sample_order": 831, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function with optimized decision-making.\"\"\"    \n    def calculate_score(value, threshold):\n        return np.exp(-(value - threshold) ** 2) * np.sqrt(threshold)\n\n    output = np.zeros_like(input_array)\n    \n    for i in range(len(input_array)):\n        if input_array[i] < 0:\n            output[i] = 0\n        else:\n            max_score = -1\n            best_threshold = -1\n            \n            for j in range(1, input_array[i] + 1):\n                score = calculate_score(input_array[i], j)\n                if score > max_score:\n                    max_score = score\n                    best_threshold = j\n            \n            output[i] = best_threshold\n    \n    return output\n\n", "score": null}