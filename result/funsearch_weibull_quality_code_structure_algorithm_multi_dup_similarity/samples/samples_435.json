{"sample_order": 435, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Returns a complex priority score for each bin based on item size and bin capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n        min_priority: Minimum priority score.\n        max_priority: Maximum priority score.\n\n    Return:\n        Array of same size as bins with complex priority score of each bin.\n    \"\"\"\n    priorities = []\n    \n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    \n    for bin_capacity in bins:\n        remaining_capacity = bin_capacity - item\n        \n        if remaining_capacity >= 0:\n            if bin_capacity == max_capacity and remaining_capacity >= item:\n                priority = max_priority / (1 + remaining_capacity)\n            elif bin_capacity == min_capacity:\n                priority = min_priority / (1 + remaining_capacity)\n            else:\n                priority = (max_priority + min_priority) / 2 / (1 + remaining_capacity)\n        else:\n            future_capacity = max_capacity - item\n            past_capacity = min_capacity - item\n            \n            if future_capacity >= 0:\n                if future_capacity > remaining_capacity:\n                    priority = (max_priority + min_priority) / 2 / (1 + future_capacity)\n                else:\n                    priority = min_priority / 2 / (1 + future_capacity)\n            else:\n                if past_capacity > remaining_capacity:\n                    priority = min_priority / (1 + past_capacity)\n                else:\n                    priority = min_priority / 2 / (1 + past_capacity)\n        \n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": null}