{"sample_order": 41, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    \n    min_priority = 9999999\n    max_priority = -9999999\n    \n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        \n        if remaining_capacity >= 0:\n            base_priority = 1 / (1 + remaining_capacity)\n            priority = base_priority\n            \n            if remaining_capacity < min_priority:\n                min_priority = remaining_capacity\n            if remaining_capacity > max_priority:\n                max_priority = remaining_capacity\n        else:\n            priority = 0\n        \n        priorities.append(priority)\n    \n    for i in range(len(priorities)):\n        if priorities[i] > 0:\n            priorities[i] = (priorities[i] - min_priority) / (max_priority - min_priority)\n    \n    return np.array(priorities)\n\n", "score": null}