{"sample_order": 690, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform a complex operation on the input data.\"\"\"\n    result = np.zeros_like(data)\n    \n    # Normalize the data\n    data_mean = np.mean(data)\n    data_std = np.std(data)\n    normalized_data = (data - data_mean) / data_std\n    \n    # Apply different operations based on value range\n    for i in range(len(data)):\n        if normalized_data[i] < -2:\n            result[i] = 0\n        elif normalized_data[i] >= -2 and normalized_data[i] < 2:\n            result[i] = normalized_data[i] ** 2\n        else:\n            result[i] = np.sin(normalized_data[i])\n    \n    return result\n\n", "score": null}