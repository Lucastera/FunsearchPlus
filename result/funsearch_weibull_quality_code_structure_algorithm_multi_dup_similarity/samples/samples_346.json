{"sample_order": 346, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    remaining_capacity = np.maximum(bins - item, 0)\n    \n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    min_capacity_bin = np.argmin(bins)\n    max_capacity_bin = np.argmax(bins)\n    \n    for i, capacity in enumerate(bins):\n        priorities[i] = (capacity / total_capacity) * 0.5  # Set default priority based on bin capacity ratio\n    \n    remaining_capacity[max_capacity_bin] += item  # Add item to the bin with maximum capacity\n    \n    for i in range(len(bins)):\n        if i == min_capacity_bin:\n            priorities[i] = 0.2  # Set minimum capacity bin priority as 0.2\n        elif i == max_capacity_bin:\n            priorities[i] = 0.8  # Set maximum capacity bin priority as 0.8\n        else:\n            priorities[i] *= remaining_capacity[i]  # Adjust priority based on remaining capacity\n        \n        total_capacity -= item\n        if total_capacity <= 0:\n            break\n\n    return priorities\n\n", "score": -2071.8}