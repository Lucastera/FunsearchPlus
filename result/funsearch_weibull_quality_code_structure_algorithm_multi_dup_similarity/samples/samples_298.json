{"sample_order": 298, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    avg_capacity = np.mean(bins)\n\n    for i in range(n_bins):\n        remaining_capacity = bins[i] - item\n\n        if remaining_capacity >= 0:\n            priority_score = 1 / (1 + remaining_capacity)\n            \n            if remaining_capacity > avg_capacity:\n                priorities[i] = priority_score * 1.5\n            elif min_capacity <= remaining_capacity <= avg_capacity:\n                priorities[i] = priority_score * 1.2\n            else:\n                priorities[i] = priority_score\n        else:\n            priorities[i] = 0\n\n    # Normalize priorities\n    total_priority = sum(priorities)\n    if total_priority > 0:\n        priorities /= total_priority\n\n    return priorities\n\n", "score": -2067.0}