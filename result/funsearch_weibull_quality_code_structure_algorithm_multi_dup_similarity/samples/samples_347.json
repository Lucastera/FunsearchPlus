{"sample_order": 347, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    remaining_bins = bins.copy()\n    remaining_space = remaining_bins - item\n    \n    sorted_indices = np.argsort(remaining_space)[::-1]\n    \n    for i in range(len(bins)):\n        if remaining_bins[i] >= item:\n            priorities[i] = 1.0\n            break\n        else:\n            max_space = max(remaining_space)\n            min_space = min(remaining_space)\n            \n            if remaining_space[i] == max_space:\n                priorities[i] = 0.8\n            elif remaining_space[i] == min_space:\n                priorities[i] = 0.2\n            else:\n                priorities[i] = 0.5\n                \n            item -= remaining_bins[i]\n            remaining_space[i] = 0\n            \n            if item <= 0:\n                break\n    \n    return priorities\n\n", "score": -2071.8}