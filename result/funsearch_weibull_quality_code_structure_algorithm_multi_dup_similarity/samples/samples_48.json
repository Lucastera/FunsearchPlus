{"sample_order": 48, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Another version of priority function that considers both current and future impact.\"\"\"\n\n    # Initialize priorities array\n    priorities = np.zeros_like(bins)\n\n    # Calculate ratios and log_ratios\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n\n    # Determine if item can fit in each bin\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priorities[i] = -log_ratios[i]\n        else:\n            # Calculate the remaining space after adding item to the bin\n            remaining_space = bins[i] - item\n            future_ratio = remaining_space / bins\n            future_log_ratio = np.log(future_ratio)\n            future_priority = -future_log_ratio[i]  # future impact of adding item to the bin\n            priorities[i] = -log_ratios[i] + future_priority\n\n    return priorities\n\n", "score": -2308.2}