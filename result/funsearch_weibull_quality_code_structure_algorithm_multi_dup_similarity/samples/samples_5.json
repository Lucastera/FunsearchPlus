{"sample_order": 5, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v0` and `priority_v1`.\"\"\"\n\n    # Initialize an array to store the priorities\n    priorities = np.zeros_like(bins)\n\n    # If item is larger than any bin capacity, give highest priority to that bin\n    if item > np.max(bins):\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n\n    # Calculate the surplus capacity after adding the item to each bin\n    surplus_capacities = bins - item\n\n    # Calculate the utilization ratio of each bin after adding the item\n    utilization_ratios = (bins - surplus_capacities) / bins\n\n    # Calculate the priority based on utilization ratio\n    priorities = 1.0 - utilization_ratios\n\n    return priorities\n\n", "score": null}