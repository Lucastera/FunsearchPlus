{"sample_order": 253, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    if len(bins) == 0:\n        raise ValueError(\"Bins array must not be empty.\")\n    \n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.inf\n        else:\n            priority_score = item / bins[i]\n            # Apply a non-linear transformation based on bin capacity\n            if bins[i] < 0.5 * item:\n                priority_score *= 2\n            elif bins[i] < item:\n                priority_score *= 1.5\n            # Consider future impact by penalizing lower capacity bins\n            future_impact_penalty = 0.1 * (len(bins) - i)  # Considering remaining bins\n            priority_score -= future_impact_penalty\n            priorities[i] = priority_score\n    \n    # Normalize priorities to be between 0 and 1\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    normalized_priorities = (priorities - min_priority) / (max_priority - min_priority)\n    \n    return normalized_priorities\n\n", "score": -2080.0}