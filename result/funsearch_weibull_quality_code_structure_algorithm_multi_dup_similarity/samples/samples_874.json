{"sample_order": 874, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform a complex operation on a matrix.\"\"\"\n    \n    rows, cols = matrix.shape\n    result = np.zeros((rows, cols))\n    \n    # Iterate through each element in the matrix\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] % 2 == 0:  # If element is even\n                result[i][j] = matrix[i][j] * 2\n            else:  # If element is odd\n                result[i][j] = matrix[i][j] + 1\n    \n    return result\n\n", "score": null}