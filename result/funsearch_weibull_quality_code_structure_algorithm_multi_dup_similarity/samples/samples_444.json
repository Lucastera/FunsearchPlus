{"sample_order": 444, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v2`.\"\"\"\n    priorities = np.zeros_like(bins)\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n\n    for i in range(len(bins)):\n        if bins[i] == 0:\n            priorities[i] = np.inf\n        else:\n            remaining_capacity = max_bin_capacity - bins[i]\n\n            if item < 0.5 * bins[i]:\n                priorities[i] = item / bins[i] * remaining_capacity\n            elif item < 0.8 * bins[i]:\n                priorities[i] = item * (max_bin_capacity / (bins[i] + remaining_capacity))\n            else:\n                overflow = item - bins[i]\n                total_bin_capacity = bins[i] + remaining_capacity\n\n                priority_score = overflow * (max_bin_capacity / total_bin_capacity)\n\n                if overflow > 0.7 * item:\n                    priority_score *= 2\n                elif overflow < 0.3 * item:\n                    priority_score *= 0.5\n\n                priorities[i] = priority_score\n\n    return priorities\n\n", "score": -2270.4}