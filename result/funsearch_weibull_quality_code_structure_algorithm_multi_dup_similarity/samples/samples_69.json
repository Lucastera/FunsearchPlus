{"sample_order": 69, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform complex operations on a matrix.\"\"\"\n    \n    rows, cols = matrix.shape\n    result = np.zeros((rows, cols))  # Initialize result matrix\n    \n    # Iterate through each element in the matrix\n    for i in range(rows):\n        for j in range(cols):\n            if i % 2 == 0 and j % 2 == 0:\n                # If row index and column index are both even, perform operation 1\n                result[i, j] = matrix[i, j] * 2\n            elif i % 2 != 0 and j % 2 != 0:\n                # If row index and column index are both odd, perform operation 2\n                result[i, j] = matrix[i, j] + 5\n            else:\n                # For all other elements, perform standard operation\n                result[i, j] = matrix[i, j]\n    \n    return result\n\n", "score": null}