{"sample_order": 411, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n    total_bin_capacity = np.sum(bins)\n    total_bins = len(bins)\n\n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        else:\n            remaining_capacity = max_bin_capacity - bins[i]\n            bin_fill_ratio = bins[i] / max_bin_capacity\n\n            if bin_fill_ratio > 0.8:  # Check if bin is almost full\n                priorities[i] = np.inf  # Assign highest priority to full bins\n            else:\n                overflow = item - bins[i]\n                total_bin_capacity_with_overflow = bins[i] + remaining_capacity + overflow\n\n                priority_score = overflow * (max_bin_capacity / total_bin_capacity_with_overflow)\n\n                if overflow > 0.5 * item:\n                    priority_score *= 2  # Adjust priority score based on overflow percentage\n                elif overflow < 0.2 * item:\n                    priority_score *= 0.5  # Adjust priority score based on overflow percentage\n\n                if priority_score > max_bin_capacity * (1 - bin_fill_ratio):\n                    priorities[i] = np.inf  # Assign priority as infinite if adding item exceeds bin capacity\n                else:\n                    priorities[i] = priority_score\n\n    return priorities\n\n", "score": -3187.8}