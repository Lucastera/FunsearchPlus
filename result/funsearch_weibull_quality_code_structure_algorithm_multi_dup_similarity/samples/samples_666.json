{"sample_order": 666, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n    profit_per_capacity = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if utilization_ratio[i] <= 0.1:\n            profit_per_capacity[i] = 10\n        elif utilization_ratio[i] <= 0.3:\n            profit_per_capacity[i] = 8\n        elif utilization_ratio[i] <= 0.6:\n            profit_per_capacity[i] = 6\n        elif utilization_ratio[i] <= 0.8:\n            profit_per_capacity[i] = 4\n        else:\n            profit_per_capacity[i] = 2\n        \n    sorted_bins = np.argsort(profit_per_capacity)\n    remaining_item = item\n    \n    for i in sorted_bins:\n        if remaining_item <= 0:\n            break\n        \n        if remaining_item <= remaining_capacity[i]:\n            priorities[i] = 1.0\n            remaining_item = 0\n        else:\n            priorities[i] = remaining_capacity[i] / bins[i]\n            remaining_item -= remaining_capacity[i]\n    \n    return priorities\n\n", "score": -2217.8}