{"sample_order": 9, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Another improved version of `priority_v0`.\"\"\"\n\n    # Calculate remaining capacity of each bin after adding the item\n    remaining_capacity = bins - item\n\n    # Calculate utilization ratio of each bin\n    utilization_ratio = (bins - remaining_capacity) / bins\n\n    # Initialize priority array with zeros\n    priorities = np.zeros_like(bins)\n\n    # Compute priority for each bin based on utilization ratio\n    for i in range(len(bins)):\n        if utilization_ratio[i] < 0.2:\n            priorities[i] = 0.8\n        elif 0.2 <= utilization_ratio[i] < 0.5:\n            priorities[i] = 0.6\n        elif 0.5 <= utilization_ratio[i] < 0.8:\n            priorities[i] = 0.4\n        else:\n            priorities[i] = 0.2\n\n    return priorities\n\n", "score": -2071.8}