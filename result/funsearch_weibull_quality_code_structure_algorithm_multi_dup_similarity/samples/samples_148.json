{"sample_order": 148, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        remaining_space = bin_capacity - item\n        usage_ratio = (bin_capacity - remaining_space) / bin_capacity\n        \n        if usage_ratio < 0.3:\n            priorities[i] = 2 * usage_ratio + 0.5\n        elif usage_ratio < 0.7:\n            priorities[i] = 1.5 * usage_ratio + 0.8\n        elif usage_ratio < 1:\n            priorities[i] = 1.2 * usage_ratio + 1\n        elif usage_ratio < 1.3:\n            priorities[i] = usage_ratio + 1.5\n        else:\n            priorities[i] = 2.5 * usage_ratio\n        \n    return priorities\n\n", "score": -2067.4}