{"sample_order": 204, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of the priority calculation function.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    max_capacity = np.max(bins)\n    total_capacity = np.sum(bins)\n    \n    # Edge case: if item exceeds total capacity, distribute evenly among bins\n    if item > total_capacity:\n        priorities = bins / total_capacity\n        return priorities\n    \n    remaining_bins = bins.copy()\n\n    for i in range(len(bins)):\n        if item <= 0:\n            break\n\n        if remaining_bins[i] >= item:\n            priorities[i] = item / remaining_bins[i]\n            break\n        else:\n            priorities[i] = remaining_bins[i] / item\n            item -= remaining_bins[i]\n            remaining_bins[i] = 0\n    \n    if np.sum(priorities) < 1.0:\n        # If not all of the item is allocated, distribute the remaining based on bin capacities\n        remaining_item = item / np.sum(remaining_bins)\n        priorities += remaining_bins * remaining_item\n\n    return priorities\n\n", "score": null}