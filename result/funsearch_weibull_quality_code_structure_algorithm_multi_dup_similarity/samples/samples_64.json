{"sample_order": 64, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if utilization_ratio[i] < 0.1:\n            priorities[i] = 1.0\n        elif 0.1 <= utilization_ratio[i] < 0.3:\n            priorities[i] = 0.8\n        elif 0.3 <= utilization_ratio[i] < 0.5:\n            priorities[i] = 0.6\n        elif 0.5 <= utilization_ratio[i] < 0.7:\n            priorities[i] = 0.4\n        elif 0.7 <= utilization_ratio[i] < 0.9:\n            priorities[i] = 0.2\n        else:\n            priorities[i] = 0.1\n            \n    return priorities\n\n", "score": -2077.4}