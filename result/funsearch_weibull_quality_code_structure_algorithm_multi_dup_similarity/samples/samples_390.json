{"sample_order": 390, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v1`.\"\"\"\n\n    # Calculate range of bin capacities\n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    range_capacity = max_capacity - min_capacity\n\n    # Calculate weights based on capacities\n    weights = np.where(bins == max_capacity, 1.0,\n                       np.where(bins == min_capacity, 0.5,\n                                (bins - min_capacity) / range_capacity * 0.5 + 0.5))\n\n    # Calculate priority scores\n    priority_scores = weights * np.exp(-(item - bins) ** 2)\n\n    # Sort bins based on priority scores\n    sorted_bins = np.argsort(priority_scores)[::-1]\n\n    # Assign priorities to bins based on item size and remaining capacity\n    final_priority = np.zeros_like(bins)\n    remaining_capacity = bins.copy()\n\n    for i in sorted_bins:\n        if remaining_capacity[i] >= item:\n            final_priority[i] = priority_scores[i]\n            break\n        else:\n            final_priority[i] = priority_scores[i]\n            item -= remaining_capacity[i]\n            remaining_capacity[i] = 0\n\n    return final_priority\n\n", "score": -2071.8}