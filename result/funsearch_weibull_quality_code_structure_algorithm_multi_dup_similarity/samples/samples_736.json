{"sample_order": 736, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    avg_capacity = np.mean(bins)\n\n    total_capacity = sum(bins)\n    avg_bin_capacity = total_capacity / n_bins\n\n    # Calculate weights based on different criteria\n    weights = np.zeros(n_bins)\n    for i in range(n_bins):\n        if bins[i] == max_capacity:\n            weights[i] = 1.8\n        elif bins[i] == min_capacity:\n            weights[i] = 1.2\n        else:\n            weights[i] = 1.0\n\n    for i in range(n_bins):\n        remaining_capacity = bins[i] - item\n\n        if remaining_capacity >= 0:\n            priority_score = 1 / (1 + remaining_capacity)\n            priorities[i] = priority_score * weights[i]\n\n            capacity_difference = bins[i] - avg_bin_capacity\n            if capacity_difference > 5:\n                priorities[i] *= 1.5\n            elif 0 < capacity_difference <= 5:\n                priorities[i] *= 1.2\n            elif -5 <= capacity_difference < 0:\n                priorities[i] *= 0.8\n        else:\n            priorities[i] = 0\n\n    return priorities\n\n", "score": -2065.2}