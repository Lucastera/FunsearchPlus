{"sample_order": 477, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority_score(item, capacity):\n        return np.exp(-(item - capacity) ** 2)\n    \n    def update_remaining_capacity(remaining_capacity, bin_index, item):\n        remaining_capacity[bin_index] -= item\n    \n    def find_best_bin(item, remaining_capacity, bins):\n        best_score = -1\n        best_bin = -1\n        \n        for i in range(len(remaining_capacity)):\n            if remaining_capacity[i] >= item:\n                score = calculate_priority_score(item, bins[i])\n                if score > best_score:\n                    best_score = score\n                    best_bin = i\n            else:\n                score = calculate_priority_score(remaining_capacity[i], bins[i])\n                if score > best_score:\n                    best_score = score\n                    best_bin = i\n                    item -= remaining_capacity[i]\n        \n        return best_bin\n    \n    priority_scores = np.zeros_like(bins)\n    remaining_capacity = bins.copy()\n    \n    while item > 0:\n        best_bin = find_best_bin(item, remaining_capacity, bins)\n        if remaining_capacity[best_bin] >= item:\n            priority_scores[best_bin] = calculate_priority_score(item, bins[best_bin])\n            update_remaining_capacity(remaining_capacity, best_bin, item)\n            break\n        else:\n            priority_scores[best_bin] = calculate_priority_score(remaining_capacity[best_bin], bins[best_bin])\n            update_remaining_capacity(remaining_capacity, best_bin, remaining_capacity[best_bin])\n            item -= remaining_capacity[best_bin]\n    \n    return priority_scores\n\n", "score": -2069.2}