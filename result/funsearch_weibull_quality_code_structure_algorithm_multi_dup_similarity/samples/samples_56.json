{"sample_order": 56, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    for i in range(len(bins)):\n        if item <= bins[i]:  # Item can fit in bin\n            remaining_space = bins[i] - item\n            priorities[i] = 1.0 - (remaining_space / bins[i])\n        else:  # Item is larger than bin capacity\n            extra_space_needed = item - bins[i]\n            priorities[i] = max(0, 1.0 - (extra_space_needed / item))\n    \n    return priorities\n\n", "score": -2069.2}