{"sample_order": 919, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v2`.\n\n    More complex priority scoring logic:\n    - Introduce randomness in priority calculation.\n    - Apply exponential scaling for priority adjustment.\n    - Consider neighboring bin capacities for additional scoring.\n    \"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n\n    # Calculate normalized space score for each bin\n    space_scores = (bins - item) / bins\n\n    # Calculate proximity score based on distance from ideal capacity\n    proximity_scores = (bins - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n\n    # Determine neighboring bin factors for additional scoring\n    neighbor_factors = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if i > 0 and i < len(bins) - 1:\n            neighbor_factors[i] = (bins[i-1] + bins[i+1]) / (2 * bins[i])\n\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                combined_score = 1.0 - space_scores[i] + proximity_scores[i] + neighbor_factors[i] + np.random.uniform(0, 0.1)\n                priorities[i] = max(0, min(1, combined_score))  # Ensure priority score is between 0 and 1\n        else:\n            overflow_ratio = (item - bins[i]) / item\n            overflow_score = max(0, 1.0 - overflow_ratio)\n            combined_score = overflow_score - proximity_scores[i] + neighbor_factors[i] + np.random.uniform(0, 0.1)\n            priorities[i] = max(0, min(1, combined_score))  # Ensure priority score is between 0 and 1\n\n    # Apply exponential scaling for priority adjustment\n    priorities = np.power(priorities, 2)\n\n    return priorities\n\n", "score": -2059.0}