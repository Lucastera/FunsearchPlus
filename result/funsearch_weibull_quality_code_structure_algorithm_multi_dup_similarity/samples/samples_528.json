{"sample_order": 528, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    max_bin_capacity = np.max(bins)\n    total_bins = len(bins)\n    priorities = np.zeros_like(bins)\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity == 0:\n            priorities[i] = np.inf\n        else:\n            remaining_capacity = max_bin_capacity - bin_capacity\n            remaining_ratio = remaining_capacity / max_bin_capacity\n            \n            if item <= bin_capacity:\n                priorities[i] = item / bin_capacity * remaining_capacity\n            else:\n                overflow = item - bin_capacity\n                total_bin_capacity = bin_capacity + remaining_capacity\n                \n                priority_score = overflow * (max_bin_capacity / total_bin_capacity)\n                \n                if overflow > 0.5 * item:\n                    priority_score *= 2\n                elif overflow < 0.2 * item:\n                    priority_score *= 0.5\n                \n                # Considering future impact\n                for j in range(i + 1, total_bins):\n                    if bins[j] > 0:\n                        future_overflow = item - bins[j]\n                        future_total_capacity = bins[j] + (max_bin_capacity - bins[j])\n                        future_priority = future_overflow * (max_bin_capacity / future_total_capacity)\n                        \n                        if future_priority < priority_score:\n                            priority_score *= 0.9  # Reduce current priority if better choice in future\n                \n                priorities[i] = priority_score\n\n    return priorities\n\n", "score": -2067.0}