{"sample_order": 106, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Optimized version of priority function with more complex logic.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    remaining_capacity = bins - item\n    max_bin_capacity = np.max(bins)\n\n    for i in range(len(bins)):\n        utilization_ratio = (bins[i] - remaining_capacity[i]) / max_bin_capacity\n        if utilization_ratio < 0.2:\n            priorities[i] = 0.9\n        elif 0.2 <= utilization_ratio < 0.5:\n            priorities[i] = 0.7\n        elif 0.5 <= utilization_ratio < 0.8:\n            priorities[i] = 0.5\n        else:\n            priorities[i] = 0.3\n\n    if np.sum(priorities) < 0.5:\n        for i in range(len(bins)):\n            if priorities[i] == 0.0:\n                priorities[i] = 0.1\n\n    return priorities\n\n", "score": -2071.8}