{"sample_order": 918, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of priority calculation.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n\n    # Calculate normalized space score for each bin\n    space_scores = (bins - item) / bins\n\n    # Calculate proximity score based on distance from ideal capacity\n    proximity_scores = (bins - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n\n    # Calculate item overflow score\n    overflow_ratios = (item - bins) / item\n    overflow_scores = np.clip(1.0 - overflow_ratios, 0, 1)  # Clip overflow scores between 0 and 1\n\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                combined_score = 1.0 - space_scores[i] + proximity_scores[i]\n                priorities[i] = np.clip(combined_score, 0, 1)  # Ensure priority score is between 0 and 1\n        else:\n            combined_score = overflow_scores[i] - proximity_scores[i]\n            priorities[i] = np.clip(combined_score, 0, 1)  # Ensure priority score is between 0 and 1\n\n    return priorities\n\n", "score": null}