{"sample_order": 960, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v2`.\"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    sorted_bins = np.argsort(bins)\n    remaining_item = item\n    priorities_assigned = 0\n    \n    for bin_index in sorted_bins:\n        if remaining_item == 0:\n            break\n        \n        # If remaining item can fit entirely in current bin\n        if bins[bin_index] >= remaining_item:\n            priorities[bin_index] = (remaining_item / bins[bin_index]) * (1 - priorities_assigned)\n            priorities_assigned += priorities[bin_index]\n            remaining_item = 0\n        else:\n            # If current bin capacity is smaller than remaining item\n            priorities[bin_index] = (bins[bin_index] / remaining_item) * (1 - priorities_assigned)\n            priorities_assigned += priorities[bin_index]\n            remaining_item -= bins[bin_index]\n    \n    # Distribute remaining priority among bins that can accommodate the item partially\n    for i in range(len(bins)):\n        if remaining_item == 0:\n            break\n        \n        if priorities[i] == 0 and bins[i] > 0:\n            priority_share = min((bins[i] / total_capacity), (remaining_item / total_capacity))\n            priorities[i] = priority_share * (1 - priorities_assigned)\n            priorities_assigned += priorities[i]\n            remaining_item -= bins[i] * priority_share\n    \n    # Distribute remaining priority equally among bins that haven't received any priority yet\n    for i in range(len(bins)):\n        if remaining_item == 0:\n            break\n        \n        if priorities[i] == 0:\n            priorities[i] = 1 / len(bins) * (1 - priorities_assigned)\n            priorities_assigned += priorities[i]\n    \n    return priorities\n\n", "score": -2069.0}