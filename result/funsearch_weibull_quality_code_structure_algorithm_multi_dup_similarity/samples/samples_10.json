{"sample_order": 10, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Another improved version of `priority_v0`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    # Calculate priority based on the ratio of item to bin capacity\n    ratios = item / bins\n    \n    # Calculate weight based on log of ratios and increase priority if ratio is less than 0\n    for i, ratio in enumerate(ratios):\n        log_ratio = np.log(ratio)\n        if ratio > 1:\n            priorities[i] = log_ratio\n        else:\n            priorities[i] = log_ratio * 2  # Increase priority for smaller bins\n    \n    return priorities\n\n", "score": -2075.6}