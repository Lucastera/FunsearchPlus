{"sample_order": 950, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining space in each bin after adding the item\n    remaining_space = bins - item\n    \n    # Initialize priorities array with zeros\n    priorities = np.zeros_like(bins)\n    \n    # Calculate priority for each bin based on item size and bin capacity\n    for i in range(len(bins)):\n        bin_capacity = bins[i]\n        if item <= 0.5 * bin_capacity:\n            priorities[i] = 1 + item / bin_capacity * 2\n        elif item <= 0.9 * bin_capacity:\n            priorities[i] = 1 + item / bin_capacity\n        else:\n            priorities[i] = 1 + np.exp(item / bin_capacity)\n    \n    # Sort bins based on priority score\n    sorted_indices = np.argsort(priorities)\n    sorted_bins = bins[sorted_indices]\n    \n    # Adjust priorities based on available space in the bins\n    for i in range(len(sorted_indices)):\n        current_index = sorted_indices[i]\n        if remaining_space[current_index] >= 0:\n            break\n        else:\n            for j in range(len(sorted_indices)):\n                nearest_empty_bin = sorted_indices[j]\n                if remaining_space[nearest_empty_bin] >= item:\n                    priorities[current_index] = 0\n                    priorities[nearest_empty_bin] = 1\n                    break\n    \n    return priorities\n\n", "score": -2065.4}