{"sample_order": 211, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2` with more complex logic and optimized for performance.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        ratio = item / bins[i]\n        \n        if ratio < 0.3:\n            priorities[i] = 2 * ratio + 0.5\n        elif ratio < 0.5:\n            priorities[i] = 1.8 * ratio + 0.7\n        elif ratio < 0.7:\n            priorities[i] = 1.5 * ratio + 0.8\n        elif ratio < 0.9:\n            priorities[i] = 1.3 * ratio + 0.9\n        elif ratio < 1:\n            priorities[i] = 1.1 * ratio + 1\n          \n    priorities[ratios >= 1] = ratios[ratios >= 1] + 1.3\n    priorities[ratios >= 1.4] = 0.8 * ratios[ratios >= 1.4] + 1.5\n    priorities[ratios >= 1.6] = 2.3 * ratios[ratios >= 1.6]\n    \n    return priorities\n\n", "score": null}