{"sample_order": 142, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)  \n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    max_bin_capacity = np.max(bins)\n    total_bins = len(bins)\n    \n    for i in range(total_bins):\n        if bins[i] <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        else:\n            remaining_capacity = max_bin_capacity - bins[i]\n            utilization_ratio = item / bins[i]\n            \n            if utilization_ratio < 1:\n                priorities[i] = utilization_ratio * (remaining_capacity * 0.8)  # Higher weight for less utilized bins\n            else:\n                overflow = item - bins[i]\n                weighted_overflow = overflow * (max_bin_capacity / (bins[i] + 1)) * 1.2  # Consider overflow and overall capacity\n                \n                if overflow >= 0.5 * item:\n                    priorities[i] = weighted_overflow * 1.1  # Give bonus weight for larger overflows\n                else:\n                    priorities[i] = weighted_overflow\n                \n                if i < total_bins - 1:\n                    priorities[i + 1] = max(priorities[i + 1], priorities[i] * 0.9)  # Influence next bin's priority\n                \n    return priorities\n\n", "score": -2082.8}