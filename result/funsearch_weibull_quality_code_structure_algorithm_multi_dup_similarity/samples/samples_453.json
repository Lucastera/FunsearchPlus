{"sample_order": 453, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] == max_bin_capacity:\n                priorities[i] = 1.0\n            else:\n                weight_diff = 1.0 - (bins[i] - item) / bins[i] + (bins[i] - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n                priorities[i] = 0.7 * weight_diff + 0.3 * (bins[i] / total_capacity)  # Non-linear weighting\n                \n        else:\n            weight_diff = 1.0 - (item - bins[i]) / item - (bins[i] - min_bin_capacity) / (max_bin_capacity - min_bin_capacity)\n            priorities[i] = max(0, 0.6 * weight_diff + 0.4 * (item / total_capacity))  # Non-linear weighting\n            \n        # Consider future impact\n        remaining_capacity = total_capacity - bins[i]\n        if remaining_capacity < item:\n            priorities[i] *= 0.8  # Reduce priority if bin is close to full\n    \n    return priorities\n\n", "score": -4926.2}