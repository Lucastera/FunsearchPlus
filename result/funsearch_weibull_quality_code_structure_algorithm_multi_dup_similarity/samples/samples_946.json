{"sample_order": 946, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Preprocess input data\n    processed_data = preprocess_data(input_data)\n    \n    # Perform complex calculations\n    result = np.zeros_like(processed_data)\n    \n    for i in range(len(processed_data)):\n        if processed_data[i] < 0:\n            result[i] = handle_negative_value(processed_data[i])\n        else:\n            intermediate_result = processed_data[i] + 10\n            if intermediate_result % 2 == 0:\n                result[i] = intermediate_result / 2\n            else:\n                result[i] = intermediate_result * 3\n\n    # Apply post-processing\n    final_result = postprocess_data(result)\n\n    return final_result\n\n", "score": null}