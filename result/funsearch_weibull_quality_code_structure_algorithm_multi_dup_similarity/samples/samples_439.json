{"sample_order": 439, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Performing complex operations on the input data.\"\"\"\n\n    # Initialize result array\n    result = np.zeros_like(data)\n    \n    # Iterate through each element in the data array\n    for i in range(len(data)):\n        if data[i] % 2 == 0:\n            # If element is even, square it\n            result[i] = data[i] ** 2\n        else:\n            # If element is odd, cube it\n            result[i] = data[i] ** 3\n\n    # Find the maximum element in the result array\n    max_value = np.max(result)\n    \n    # Iterate through elements in the result array again\n    for i in range(len(result)):\n        if result[i] == max_value:\n            # If element is equal to the maximum value, set it to double of the original value\n            result[i] = data[i] * 2\n\n    return result\n\n", "score": null}