{"sample_order": 407, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    \n    n_bins = len(bins)\n    bin_capacities = np.sort(bins)\n    \n    priorities = np.zeros(n_bins)\n    for i in range(n_bins):\n        priorities[i] = np.exp(-(item - bin_capacities[i]) ** 2)\n    \n    remaining_capacity = bin_capacities.copy()\n    total_priority = np.sum(priorities)\n    \n    final_priority = np.zeros(n_bins)\n    \n    for i in range(n_bins):\n        if remaining_capacity[i] >= item:\n            final_priority[i] = priorities[i] / total_priority\n            break\n        else:\n            final_priority[i] = priorities[i] / total_priority\n            item -= remaining_capacity[i]\n            total_priority -= priorities[i]\n            remaining_capacity[i] = 0\n    \n    return final_priority\n\n", "score": null}