{"sample_order": 127, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Another improved version with more complex logic.\"\"\"\n\n    # Calculate remaining capacity of each bin after adding the item\n    remaining_capacity = bins - item\n    \n    # Calculate utilization ratio of each bin\n    utilization_ratio = (bins - remaining_capacity) / bins\n    \n    # Initialize priority array with zeros\n    priorities = np.zeros_like(bins)\n    \n    # Define priority levels based on utilization ratio and bin capacity\n    priority_levels = {\n        (0.2, 0.4): 0.9,\n        (0.4, 0.6): 0.7,\n        (0.6, 0.8): 0.5,\n        (0.8, 1.0): 0.3\n    }\n    \n    # Compute priority for each bin based on utilization ratio and capacity\n    for i in range(len(bins)):\n        for (lower, upper), score in priority_levels.items():\n            if lower <= utilization_ratio[i] < upper:\n                priorities[i] = score\n                break\n        # Assign a default priority if the bin does not fall into any range\n        if priorities[i] == 0.0:\n            priorities[i] = 0.1\n\n    return priorities\n\n", "score": -2071.8}