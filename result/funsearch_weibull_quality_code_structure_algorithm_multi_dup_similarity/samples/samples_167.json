{"sample_order": 167, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Perform a complex operation on a matrix.\n\n    Args:\n        matrix: Input matrix to perform the operation on.\n\n    Returns:\n        Output matrix after performing the complex operation.\n    \"\"\"\n\n    output_matrix = np.zeros_like(matrix)\n\n    # Perform complex operation element-wise on the matrix\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            if matrix[i, j] % 2 == 0:\n                output_matrix[i, j] = matrix[i, j] ** 2\n            else:\n                output_matrix[i, j] = matrix[i, j] * 3 + 1\n\n    return output_matrix\n\n", "score": null}