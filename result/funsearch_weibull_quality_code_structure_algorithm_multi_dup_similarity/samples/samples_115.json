{"sample_order": 115, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Returns priority with which we want to add item to each bin in a more complex manner.\n    This function takes into account multiple factors to determine bin priority.\n    \"\"\"\n\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n    total_bins = len(bins)\n\n    for i in range(total_bins):\n        if bins[i] <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        else:\n            remaining_capacity_ratio = (bins[i] / max_bin_capacity)  # Calculate remaining capacity ratio\n\n            if item <= bins[i]:\n                priorities[i] = item / bins[i] * (max_bin_capacity - bins[i]) * (1 + remaining_capacity_ratio)  # Weighted ratio based on remaining capacity\n            else:\n                overflow_factor = (item - bins[i]) / total_bins  # Calculate overflow factor\n                priorities[i] = overflow_factor * (max_bin_capacity / (bins[i] + 1)) * remaining_capacity_ratio  # Weighted overflow considering overall bin capacity\n\n    return priorities\n\n", "score": -2067.0}