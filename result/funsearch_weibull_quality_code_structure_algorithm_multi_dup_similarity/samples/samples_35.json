{"sample_order": 35, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more complex version of priority function.\"\"\"\n\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:  # If item is less than half of bin capacity\n            return 1 + item / bin_capacity * 2  # Priority is 1 plus double the ratio of item to bin capacity\n        elif item <= bin_capacity:  # If item is less than or equal to bin capacity\n            return 1 + item / bin_capacity  # Priority is 1 plus the ratio of item to bin capacity\n        else:\n            return 1 - (item - bin_capacity) / item  # Priority is 1 minus ratio of remaining item to total item\n\n    item_arr = np.full_like(bins, item)  # Create an array of the same size as bins filled with item value\n    remaining_space = bins - item_arr  # Calculate remaining space in each bin after adding item\n\n    priorities = np.zeros_like(bins)  # Initialize array to store priorities\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])  # Calculate priority for each bin\n\n    return priorities\n\n", "score": -2068.2}