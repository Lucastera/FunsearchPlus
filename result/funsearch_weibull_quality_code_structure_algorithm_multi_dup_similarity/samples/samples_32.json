{"sample_order": 32, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n\n    # Initialize an array to store priorities\n    priorities = np.zeros_like(bins)\n\n    # Calculate ratios of item to bin capacities\n    ratios = item / bins\n\n    # Calculate log of ratios\n    log_ratios = np.log(ratios)\n\n    # Loop through each bin\n    for i in range(len(bins)):\n        # Calculate priority score for each bin\n        if ratios[i] >= 1:\n            priorities[i] = -log_ratios[i]\n        else:\n            priorities[i] = log_ratios[i]\n\n    return priorities\n\n", "score": -2071.8}