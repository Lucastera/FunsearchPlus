{"sample_order": 482, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Highly advanced version of the priority function.\"\"\"\n\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= 0.5 * bin_capacity:\n            priority = 1 + item / bin_capacity * 2\n        elif item <= 0.8 * bin_capacity:\n            priority = 1 + item / bin_capacity\n        else:\n            priority = 1 + np.sqrt(item / bin_capacity)\n        return priority\n\n    remaining_space = bins - item\n    priorities = np.zeros_like(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        priorities[i] = calculate_priority(item, bin_capacity)\n\n    max_priority_index = np.argmax(priorities)\n\n    if remaining_space[max_priority_index] >= 0:\n        return priorities\n    \n    for i in range(len(bins)):\n        if remaining_space[i] >= item:\n            priorities[max_priority_index] = 0\n            priorities[i] = 1\n            break\n\n    return priorities\n\n", "score": -2068.2}