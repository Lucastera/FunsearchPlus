{"sample_order": 91, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n    \n    for i in range(len(bins)):\n        if utilization_ratio[i] <= 0.2:\n            priorities[i] = 0.9\n        elif utilization_ratio[i] <= 0.5:\n            priorities[i] = 0.7\n        elif utilization_ratio[i] <= 0.8:\n            priorities[i] = 0.5\n        else:\n            priorities[i] = 0.3\n            \n        if bins[i] - item < 0.2 * bins[i]:\n            priorities[i] -= 0.1\n        \n    return priorities\n\n", "score": -2071.8}