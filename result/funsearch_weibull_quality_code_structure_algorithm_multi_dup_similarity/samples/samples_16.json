{"sample_order": 16, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        remaining_space = bins[i] - item\n        if remaining_space >= 0:\n            priorities[i] = 1 / (remaining_space + 1)\n        else:\n            priorities[i] = np.inf\n    \n    min_priority = np.min(priorities)\n    if np.isinf(min_priority):\n        priorities = np.zeros_like(bins)\n        for i in range(len(bins)):\n            priorities[i] = 1 / bins[i]\n    \n    return priorities\n\n", "score": -2069.2}