{"sample_order": 89, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:\n            return 1 + item / bin_capacity * 2\n        elif item <= bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 - (item - bin_capacity) / item\n\n    item_arr = np.full_like(bins, item)\n    remaining_space = bins - item_arr\n\n    priorities = np.zeros_like(bins)\n\n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n    bin_range = max_bin_capacity - min_bin_capacity\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i]) + (bins[i] - min_bin_capacity) / bin_range\n\n    return priorities\n\n", "score": null}