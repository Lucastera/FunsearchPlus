{"sample_order": 351, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that processes input data.\"\"\"\n    \n    if len(input_data) == 0:\n        raise ValueError(\"Input data must not be empty.\")\n    \n    result = np.zeros_like(input_data)\n    \n    # Process input data\n    for i in range(len(input_data)):\n        if input_data[i] < 0:\n            # Handle negative values by taking absolute\n            result[i] = np.abs(input_data[i])\n        else:\n            # Perform some complex calculation\n            result[i] = input_data[i] ** 2 + 5 * input_data[i] + 10\n    \n    # Add additional logic based on result values\n    for i in range(len(result)):\n        if result[i] % 2 == 0:\n            result[i] += 1\n        else:\n            result[i] -= 1\n    \n    return result\n\n", "score": null}