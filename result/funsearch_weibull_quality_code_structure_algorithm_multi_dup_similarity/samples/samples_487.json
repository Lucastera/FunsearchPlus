{"sample_order": 487, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex priority function with optimized and balanced code structure.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n\n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        utilization_ratio = (bins[i] - remaining_capacity) / bins[i]\n        \n        # Check if bin is close to maximum capacity\n        if bins[i] - item < 0.1 * max_bin_capacity:\n            priorities[i] = 0.1\n        # Check if bin is close to minimum capacity\n        elif remaining_capacity < 0.1 * item:\n            priorities[i] = 0.9\n        else:\n            # Check utilization ratio and assign priority\n            if utilization_ratio <= 0.2:\n                priorities[i] = 0.8\n            elif utilization_ratio <= 0.5:\n                priorities[i] = 0.6\n            elif utilization_ratio <= 0.8:\n                priorities[i] = 0.4\n            else:\n                priorities[i] = 0.2\n\n    return priorities\n\n", "score": -2071.8}