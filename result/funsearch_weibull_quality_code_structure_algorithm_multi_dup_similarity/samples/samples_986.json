{"sample_order": 986, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v2`.\"\"\"\n    priorities = []\n    max_capacity = max(bins)\n    min_capacity = min(bins)\n    threshold = 0.75\n    \n    for current_capacity in bins:\n        remaining_capacity = current_capacity - item\n        \n        if remaining_capacity >= 0:\n            if current_capacity == max_capacity:\n                if remaining_capacity >= item:\n                    priority = 1.9 / (1 + remaining_capacity)\n                else:\n                    priority = 1.2 / (1 + remaining_capacity)\n            elif current_capacity == min_capacity:\n                priority = 0.8 / (1 + remaining_capacity)\n            else:\n                priority = 1.4 / (1 + remaining_capacity)\n        else:\n            if max_capacity - item >= 0.8 * max_capacity:\n                # High future capacity, prioritize this bin\n                priority = 1.5 / (1 + max_capacity) if max_capacity > remaining_capacity else 0.7 / (1 + max_capacity)\n            elif min_capacity - item >= 0.6 * min_capacity:\n                # High past capacity, prioritize this bin\n                priority = 1.1 / (1 + min_capacity) if min_capacity > remaining_capacity else 0.5 / (1 + min_capacity)\n            else:\n                # Distribute priority based on current and future capacity\n                priority = 1.3 / (1 + current_capacity) if current_capacity > remaining_capacity else 0.9 / (1 + current_capacity)\n        \n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -2070.2}