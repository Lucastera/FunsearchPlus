{"sample_order": 88, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        if item <= bin_capacity / 2:\n            return 1 + item / bin_capacity * 2\n        elif item <= bin_capacity:\n            return 1 + item / bin_capacity\n        else:\n            return 1 - (item - bin_capacity) / item\n\n    item_weights = np.arange(item, item * len(bins), item)  # Create an array of increasing weights\n    remaining_space = bins - item_weights  # Calculate remaining space in each bin after adding weighted item\n\n    priorities = np.zeros_like(bins)  # Initialize array to store priorities\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item_weights[i], bins[i])  # Calculate priority based on weighted item\n\n    return priorities\n\n", "score": -2073.0}