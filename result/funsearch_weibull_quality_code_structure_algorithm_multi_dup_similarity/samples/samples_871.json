{"sample_order": 871, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    \n    # Define a function to calculate priority score\n    def calculate_priority_score(item, remaining_capacity, bins):\n        return np.exp(-(item - remaining_capacity) ** 2) * np.sqrt(bins)\n    \n    # Initialize variables\n    priority_scores = np.zeros_like(bins)\n    remaining_capacity = bins.copy()\n    \n    # Iterate over each bin\n    for i in range(len(remaining_capacity)):\n        if remaining_capacity[i] >= item:\n            # If bin has enough capacity for the item\n            priority_scores[i] = calculate_priority_score(item, remaining_capacity[i], bins[i])\n            remaining_capacity[i] -= item\n            break\n        else:\n            # If bin does not have enough capacity\n            priority_scores[i] = calculate_priority_score(remaining_capacity[i], remaining_capacity[i], bins[i])\n            item -= remaining_capacity[i]\n            remaining_capacity[i] = 0\n    \n    return priority_scores\n\n", "score": -2071.8}