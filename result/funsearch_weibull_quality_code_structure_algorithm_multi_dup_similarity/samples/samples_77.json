{"sample_order": 77, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    output_data = np.zeros_like(input_data)\n\n    for idx, data_point in enumerate(input_data):\n        # Perform complex calculations\n        temp_value = data_point * 2 + 5\n\n        # Apply some condition based on the calculated value\n        if temp_value < 20:\n            output_data[idx] = temp_value\n        elif temp_value >= 20 and temp_value < 30:\n            output_data[idx] = temp_value * 1.5\n        else:\n            output_data[idx] = temp_value * 2\n\n    return output_data\n\n", "score": null}