{"sample_order": 257, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n\n    total_capacity = np.sum(bins)\n    avg_bin_capacity = total_capacity / n_bins\n\n    for i in range(n_bins):\n        remaining_capacity = bins[i] - item\n        if remaining_capacity >= 0:\n            priority_score = 1 / (1 + remaining_capacity)\n            \n            capacity_difference = bins[i] - avg_bin_capacity\n            if capacity_difference > 0:\n                priorities[i] = priority_score * 1.5  # Increase priority further\n            elif capacity_difference < 0:\n                priorities[i] = priority_score * 0.7  # Decrease priority more\n            else:\n                priorities[i] = priority_score\n\n            if len(set(bins)) == 1:\n                priorities[i] *= 1.2  # Increase priority if all bins have same capacity\n        else:\n            priorities[i] = 0\n\n    return priorities\n\n", "score": null}