{"sample_order": 101, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    weights = np.zeros_like(bins)\n    \n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    range_capacity = max_capacity - min_capacity\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            weights[i] = 1.0\n        elif bins[i] == min_capacity:\n            weights[i] = 0.5\n        else:\n            weights[i] = (bins[i] - min_capacity) / range_capacity * 0.5 + 0.5\n            \n    priority_scores = np.zeros_like(bins)\n    for i in range(len(bins)):\n        priority_scores[i] = weights[i] * np.exp(-(item - bins[i]) ** 2)\n    \n    sorted_bins = np.argsort(priority_scores)[::-1]\n    \n    final_priority = np.zeros_like(bins)\n    remaining_capacity = bins.copy()\n    \n    for i in sorted_bins:\n        if remaining_capacity[i] >= item:\n            final_priority[i] = priority_scores[i]\n            break\n        else:\n            final_priority[i] = priority_scores[i]\n            item -= remaining_capacity[i]\n            remaining_capacity[i] = 0\n            \n    return final_priority\n\n", "score": -2071.8}