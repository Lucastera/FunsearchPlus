{"sample_order": 997, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    if len(bins) == 0:\n        raise ValueError(\"Bins array must not be empty.\")\n    \n    priorities = np.zeros_like(bins)\n    \n    # Sort bins in ascending order of capacity\n    sorted_bins = np.argsort(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.inf\n        else:\n            priorities[i] = item / bins[i]\n    \n    normalized_priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))\n    \n    for idx, val in enumerate(bins):\n        if val < item:\n            normalized_priorities[idx] *= 1.5\n        elif val >= item and val < (2 * item):\n            normalized_priorities[idx] *= 1.2\n        else:\n            normalized_priorities[idx] *= 0.8\n    \n    weighted_priorities = np.sqrt(normalized_priorities)\n    \n    return weighted_priorities\n\n", "score": -2069.2}