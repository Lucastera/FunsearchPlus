{"sample_order": 102, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n    \n    total_capacity = sum(bins)\n    \n    if total_capacity < item:\n        return priorities\n    \n    for i in range(n_bins):\n        average_capacity = total_capacity / n_bins\n        remaining_capacity = bins[i] - item\n        if remaining_capacity >= 0:\n            priorities[i] = 1 / (1 + remaining_capacity)\n        else:\n            priorities[i] = 0\n        \n        if remaining_capacity < average_capacity:\n            priorities[i] *= remaining_capacity / average_capacity\n            \n    return priorities\n\n", "score": -4316.0}