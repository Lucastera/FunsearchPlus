{"sample_order": 331, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    remaining_capacity = bins - item\n    utilization_ratio = (bins - remaining_capacity) / bins\n    \n    priority_levels = {0.2: 0.8, 0.4: 0.6, 0.6: 0.4, 0.8: 0.2}\n    \n    for i in range(len(bins)):\n        if utilization_ratio[i] < 0.2:\n            priorities[i] = 0.8\n        elif utilization_ratio[i] < 0.4:\n            priorities[i] = 0.6\n        elif utilization_ratio[i] < 0.6:\n            priorities[i] = 0.4\n        elif utilization_ratio[i] < 0.8:\n            priorities[i] = 0.2\n    \n    if np.sum(priorities) < 0.5:\n        for i in range(len(bins)):\n            if priorities[i] == 0.0:\n                priorities[i] = 0.1\n            elif priorities[i] == 0.2:\n                priorities[i] = 0.3\n            elif priorities[i] == 0.4:\n                priorities[i] = 0.5\n    \n    return priorities\n\n", "score": -2071.8}