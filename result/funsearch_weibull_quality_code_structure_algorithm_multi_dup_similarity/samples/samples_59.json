{"sample_order": 59, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v0` and `priority_v1`.\"\"\"\n\n    # Calculate remaining capacity in each bin after adding the item\n    remaining_capacity = bins - item\n\n    # Calculate the ratio of remaining capacity to the original bin size\n    remaining_ratio = remaining_capacity / bins\n\n    # Initialize an array to store the priorities\n    priorities = np.zeros_like(bins, dtype=float)\n\n    # Iterate through each bin to calculate priority score\n    for i in range(len(bins)):\n        if remaining_ratio[i] >= 0.5:\n            priorities[i] = 1 / remaining_ratio[i]  # Higher priority for more remaining capacity\n        else:\n            priorities[i] = 1 + np.log(1 / (1 - remaining_ratio[i]))  # Higher priority for less remaining capacity\n\n    return priorities\n\n", "score": null}