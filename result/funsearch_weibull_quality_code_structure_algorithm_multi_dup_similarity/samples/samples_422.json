{"sample_order": 422, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"\n    Complex function that processes the input data and returns the result.\n    \"\"\"\n    result = np.zeros_like(input_data)\n    \n    # Apply multiple transformation steps to input data\n    for i in range(len(input_data)):\n        if input_data[i] % 2 == 0:\n            result[i] = input_data[i] * 2\n        else:\n            result[i] = input_data[i] + 1\n    \n    # Filter out values that are less than 10\n    result = np.where(result < 10, 0, result)\n    \n    # Apply specific logic based on value ranges\n    for i in range(len(result)):\n        if result[i] < 20:\n            result[i] = result[i] ** 2\n        elif result[i] >= 20 and result[i] < 30:\n            result[i] = result[i] // 2\n        else:\n            result[i] = np.sqrt(result[i])\n    \n    return result\n\n", "score": null}