{"sample_order": 570, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of priority function.\"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n\n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n\n    remaining_capacity = total_capacity\n    sorted_bins = np.argsort(bins)\n\n    for i in range(len(sorted_bins)):  \n        bin_index = sorted_bins[i]\n\n        if item == 0:\n            break\n\n        if bins[bin_index] >= item:\n            priorities[bin_index] = item / bins[bin_index]\n            break\n        else:\n            priorities[bin_index] = bins[bin_index] / item\n            item -= bins[bin_index]\n            remaining_capacity -= bins[bin_index]\n\n    min_capacity_bin = sorted_bins[0]\n    max_capacity_bin = sorted_bins[-1]\n\n    for i in range(len(bins)):\n        if item == 0:\n            break\n\n        if priorities[i] == 0:\n            if i == min_capacity_bin:\n                priorities[i] = 0.2\n            elif i == max_capacity_bin:\n                priorities[i] = 0.8\n            else:\n                priorities[i] = 0.5\n\n            if remaining_capacity > 0:\n                priorities[i] = priorities[i] * (bins[i] / remaining_capacity)  \n                remaining_capacity -= bins[i]\n\n    return priorities\n\n", "score": -2069.0}