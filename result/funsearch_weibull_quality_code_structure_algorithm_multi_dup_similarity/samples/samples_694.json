{"sample_order": 694, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    \n    # Calculate utilization ratio for each bin\n    utilization_ratios = [(bin_capacity - item) / bin_capacity for bin_capacity in bins]\n    \n    # Determine priorities based on utilization ratio\n    for ratio in utilization_ratios:\n        if ratio < 0.2:\n            priorities.append(0.9)\n        elif ratio < 0.5:\n            priorities.append(0.7)\n        elif ratio < 0.8:\n            priorities.append(0.5)\n        elif ratio < 0.9:\n            priorities.append(0.3)\n        else:\n            priorities.append(0.1)\n            \n    # Adjust priorities based on specific conditions\n    for i in range(len(bins)):\n        if bins[i] - item < 0.2 * bins[i]:\n            priorities[i] -= 0.1\n            \n        if bins[i] < 1.5 * item:\n            priorities[i] = max(0.1, priorities[i] - 0.2)\n    \n        if bins[i] < 0.5 * item and utilization_ratios[i] < 0.6:\n            priorities[i] = 0.5\n            \n    return priorities\n\n", "score": -2144.2}