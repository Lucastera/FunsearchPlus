{"sample_order": 85, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v2`.\"\"\"\n\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        elif item <= bin_capacity:\n            priorities[i] = item / bin_capacity  # Assign ratio as priority\n        else:\n            overflow = (item - bin_capacity) * 2\n            priorities[i] = max(overflow, bin_capacity)  # Consider overflow or full bin as priority\n\n    return priorities\n\n", "score": -2069.2}