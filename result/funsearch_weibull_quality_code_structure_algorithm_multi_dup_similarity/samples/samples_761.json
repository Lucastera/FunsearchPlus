{"sample_order": 761, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex priority calculation based on item size and bin capacities.\"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    # If item size is larger than total capacity, assign priority to bin with highest capacity\n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    # Distribute priority based on ratio of item size to bin capacities\n    for i in range(len(bins)):\n        bin_ratio = bins[i] / total_capacity\n        item_ratio = item / total_capacity\n        \n        if bin_ratio > item_ratio:\n            priorities[i] = bin_ratio - item_ratio\n        elif bin_ratio < item_ratio:\n            priorities[i] = (1 - item_ratio) * (bins[i] / item)\n    \n    return priorities\n\n", "score": -2071.8}