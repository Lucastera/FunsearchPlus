{"sample_order": 156, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of priority function with more complex logic.\"\"\"\n    \n    def calculate_weights(bins):\n        max_capacity = np.max(bins)\n        min_capacity = np.min(bins)\n        range_capacity = max_capacity - min_capacity\n        weights = np.zeros_like(bins)\n        \n        for i in range(len(bins)):\n            if bins[i] == max_capacity:\n                weights[i] = 1.0\n            elif bins[i] == min_capacity:\n                weights[i] = 0.5\n            else:\n                weights[i] = (bins[i] - min_capacity) / range_capacity * 0.5 + 0.5\n        \n        return weights\n    \n    def calculate_priority_scores(item, bins, weights):\n        priority_scores = np.zeros_like(bins)\n        for i in range(len(bins)):\n            priority_scores[i] = weights[i] * np.exp(-(item - bins[i]) ** 2)\n        \n        return priority_scores\n    \n    weights = calculate_weights(bins)\n    priority_scores = calculate_priority_scores(item, bins, weights)\n    \n    return priority_scores\n\n", "score": -2071.8}