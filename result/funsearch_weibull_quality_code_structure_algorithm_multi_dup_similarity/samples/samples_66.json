{"sample_order": 66, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Perform a complex operation on input data.\"\"\"\n    \n    result = np.zeros_like(input_data)  # Initialize result array\n    \n    # Perform the complex operation on each element of input_data\n    for i in range(len(input_data)):\n        if input_data[i] % 2 == 0:  # Check if element is even\n            result[i] = input_data[i] ** 2\n        else:\n            result[i] = input_data[i] * 3\n            \n        # Additional logic based on the value of element\n        if input_data[i] < 0:  # Check if element is negative\n            result[i] += 10\n        elif input_data[i] > 10:  # Check if element is greater than 10\n            result[i] -= 5\n        else:  # Default case\n            result[i] += 1\n    \n    return result\n\n", "score": null}