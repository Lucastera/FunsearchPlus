{"sample_order": 771, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_utilization_ratio(bins, remaining_capacity):\n        return (bins - remaining_capacity) / bins\n\n    def calculate_priority(utilization_ratio, max_utilization, min_utilization, utilization_range):\n        if utilization_ratio == max_utilization:\n            return 1.0\n        elif utilization_ratio == min_utilization:\n            return 0.2\n        else:\n            return 0.2 + 0.6 * (utilization_ratio - min_utilization) / utilization_range\n\n    def adjust_priority(priorities, capacity_ratio):\n        if capacity_ratio < 0.2:\n            return priorities + 0.3\n        elif capacity_ratio < 0.5:\n            return priorities + 0.2\n        elif capacity_ratio < 0.8:\n            return priorities + 0.1\n        return priorities\n\n    priorities = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    utilization_ratio = calculate_utilization_ratio(bins, remaining_capacity)\n\n    max_utilization = np.max(utilization_ratio)\n    min_utilization = np.min(utilization_ratio)\n    utilization_range = max_utilization - min_utilization\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(utilization_ratio[i], max_utilization, min_utilization, utilization_range)\n\n        capacity_ratio = (bins[i] - item) / item\n        priorities[i] = adjust_priority(priorities[i], capacity_ratio)\n\n    return priorities\n\n", "score": -2067.0}