{"sample_order": 450, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    # Initialize priorities array\n    priorities = np.zeros_like(bins)  \n    \n    # Calculate total capacity, min and max bin capacities\n    total_capacity = np.sum(bins)\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    \n    # Calculate threshold values based on item size\n    threshold1 = 0.5 * item\n    threshold2 = 0.8 * item\n    \n    # Iterate over each bin to determine priority\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] >= threshold2:\n                priorities[i] = 1.0\n            elif bins[i] >= threshold1:\n                priorities[i] = 0.8\n            else:\n                priorities[i] = 0.5\n        else:\n            if item >= threshold2:\n                priorities[i] = max(0, 1.0 - (item - bins[i]) / item)\n            else:\n                priorities[i] = max(0, 0.8 - (item - bins[i]) / item)\n    \n    return priorities\n\n", "score": -2071.8}