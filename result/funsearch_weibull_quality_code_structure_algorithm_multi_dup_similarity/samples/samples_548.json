{"sample_order": 548, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that optimizes decision-making based on data and threshold.\"\"\"\n    \n    def calculate_value(value: float, threshold: float) -> float:\n        if value <= 0.5 * threshold:\n            return 1 + value / threshold * 2\n        elif value <= 0.9 * threshold:\n            return 1 + value / threshold\n        else:\n            return 1 + np.exp(value / threshold)\n\n    result = np.zeros_like(data)\n\n    for i in range(len(data)):\n        if data[i] > threshold:\n            result[i] = calculate_value(data[i], threshold)\n        else:\n            result[i] = 0\n\n    for i in range(len(data)):\n        if result[i] == 0:\n            for j in range(i+1, len(data)):\n                if result[j] != 0:\n                    result[i] = result[j]\n                    result[j] = 0\n                    break\n\n    return result\n\n", "score": null}