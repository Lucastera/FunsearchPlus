{"sample_order": 251, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n\n    if len(bins) == 0:\n        raise ValueError(\"Bins array must not be empty.\")\n\n    priorities = np.zeros_like(bins)\n\n    item_normalized = (item - np.min(bins)) / (np.max(bins) - np.min(bins))\n\n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.inf\n        else:\n            bin_normalized = (bins[i] - np.min(bins)) / (np.max(bins) - np.min(bins))\n            priorities[i] = item_normalized / bin_normalized\n            if bins[i] < item:\n                priorities[i] = priorities[i] * np.sqrt(item / bins[i])\n\n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    normalized_priorities = (priorities - min_priority) / (max_priority - min_priority)\n    \n    return normalized_priorities\n\n", "score": null}