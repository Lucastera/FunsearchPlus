{"sample_order": 890, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v2` with optimized logic.\"\"\"\n    \n    priorities = np.zeros_like(bins)\n    \n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n    \n    max_bin_capacity = np.max(bins)\n    total_bins = len(bins)\n    \n    for i in range(total_bins):\n        if bins[i] <= 0:\n            priorities[i] = np.nan\n        else:\n            remaining_capacity_ratio = bins[i] / max_bin_capacity\n            \n            if item <= bins[i]:\n                priority_score = item / bins[i] * (max_bin_capacity - bins[i]) * (1 + remaining_capacity_ratio)\n                \n                if bins[i] < 0.4 * max_bin_capacity:\n                    priority_score *= 1.5\n                elif bins[i] > 0.6 * max_bin_capacity:\n                    priority_score *= 0.8\n                \n                priorities[i] = priority_score\n            else:\n                overflow_factor = (item - bins[i]) / total_bins\n                \n                priority_score = overflow_factor * (max_bin_capacity / (bins[i] + 1)) * remaining_capacity_ratio\n                \n                if overflow_factor > 0.2:\n                    priority_score *= 2\n                elif overflow_factor < 0.1:\n                    priority_score *= 0.7\n                \n                priorities[i] = priority_score\n    \n    return priorities\n\n", "score": -2067.0}