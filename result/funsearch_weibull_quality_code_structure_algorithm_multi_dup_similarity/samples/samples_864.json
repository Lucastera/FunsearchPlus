{"sample_order": 864, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Performs a complex operation on a matrix.\"\"\"\n    \n    # Check if matrix is empty\n    if matrix.size == 0:\n        raise ValueError(\"Input matrix must not be empty.\")\n    \n    # Initialize result matrix with zeros\n    result = np.zeros_like(matrix)\n    \n    # Iterate over each element in the matrix\n    for i in range(matrix.shape[0]):\n        for j in range(matrix.shape[1]):\n            # Perform complex operation on each element\n            if matrix[i, j] % 2 == 0:\n                result[i, j] = matrix[i, j] * 2\n            else:\n                result[i, j] = matrix[i, j] + 1\n    \n    return result\n\n", "score": null}