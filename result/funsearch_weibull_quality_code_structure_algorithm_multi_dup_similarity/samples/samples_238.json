{"sample_order": 238, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that processes input data based on a threshold.\"\"\"\n    \n    processed_data = np.zeros_like(data)  # Initialize array to store processed data\n    \n    for i in range(len(data)):\n        if data[i] < threshold:\n            processed_data[i] = data[i] * 2  # Process data by multiplying by 2\n        else:\n            processed_data[i] = data[i] / 2  # Process data by dividing by 2\n    \n    # Additional processing based on processed data\n    for i in range(1, len(data) - 1):\n        if processed_data[i-1] > processed_data[i] and processed_data[i+1] > processed_data[i]:\n            processed_data[i] += 10  # Increase processed data by 10 if surrounding values are greater\n    \n    return processed_data\n\n", "score": null}