{"sample_order": 279, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_score(val: float) -> float:\n        if val < target / 2:\n            return val / target * 2  \n        elif val < target:\n            return val / target  \n        else:\n            return np.log(val / target)  \n\n    result = np.zeros_like(data)  \n\n    for i in range(len(data)):\n        if data[i] > target:\n            result[i] = calculate_score(data[i])  \n        else:\n            for j in range(int(target // data[i])):\n                result[i] += np.log(data[i] / target)  \n\n    return result\n\n", "score": null}