{"sample_order": 302, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        priority = 1\n        \n        if item <= bin_capacity / 2:\n            priority = 1 + item / bin_capacity * 2\n        elif item <= bin_capacity:\n            priority = 1 + item / bin_capacity\n        else:\n            remaining_item = item - bin_capacity\n            priority = 1 + np.log(item / bin_capacity)\n            \n            while remaining_item > 0:\n                if remaining_item > bin_capacity:\n                    priority += np.sqrt(remaining_item / bin_capacity)\n                    remaining_item -= bin_capacity\n                else:\n                    priority += remaining_item / bin_capacity\n                    remaining_item = 0\n        \n        return priority\n    \n    def adjust_priorities(priorities: np.ndarray):\n        max_priority = max(priorities)\n        min_priority = min(priorities)\n        \n        for i in range(len(priorities)):\n            if priorities[i] == max_priority:\n                priorities[i] *= 1.5  # Increase priority of bin with highest priority\n            elif priorities[i] == min_priority:\n                priorities[i] *= 0.5  # Decrease priority of bin with lowest priority\n        \n        return priorities\n\n    item_arr = np.full_like(bins, item)\n    remaining_space = bins - item_arr\n\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n\n    priorities = adjust_priorities(priorities)\n\n    return priorities\n\n", "score": -2068.2}