{"sample_order": 271, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1` with additional logic.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    # If item exceeds total capacity, prioritize the bin with maximum capacity\n    total_capacity = np.sum(bins)\n    if item > total_capacity:\n        priorities[np.argmax(bins)] = 1.0\n        return priorities\n    \n    remaining_bins = bins.copy()\n    \n    # Distribute priority based on remaining capacity in each bin\n    for i in range(len(bins)):\n        if remaining_bins[i] >= item:\n            priorities[i] = item / remaining_bins[i]\n            break\n        else:\n            priorities[i] = remaining_bins[i] / item\n            item -= remaining_bins[i]\n            remaining_bins[i] = 0\n            if item == 0:\n                break\n    \n    # Adjust priorities based on specific conditions\n    min_capacity_bin = np.argmin(bins)\n    max_capacity_bin = np.argmax(bins)\n    \n    # Boost priority of smallest bin if it has low priority\n    if priorities[min_capacity_bin] < 0.2:\n        priorities[min_capacity_bin] = 0.5 * priorities[min_capacity_bin]\n    \n    # Reduce priority of largest bin if it has high priority\n    if priorities[max_capacity_bin] > 0.8:\n        priorities[max_capacity_bin] = 0.9 * priorities[max_capacity_bin]\n    \n    # Normalize priorities to ensure sum is 1\n    priorities /= np.sum(priorities)\n    \n    return priorities\n\n", "score": null}