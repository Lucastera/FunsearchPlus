{"sample_order": 43, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = []\n\n    for bin_capacity in bins:\n        if bin_capacity >= item:  # If bin can accommodate the item, prioritize it\n            priorities.append(1.0)\n        else:\n            remaining_capacity = bin_capacity - item\n            if remaining_capacity > 0:  # If item can partially fit into the bin\n                priority = 1 / remaining_capacity\n                priorities.append(priority)\n            else:  # If bin is full and cannot fit the item\n                priorities.append(0.0)\n\n    return np.array(priorities)\n\n", "score": -2071.8}