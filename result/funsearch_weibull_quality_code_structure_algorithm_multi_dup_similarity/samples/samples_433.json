{"sample_order": 433, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)  # Initialize priorities array\n\n    if item < 0:\n        raise ValueError(\"Item size cannot be negative\")\n\n    max_bin_capacity = np.max(bins)\n    min_bin_capacity = np.min(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] <= 0:\n            priorities[i] = np.nan  # Handle zero capacity bins\n        else:\n            remaining_capacity = max_bin_capacity - bins[i]\n            overflow = max(0, item - bins[i])  # Calculate overflow with a minimum value of 0\n\n            priority_score = overflow * (max_bin_capacity / (bins[i] + remaining_capacity))  # Weighted overflow consideration\n\n            if overflow > 0.5 * item:\n                priority_score *= 2  # Adjust priority score for large overflow\n            elif overflow < 0.2 * item:\n                priority_score *= 0.5  # Adjust priority score for small overflow\n\n            if bins[i] == min_bin_capacity:\n                priority_score = np.inf  # Mark bins with minimum capacity as not feasible\n\n            priorities[i] = priority_score\n\n    return priorities\n\n", "score": -2071.8}