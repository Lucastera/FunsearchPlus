{"sample_order": 304, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    def calculate_priority(item: float, bin_capacity: float) -> float:\n        priority = 1\n        \n        if item <= 0.25 * bin_capacity:\n            priority = np.exp(item / bin_capacity)\n        elif item <= 0.5 * bin_capacity:\n            priority = 1 + item / bin_capacity * np.log(item / bin_capacity)\n        elif item <= 0.75 * bin_capacity:\n            priority = 2 + np.sqrt(item / bin_capacity)\n        else:\n            priority = 3 + item / bin_capacity\n        \n        return priority\n    \n    item_arr = np.full_like(bins, item)\n    remaining_space = bins - item_arr\n\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        priorities[i] = calculate_priority(item, bins[i])\n\n    priorities *= np.linspace(1, 2, len(bins))  # Non-linear weighting\n\n    return priorities\n\n", "score": null}