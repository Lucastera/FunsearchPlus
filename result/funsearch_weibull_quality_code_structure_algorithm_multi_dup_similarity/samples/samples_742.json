{"sample_order": 742, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that performs multiple operations.\"\"\"\n    \n    result = np.zeros_like(data)\n    \n    # Perform initial data processing\n    processed_data = data * 2\n    \n    # Iterate over processed data\n    for i in range(len(processed_data)):\n        if processed_data[i] < 0:\n            result[i] = -processed_data[i]\n        else:\n            result[i] = processed_data[i] + 10\n        \n        # Adjust result based on index\n        if i % 2 == 0:\n            result[i] *= 1.5\n        \n    # Final adjustment based on total result\n    total_result = np.sum(result)\n    \n    if total_result > 1000:\n        result *= 0.5\n    elif total_result < 500:\n        result *= 1.5\n    \n    return result\n\n", "score": null}