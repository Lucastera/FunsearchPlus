{"sample_order": 43, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros(len(bins))\n    remaining_space = bins - item\n    sorted_indices = np.argsort(remaining_space)\n    \n    for i in range(len(bins)):\n        priority = 0\n        \n        if remaining_space[sorted_indices[i]] >= 0:\n            priority = 1 / (1 + i)  # Priority based on remaining space\n            if bins[sorted_indices[i]] < item * 2:\n                priority *= 2  # Double the priority if bin capacity is less than twice the item size\n        else:\n            priority = -1  # Negative priority for bins that cannot accommodate the item\n        \n        # Adjust priority based on index position\n        if i % 2 == 0:\n            priority += 0.5\n        else:\n            priority -= 0.5\n        \n        priorities[sorted_indices[i]] = priority\n    \n    return priorities\n\n", "score": -212.0}