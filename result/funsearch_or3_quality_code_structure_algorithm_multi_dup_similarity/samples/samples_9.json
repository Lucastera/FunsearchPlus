{"sample_order": 9, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of priority function.\"\"\"\n    \n    n = len(bins)\n    priority_scores = np.zeros(n)\n    \n    for i in range(n):\n        remaining_capacity = bins[i]\n        bins_copy = np.copy(bins)\n        bins_copy[i] += item\n        bins_copy = np.sort(bins_copy)\n        \n        best_score = 0\n        \n        for j in range(n):\n            if bins_copy[j] >= item:\n                score = 0\n                for k in range(n):\n                    if k != j:\n                        score += bins_copy[k] / bins_copy[j]\n                \n                if score > best_score:\n                    best_score = score\n        \n        priority_scores[i] = best_score\n    \n    return priority_scores\n\n", "score": null}