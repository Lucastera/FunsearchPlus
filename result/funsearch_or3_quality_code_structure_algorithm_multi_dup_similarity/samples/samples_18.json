{"sample_order": 18, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if not isinstance(item, (int, float)):\n        raise ValueError(\"Item must be a number.\")\n    if not isinstance(bins, np.ndarray):\n        raise ValueError(\"Bins must be a numpy array.\")\n\n    if item <= 0:\n        raise ValueError(\"Item size must be positive.\")\n\n    if not all(bins > 0):\n        raise ValueError(\"Bin capacities must be positive.\")\n\n    priorities = np.zeros_like(bins)\n    \n    # Calculate priority based on remaining capacity ratio\n    ratios = (bins - item) / bins\n    priorities = 1 / ratios\n\n    return priorities\n\n", "score": null}