{"sample_order": 50, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"More advanced version of priority function.\"\"\"\n\n    if len(bins) == 0:\n        return np.array([])\n\n    priorities = np.zeros(len(bins))\n    remaining_capacity = np.copy(bins)\n\n    for i in range(len(bins)):\n        if remaining_capacity[i] >= item:\n            priorities[i] = 1.0 / (1 + i)  # Higher priority for bins with lower index\n            remaining_capacity[i] -= item\n            break\n\n    if np.sum(remaining_capacity) == 0:\n        return priorities\n\n    ratios = item / remaining_capacity\n    sorted_indices = np.argsort(ratios)\n\n    for i in sorted_indices:\n        if remaining_capacity[i] >= item:\n            priorities[i] = 1.0 / (1 + i)  # Higher priority for bins with lower index\n            break\n\n    return priorities\n\n", "score": null}