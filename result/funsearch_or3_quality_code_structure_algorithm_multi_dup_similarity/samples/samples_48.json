{"sample_order": 48, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        remaining_space = bins[i] - item\n        \n        if remaining_space >= 0:\n            priorities[i] = 1.0\n        elif item == 0:\n            priorities[i] = 0.0\n        else:\n            max_possible_item = bins[i] * 0.9 # Assume 90% of bin capacity is a good threshold\n            if item <= max_possible_item:\n                priorities[i] = 0.5 + (remaining_space / bins[i]) + (item / bins[i]) * 0.5\n            else:\n                priorities[i] = 0.1 + (remaining_space / bins[i])\n\n    return priorities\n\n", "score": -212.75}