{"sample_order": 16, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more advanced version of `priority_v0`, `priority_v1`, and `priority_v2`.\"\"\"\n    \n    def calculate_priority(bin_capacity: float, remaining_capacity: float) -> float:\n        if remaining_capacity > 0:\n            return 1 / remaining_capacity  # Prioritize based on the inverse of remaining capacity\n        else:\n            return np.inf  # If capacity is insufficient, prioritize with infinity\n    \n    priorities = np.zeros_like(bins)  # Initialize priorities array\n    \n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity >= item:\n            priorities[i] = 0  # If bin can accommodate the item, prioritize it with 0\n        else:\n            remaining_capacity = bin_capacity - item  # Calculate remaining capacity after adding the item\n            priorities[i] = calculate_priority(bin_capacity, remaining_capacity)\n    \n    return priorities\n\n", "score": -212.75}