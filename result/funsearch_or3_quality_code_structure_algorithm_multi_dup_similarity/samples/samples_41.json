{"sample_order": 41, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n\n    if item > total_capacity:\n        return priorities\n\n    remaining_space = bins.copy()\n    sorted_bins = np.argsort(remaining_space)[::-1]  # Sort bins in descending order of capacity\n\n    for i in sorted_bins:\n        if remaining_space[i] >= item:\n            priorities[i] = 1.0\n            break\n        else:\n            if remaining_space[i] > 0:\n                space_ratio = remaining_space[i] / item\n                threshold = 0.6  # Threshold for high priority decision\n\n                if space_ratio > threshold:\n                    priorities[i] = 0.8 + 0.2 * space_ratio\n                else:\n                    priorities[i] = 0.5 * space_ratio\n                    \n                if priorities[i] > 0.7:\n                    # Check if other bins can accommodate the remaining item with higher priority\n                    for j in range(i + 1, len(bins)):\n                        if remaining_space[j] >= item - remaining_space[i]:\n                            priorities[j] = 0.9\n                            remaining_space[j] -= (item - remaining_space[i])\n                            break\n\n                item -= remaining_space[i]\n                remaining_space[i] = 0\n\n    return priorities\n\n", "score": -500.0}