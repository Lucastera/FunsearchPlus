{"sample_order": 29, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        return priorities\n\n    remaining_space = bins.copy()\n    for i in range(len(bins)):\n        if remaining_space[i] >= item:\n            priorities[i] = 1.0\n            break\n        else:\n            if remaining_space[i] != 0:\n                priorities[i] = remaining_space[i] / item\n                item -= remaining_space[i]\n                remaining_space[i] = 0\n            else:\n                remain_sum = sum(remaining_space[i+1:])\n                if remain_sum >= item:\n                    priorities[i] = item / remain_sum\n                    break\n                else:\n                    priorities[i] = 0.0\n                    item -= remain_sum\n\n    return priorities\n\n", "score": -212.75}