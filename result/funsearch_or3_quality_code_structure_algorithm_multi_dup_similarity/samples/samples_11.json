{"sample_order": 11, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        remaining_capacity = max_capacity - bins[i]\n        if remaining_capacity >= item:\n            priorities[i] = item / bins[i]\n        elif remaining_capacity > 0:\n            priorities[i] = item / remaining_capacity\n        else:\n            priorities[i] = np.inf\n    return priorities\n\n", "score": null}