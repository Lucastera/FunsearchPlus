{"sample_order": 6, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    # Calculate initial priority based on item size\n    base_priority = np.log(item)\n    \n    # Adjust priority based on bin capacities\n    for idx, bin_capacity in enumerate(bins):\n        if bin_capacity < item:\n            priorities[idx] = base_priority  # Set base priority if bin cannot accommodate the item\n        else:\n            remaining_capacity = bin_capacity - item\n            adjustment = np.log(1 + remaining_capacity)  # Adjust priority based on remaining capacity\n            priorities[idx] = base_priority + adjustment\n    \n    return priorities\n\n", "score": -377.55}