{"sample_order": 14, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 0\n        else:\n            remaining_capacity = bins[i] - item\n            if remaining_capacity > 0:\n                priorities[i] = 1 / remaining_capacity\n            else:\n                priorities[i] = np.inf\n    \n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    \n    for i in range(len(bins)):\n        if priorities[i] == np.inf:\n            priorities[i] = max_priority\n        elif priorities[i] == 0:\n            priorities[i] = min_priority\n        else:\n            priorities[i] = priorities[i] + item / bins[i]  # Consider ratio of item size to bin capacity\n            \n    return priorities\n\n", "score": -212.75}