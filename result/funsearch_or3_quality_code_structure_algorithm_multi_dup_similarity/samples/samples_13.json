{"sample_order": 13, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more improved version of `priority_v0`.\"\"\"\n\n    # Initialize an array to store priorities\n    priorities = np.zeros_like(bins, dtype=float)\n\n    # Iterate through each bin\n    for i in range(len(bins)):\n        bin_capacity = bins[i]\n\n        # Calculate the remaining capacity after adding the item\n        remaining_capacity = bin_capacity - item\n\n        # If adding the item exceeds the capacity, set priority to -1\n        if remaining_capacity < 0:\n            priorities[i] = -1\n        else:\n            # Calculate the ratio of remaining capacity to bin capacity\n            ratio = remaining_capacity / bin_capacity\n\n            # If the ratio is below a threshold, prioritize this bin\n            if ratio < 0.2:\n                priorities[i] = 1 / (1 + np.exp(-5*ratio))\n            else:\n                priorities[i] = 0\n\n    return priorities\n\n", "score": null}