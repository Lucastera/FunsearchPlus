{"sample_order": 19, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex function that processes input data and returns output.\"\"\"\n    \n    output_data = np.zeros_like(input_data)\n    \n    for idx, data in enumerate(input_data):\n        if data < 0:\n            output_data[idx] = data ** 2\n        elif data >= 0 and data < 10:\n            output_data[idx] = data * 3\n        else:\n            output_data[idx] = data / 2\n            \n    smoothed_data = np.convolve(output_data, np.ones(3) / 3, mode='same')\n    \n    for idx, smoothed_value in enumerate(smoothed_data):\n        if smoothed_value > 5:\n            smoothed_data[idx] = 5\n        elif smoothed_value < 1:\n            smoothed_data[idx] = 1\n            \n    return smoothed_data\n\n", "score": null}