{"sample_order": 42, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1` with more complex logic.\"\"\"\n    priorities = np.zeros(len(bins))\n    \n    remaining_space = bins - item\n    sorted_indices = np.argsort(remaining_space)\n    total_remaining_space = np.sum(remaining_space)\n    \n    for i in range(len(bins)):\n        priority = 0\n        \n        if remaining_space[sorted_indices[i]] >= 0:\n            if remaining_space[sorted_indices[i]] > total_remaining_space * 0.1:\n                priority = 1 / (1 + i)\n            else:\n                priority = 0.5 / (1 + i)\n        else:\n            priority = -1\n        \n        priorities[sorted_indices[i]] = priority\n    \n    return priorities\n\n", "score": -212.0}