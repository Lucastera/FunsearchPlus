{"sample_order": 39, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        return priorities\n\n    remaining_space = bins.copy()\n    items_left = item\n    sorted_bins = np.argsort(remaining_space)[::-1]\n\n    for i in sorted_bins:\n        if remaining_space[i] >= items_left:\n            priorities[i] = 1.0\n            break\n        else:\n            if remaining_space[i] > 0:\n                space_ratio = remaining_space[i] / items_left\n                if space_ratio > 0.75:\n                    priorities[i] = 0.9\n                elif space_ratio > 0.5:\n                    priorities[i] = 0.7\n                elif space_ratio > 0.25:\n                    priorities[i] = 0.5\n                else:\n                    priorities[i] = 0.3\n                \n                items_left -= remaining_space[i]\n                remaining_space[i] = 0\n                \n    return priorities\n\n", "score": -500.0}