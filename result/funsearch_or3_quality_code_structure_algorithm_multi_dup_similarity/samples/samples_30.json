{"sample_order": 30, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priority_scores = np.zeros(len(bins))\n    \n    for i in range(len(bins)):\n        remaining_capacity = bins[i] - item\n        if remaining_capacity >= 0:\n            priority_scores[i] = 1 / (1 + np.exp(-remaining_capacity))\n        else:\n            priority_scores[i] = -np.inf\n    \n    max_score = np.max(priority_scores)\n    min_score = np.min(priority_scores)\n    \n    normalized_scores = (priority_scores - min_score) / (max_score - min_score)\n    \n    return normalized_scores\n\n", "score": -292.35}