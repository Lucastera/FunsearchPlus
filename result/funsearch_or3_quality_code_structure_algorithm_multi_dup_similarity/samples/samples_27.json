{"sample_order": 27, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    total_capacity = np.sum(bins)\n    \n    if item > total_capacity:\n        return priorities\n\n    remaining_space = bins.copy()\n    item_count = len(bins)  # Number of bins to consider\n    total_remaining_items = item_count\n    distribution_flag = False\n\n    for i in range(len(bins)):\n        if remaining_space[i] >= item:\n            priorities[i] = 1.0\n            distribution_flag = True\n            total_remaining_items -= 1\n            break\n        else:\n            priorities[i] = remaining_space[i] / item\n            item -= remaining_space[i]\n            remaining_space[i] = 0\n            total_remaining_items -= 1\n    \n    if not distribution_flag:\n        remaining_item_capacity = total_capacity - np.sum(bins[:item_count])\n        remaining_item_count = item_count\n        for i in range(len(bins)):\n            if remaining_item_capacity <= 0:\n                break\n            allocated_capacity = min(remaining_item_capacity, item / remaining_item_count)\n            priorities[i] += allocated_capacity / item\n            remaining_item_capacity -= allocated_capacity\n            remaining_item_count -= 1\n\n    return priorities\n\n", "score": -212.75}