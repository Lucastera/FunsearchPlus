{"sample_order": 8, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    total_capacity = np.sum(bins)\n    normalized_item = item / total_capacity\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        remaining_capacity = total_capacity - np.sum(bins[:i])\n        if remaining_capacity == 0:\n            priorities[i:] = np.inf\n        else:\n            load_factor = bins[i] / remaining_capacity\n            priority_score = np.abs(load_factor - normalized_item)\n            priorities[i] = priority_score\n            \n    return priorities\n\n", "score": -212.75}