{"sample_order": 20, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    \n    # Calculate the remaining capacity in each bin after adding the item\n    remaining_capacity = bins - item\n    \n    # Calculate the utilization ratio of each bin\n    utilization_ratio = (bins - remaining_capacity) / bins\n    \n    # Calculate the priority based on utilization ratio and remaining capacity\n    priorities = []\n    for i in range(len(bins)):\n        if remaining_capacity[i] > 0:\n            priority = utilization_ratio[i] / remaining_capacity[i]\n        else:\n            priority = float('inf')\n        priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -212.0}