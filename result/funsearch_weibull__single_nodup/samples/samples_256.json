{"sample_order": 256, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] == 0:\n            priorities[i] = 0.0\n        else:\n            priority = 0\n            for j in range(1, 6):\n                if item >= bins[i] * (j/10) and item < bins[i] * ((j+1)/10):\n                    priority = j/10\n                    break\n            priorities[i] = priority\n    \n    return priorities\n\n", "score": -2071.8}