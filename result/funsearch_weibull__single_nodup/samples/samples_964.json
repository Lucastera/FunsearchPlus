{"sample_order": 964, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:\n            priorities[i] = 1.0\n        else:\n            remaining_capacity = bin_capacity - item\n            if remaining_capacity > 0:\n                priority = 1 / remaining_capacity\n                if priority < 0.4:\n                    priorities[i] = 0.9\n                elif priority >= 0.4 and priority < 0.7:\n                    priorities[i] = 0.7\n                elif priority >= 0.7 and priority < 1.0:\n                    priorities[i] = 0.5\n                else:\n                    if item > bin_capacity * 2:\n                        priorities[i] = 0.2\n                    else:\n                        priorities[i] = 0.3\n            else:\n                if item >= bin_capacity * 2:\n                    priorities[i] = 0.1\n                else:\n                    priorities[i] = 0.0\n                    \n                if priorities[i] == 0.0:\n                    for j in range(i+1, len(bins)):\n                        if bins[j] >= item:\n                            priorities[j] = 0.6\n    \n    return priorities\n\n", "score": -2071.8}