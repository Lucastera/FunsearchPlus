{"sample_order": 86, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item > bins[i]:\n            priorities[i] = 0\n        else:\n            remaining_space = bins[i] - item\n            if remaining_space < bins[i] * 0.1:\n                priority_score = 0.8\n            elif remaining_space < bins[i] * 0.3:\n                priority_score = 0.6\n            else:\n                priority_score = 1 / (1 + remaining_space)\n            priorities[i] = priority_score\n            \n    return priorities\n\n", "score": -2071.8}