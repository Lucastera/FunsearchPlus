{"sample_order": 966, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            if bins[i] == 0:\n                priorities[i] = 0.0\n            elif bins[i] == item:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = (item + bins[i]) / (2 * bins[i])\n        else:\n            priority_diff = (item - bins[i]) / item\n            if priority_diff < 0.1:\n                priorities[i] = 0.2\n            elif priority_diff >= 0.1 and priority_diff < 0.3:\n                priorities[i] = 0.4\n            elif priority_diff >= 0.3 and priority_diff < 0.5:\n                priorities[i] = 0.6\n            elif priority_diff >= 0.5 and priority_diff < 0.7:\n                priorities[i] = 0.8\n            else:\n                priorities[i] = 1.0\n                \n    max_priority = np.max(priorities)\n    for j in range(len(priorities)):\n        if priorities[j] == max_priority:\n            priorities[j] = 1.0\n        else:\n            priorities[j] = 0.0\n        \n    final_priorities = np.zeros_like(priorities)\n    for k in range(len(priorities)):\n        if priorities[k] >= 0.5:\n            final_priorities[k] = priorities[k] * 1.5\n        else:\n            final_priorities[k] = priorities[k] * 0.5\n            \n    return final_priorities * 2.0 if np.sum(final_priorities) > 2.0 else final_priorities\n\n", "score": null}