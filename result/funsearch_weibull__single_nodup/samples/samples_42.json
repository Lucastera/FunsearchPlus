{"sample_order": 42, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Advanced version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i]\n        elif bins[i] >= item / 2:\n            priorities[i] = 0.5 * item / bins[i]\n        else:\n            count = 0\n            remaining_item = item\n            while remaining_item > bins[i] / 2:\n                remaining_item -= bins[i] / 2\n                count += 1\n            if remaining_item == 0:\n                priorities[i] = count\n            elif remaining_item <= bins[i] / 4:\n                priorities[i] = count + remaining_item / (2 * bins[i])\n            else:\n                priorities[i] = count + remaining_item / bins[i]\n    \n    return priorities\n\n", "score": -2069.2}