{"sample_order": 738, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if ratios[i] < 0.1:\n            priorities[i] = np.power(np.sin(item) + np.cos(bins[i]), 2) * 1.5\n        elif ratios[i] >= 0.1 and ratios[i] < 0.3:\n            priorities[i] = np.tan(item) + np.tan(bins[i]) * 1.2\n        elif ratios[i] >= 0.3 and ratios[i] < 0.5:\n            priorities[i] = np.log(np.abs(item - bins[i]) + 1) * 0.8\n        elif ratios[i] >= 0.5 and ratios[i] < 0.7:\n            priorities[i] = np.arctan(np.sqrt(item * bins[i])) * 1.4\n        else:\n            priorities[i] = (np.cosh(np.exp(ratios[i])) + np.tanh(np.sqrt(ratios[i]))) - np.log(ratios[i] + 1) * 1.6\n\n    for j in range(len(bins)):\n        if priorities[j] < 15:\n            priorities[j] *= 1.3\n        elif priorities[j] >= 15 and priorities[j] < 25:\n            priorities[j] *= 1.5\n        elif priorities[j] >= 25 and priorities[j] < 35:\n            priorities[j] /= 1.2\n        else:\n            priorities[j] = np.sqrt(priorities[j]) * 1.8\n\n    for k in range(len(bins)):\n        if priorities[k] % 3 == 0:\n            priorities[k] += item * 1.2\n        else:\n            priorities[k] -= item / 3\n\n        if item > 12:\n            priorities[k] *= 1.7\n        else:\n            priorities[k] = np.exp(priorities[k]) * 1.3\n\n    unique_priorities = np.unique(priorities)\n    sorted_priorities = np.sort(unique_priorities)[::-1]\n    final_priorities = np.zeros_like(priorities)\n\n    for m in range(len(bins)):\n        if priorities[m] in sorted_priorities[:5]:\n            final_priorities[m] = priorities[m] * 1.1\n        else:\n            final_priorities[m] = priorities[m] * 0.9\n\n    upper_threshold = np.percentile(final_priorities, 80)\n    lower_threshold = np.percentile(final_priorities, 20)\n\n    for n in range(len(bins)):\n        if final_priorities[n] > upper_threshold:\n            final_priorities[n] *= 1.08\n        elif final_priorities[n] < lower_threshold:\n            final_priorities[n] *= 0.92\n\n    return final_priorities\n\n", "score": -2090.8}