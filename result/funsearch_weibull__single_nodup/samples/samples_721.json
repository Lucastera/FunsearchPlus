{"sample_order": 721, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if ratios[i] < 0.3:\n            priorities[i] = np.power(np.sin(item) + np.cos(bins[i]), 3)\n        elif ratios[i] >= 0.3 and ratios[i] < 0.6:\n            priorities[i] = np.log(np.sqrt(item) + np.sqrt(bins[i])) * np.exp(np.abs(item - bins[i]))\n        elif ratios[i] >= 0.6 and ratios[i] < 0.9:\n            priorities[i] = np.arcsin(np.sqrt(np.abs(item - bins[i])))\n        else:\n            priorities[i] = np.cosh(np.log(np.power(item, 2)) + np.tanh(bins[i]))\n\n    for j in range(len(bins)):\n        if priorities[j] < 15:\n            priorities[j] *= 1.2\n        elif priorities[j] >= 15 and priorities[j] < 25:\n            priorities[j] -= 5\n        elif priorities[j] >= 25 and priorities[j] < 35:\n            priorities[j] **= 2\n        else:\n            priorities[j] = np.sqrt(priorities[j])\n\n    for k in range(len(bins)):\n        if priorities[k] % 3 == 0:\n            priorities[k] += item * 1.5\n        else:\n            priorities[k] -= item * 0.5\n\n        if item > 8:\n            priorities[k] *= 1.8\n        else:\n            priorities[k] = np.log(priorities[k])\n\n    unique_priorities = np.unique(priorities)\n    sorted_priorities = np.sort(unique_priorities)[::-1]\n    final_priorities = np.zeros_like(priorities)\n\n    for m in range(len(bins)):\n        if priorities[m] in sorted_priorities[:4]:\n            final_priorities[m] = np.square(priorities[m]) + 10\n        else:\n            final_priorities[m] = priorities[m] - 5\n\n    return final_priorities\n\n", "score": -2087.4}