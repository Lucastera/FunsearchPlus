{"sample_order": 791, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n        \n        # Additional complex logic\n        if item > 1.8 * bins[i]:\n            priorities[i] *= 1.3\n        elif item > 1.4 * bins[i]:\n            priorities[i] *= 1.1\n        elif item > 1.1 * bins[i]:\n            priorities[i] *= 1.05\n        \n        if priorities[i] < 0.7:\n            priorities[i] = 0.7\n        elif priorities[i] > 1.4 and item < 2.5 * bins[i]:\n                priorities[i] = 1.4\n        elif item >= 2.5 * bins[i] and item < 3.5 * bins[i]:\n            priorities[i] = 2.0\n        elif item >= 3.5 * bins[i]:\n            priorities[i] = 2.5\n        \n    return priorities\n\n", "score": -2069.2}