{"sample_order": 610, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if ratios[i] < 0.3:\n            priorities[i] = np.power(np.log(item + 1) + np.log(bins[i] + 1), 2)\n        elif ratios[i] >= 0.3 and ratios[i] < 0.6:\n            priorities[i] = np.tan(np.sqrt(item)) + np.tan(np.sqrt(bins[i]))\n        elif ratios[i] >= 0.6 and ratios[i] < 0.8:\n            priorities[i] = np.exp(item) + np.exp(bins[i])\n        else:\n            priorities[i] = np.arctan(item) + np.arctan(bins[i])\n\n    for j in range(len(bins)):\n        if priorities[j] < 30:\n            priorities[j] *= 1.5\n        elif priorities[j] >= 30 and priorities[j] < 50:\n            priorities[j] *= 2\n        elif priorities[j] >= 50 and priorities[j] < 70:\n            priorities[j] /= 2\n        else:\n            priorities[j] = np.sqrt(priorities[j])\n\n    for k in range(len(bins)):\n        if priorities[k] % 2 == 0:\n            priorities[k] += item\n        else:\n            priorities[k] -= item / 2\n\n    return priorities\n\n", "score": -2132.2}