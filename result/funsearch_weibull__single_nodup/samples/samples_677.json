{"sample_order": 677, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] < item:\n            remaining_space = item - bins[i]\n            if remaining_space < 0.2 * item:\n                priorities[i] = 0.3\n            elif remaining_space >= 0.2 * item and remaining_space < 0.4 * item:\n                priorities[i] = 0.5\n            elif remaining_space >= 0.4 * item and remaining_space < 0.6 * item:\n                priorities[i] = 0.7\n            else:\n                priorities[i] = 0.9\n        else:\n            ratio = item / bins[i]\n            if ratio < 0.25:\n                priorities[i] = 0.2\n            elif ratio >= 0.25 and ratio < 0.5:\n                priorities[i] = 0.4\n            elif ratio >= 0.5 and ratio < 0.75:\n                priorities[i] = 0.6\n            else:\n                priorities[i] = 0.8\n    \n    return priorities\n\n", "score": -2071.8}