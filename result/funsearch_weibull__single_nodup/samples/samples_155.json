{"sample_order": 155, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if ratios[i] < 0.1:\n            priorities[i] = np.tanh(ratios[i] * np.pi)\n        elif ratios[i] >= 0.1 and ratios[i] < 0.3:\n            priorities[i] = np.arctan(ratios[i])\n        elif ratios[i] >= 0.3 and ratios[i] < 0.5:\n            priorities[i] = 1 / np.sqrt(ratios[i] + 1)\n        elif ratios[i] >= 0.5 and ratios[i] < 0.7:\n            priorities[i] = np.cbrt(ratios[i])\n        elif ratios[i] >= 0.7 and ratios[i] < 0.9:\n            priorities[i] = np.absolute(np.cos(ratios[i]))\n        else:\n            priorities[i] = np.arccos(ratios[i])\n    \n    return priorities\n\n", "score": -2071.8}