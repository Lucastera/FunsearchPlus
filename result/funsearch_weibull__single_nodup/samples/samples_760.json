{"sample_order": 760, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:\n            priorities[i] = 1.0\n        else:\n            remaining_capacity = bin_capacity - item\n            if remaining_capacity > 0:\n                priority = 1 / remaining_capacity\n                if priority > 1.5:\n                    priorities[i] = 0.9\n                elif priority > 1:\n                    priorities[i] = 0.7\n                else:\n                    priorities[i] = 0.5\n            else:\n                max_capacity_bin_index = np.argmax(bins)\n                max_capacity_bin_priority = priorities[max_capacity_bin_index]\n                \n                if max_capacity_bin_priority < 0.6:\n                    for j in range(len(priorities)):\n                        if priorities[j] < 0.6:\n                            priorities[j] = priorities[j] + 0.1\n                else:\n                    for j in range(len(priorities)):\n                        priorities[j] = priorities[j] - 0.1 if priorities[j] > 0 else 0.1\n                        \n    return priorities\n\n", "score": -2071.8}