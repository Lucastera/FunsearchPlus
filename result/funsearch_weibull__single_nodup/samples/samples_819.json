{"sample_order": 819, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Even more sophisticated version of the priority function.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            if bins[i] == 0:\n                priorities[i] = 0.0\n            elif bins[i] == item:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = (item + bins[i]) / (2 * bins[i])\n        else:\n            ratio = item / bins[i]\n            \n            if ratio < 0.1:\n                priorities[i] = 0.1\n            elif ratio >= 0.1 and ratio < 0.2:\n                priorities[i] = 0.2\n            elif ratio >= 0.2 and ratio < 0.3:\n                priorities[i] = 0.3\n            elif ratio >= 0.3 and ratio < 0.4:\n                priorities[i] = 0.4\n            elif ratio >= 0.4 and ratio < 0.5:\n                priorities[i] = 0.5\n            else:\n                priority = 1.0\n                for j in range(1, int(ratio) + 1):\n                    priority -= 0.1\n                priorities[i] = priority\n    \n    return priorities\n\n", "score": -2069.2}