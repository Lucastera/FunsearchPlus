{"sample_order": 654, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        ratio = item / bins[i]\n\n        if ratio < 0.5:\n            priorities[i] = 0.5\n        elif ratio >= 0.5 and ratio < 1.0:\n            priorities[i] = (1 + ratio) / 2\n        elif ratio >= 1.0 and ratio < 1.5:\n            priorities[i] = (1 + ratio) / 2.5\n        elif ratio >= 1.5 and ratio < 2.0:\n            priorities[i] = (1 + ratio) / 3\n        elif ratio >= 2.0 and ratio < 3.0:\n            priorities[i] = (1 + ratio) / 4\n        else:\n            priorities[i] = 1.0\n\n    return priorities\n\n", "score": -2071.8}