{"sample_order": 14, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    if item <= 0:\n        raise ValueError(\"Item size must be greater than 0.\")\n    \n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] < item:\n            priorities[i] = -1.0  # Not enough capacity, lowest priority\n        else:\n            remaining_capacity = bins[i] - item\n            priorities[i] = 1.0 / (1.0 + remaining_capacity)  # Higher priority for more remaining capacity\n    \n    return priorities\n\n", "score": -2069.2}