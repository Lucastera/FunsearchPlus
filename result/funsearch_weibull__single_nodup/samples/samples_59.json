{"sample_order": 59, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if item <= bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = bins[i] / item\n\n        # Handling special cases\n        if item % 2 == 0:\n            priorities[i] += 0.1\n        else:\n            priorities[i] -= 0.1\n\n        if bins[i] < 10:\n            priorities[i] *= 1.5\n        elif bins[i] > 20:\n            priorities[i] *= 0.5\n        else:\n            priorities[i] *= 1.0\n\n    return priorities\n\n", "score": -2070.4}