{"sample_order": 942, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item <= bins[i]:\n            if bins[i] % item == 0:\n                priorities[i] = item / bins[i] + 0.5\n            else:\n                priorities[i] = item / bins[i]\n            if item > 1.5 * bins[i]:\n                priorities[i] *= 1.5\n            elif item > 1.2 * bins[i]:\n                priorities[i] *= 1.3\n            else:\n                priorities[i] *= 1.1\n        else:\n            diff = item - bins[i]\n            if diff > bins[i] / 2:\n                priorities[i] = bins[i] / item\n            else:\n                priorities[i] = (bins[i] + diff) / item\n            if item > 2 * bins[i]:\n                priorities[i] *= 1.7\n            elif item > 1.7 * bins[i]:\n                priorities[i] *= 1.4\n            elif item > 1.3 * bins[i]:\n                priorities[i] *= 1.2\n                \n            if item > bins[i] * 2:\n                priorities[i] += 0.3\n            if item < bins[i] * 0.5:\n                priorities[i] -= 0.1\n            elif item < bins[i] * 0.8:\n                priorities[i] -= 0.05\n                \n            if priorities[i] > 1.0:\n                priorities[i] = 1.0\n            elif priorities[i] < 0.5:\n                priorities[i] = 0.5\n    \n    return priorities\n\n", "score": -2068.2}