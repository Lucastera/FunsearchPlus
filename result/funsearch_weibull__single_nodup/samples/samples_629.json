{"sample_order": 629, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] == 0:\n            priorities[i] = 0\n        elif item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n            \n        if item > 2 * bins[i]:\n            priorities[i] *= 1.5\n        elif item > 1.5 * bins[i]:\n            priorities[i] *= 1.2\n        elif item > 1.2 * bins[i]:\n            priorities[i] *= 1.1\n        \n        if priorities[i] > 0.8:\n            priorities[i] += 0.2\n        elif priorities[i] > 0.5:\n            priorities[i] += 0.15\n        elif priorities[i] > 0.3:\n            priorities[i] += 0.1\n        else:\n            priorities[i] += 0.05\n            \n        if bins[i] == min_bin_capacity:\n            priorities[i] *= 1.2\n        elif bins[i] == max_bin_capacity:\n            priorities[i] *= 0.8\n        else:\n            priorities[i] *= 1.0\n        \n    return priorities\n\n", "score": -2069.2}