{"sample_order": 872, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n    \n    max_priority = np.max(priorities)\n    min_priority = np.min(priorities)\n    \n    for i in range(len(priorities)):\n        if priorities[i] == max_priority:\n            priorities[i] = priorities[i] + 0.2\n        elif priorities[i] == min_priority:\n            priorities[i] = priorities[i] - 0.1\n        else:\n            priorities[i] = priorities[i] + 0.1\n            \n    sorted_bins_idx = np.argsort(bins)\n    \n    for i in range(len(sorted_bins_idx)):\n        if item < bins[sorted_bins_idx[i]]:\n            priorities[sorted_bins_idx[i]] = priorities[sorted_bins_idx[i]] + 0.1\n        elif item >= 2 * bins[sorted_bins_idx[i]]:\n            priorities[sorted_bins_idx[i]] = priorities[sorted_bins_idx[i]] * 1.5\n        else:\n            priorities[sorted_bins_idx[i]] = priorities[sorted_bins_idx[i]] + 0.05\n    \n    return priorities\n\n", "score": -2069.2}