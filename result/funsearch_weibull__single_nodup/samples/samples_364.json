{"sample_order": 364, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if ratios[i] < 0.3:\n            priorities[i] = np.exp(np.sin(item) + np.cos(bins[i])) * np.sqrt(item)\n        elif ratios[i] >= 0.3 and ratios[i] < 0.6:\n            priorities[i] = np.cosh(item * bins[i]) + np.sinh(item + bins[i])\n        elif ratios[i] >= 0.6 and ratios[i] < 0.9:\n            priorities[i] = np.sin(np.abs(item - bins[i])) * np.cos(item + bins[i])\n        else:\n            priorities[i] = np.tan(np.sqrt(item + bins[i])) + np.arctan(np.sqrt(item * bins[i]))\n    \n    for j in range(len(bins)):\n        if j % 2 == 0:\n            priorities[j] = np.power(priorities[j], 2)\n        else:\n            priorities[j] = np.sqrt(priorities[j])\n    \n    for k in range(len(bins)):\n        if priorities[k] < 50:\n            priorities[k] += item\n        else:\n            priorities[k] -= item / 2\n    \n    return priorities\n\n", "score": -2219.2}