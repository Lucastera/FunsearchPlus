{"sample_order": 432, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] == 0:\n            priorities[i] = 0.0\n        else:\n            ratio = item / bins[i]\n            if ratio < 0.25:\n                priorities[i] = 0.3\n            elif ratio >= 0.25 and ratio < 0.5:\n                priorities[i] = 0.5\n            elif ratio >= 0.5 and ratio < 0.75:\n                priorities[i] = 0.7\n            elif ratio >= 0.75 and ratio < 1:\n                priorities[i] = 0.9\n            else:\n                priorities[i] = 1.0\n            if bins[i] % 2 == 0:\n                priorities[i] = priorities[i] * 1.2\n            else:\n                priorities[i] = priorities[i] * 0.8\n    \n    return priorities\n\n", "score": -2071.8}