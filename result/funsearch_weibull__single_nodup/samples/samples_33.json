{"sample_order": 33, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i, ratio in enumerate(ratios):\n        if ratio < 0.3:\n            priorities[i] = 1 / (1 + np.exp(-10 * (ratio - 0.3)))\n        elif ratio >= 0.3 and ratio < 0.6:\n            priorities[i] = 1 / (1 + np.exp(-5 * (ratio - 0.45)))\n        elif ratio >= 0.6 and ratio < 0.9:\n            priorities[i] = 1 / (1 + np.exp(-3 * (ratio - 0.75)))\n        else:\n            priorities[i] = 1 / (1 + np.exp(-1 * (ratio - 1.0)))\n\n    return priorities\n\n", "score": -2071.8}