{"sample_order": 17, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins)\n    priorities = np.zeros(num_bins)\n    \n    for i in range(num_bins):\n        if item <= bins[i]:\n            priorities[i] = 1 / item\n        else:\n            priorities[i] = 1 / (item - bins[i])\n    \n    return priorities\n\n", "score": -2071.8}