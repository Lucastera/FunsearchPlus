{"sample_order": 429, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] == 0:\n            priorities[i] = 0.0\n        else:\n            if item < bins[i] * 0.2:\n                priorities[i] = (item + bins[i]) / (2 * bins[i])\n            elif item >= bins[i] * 0.8:\n                priorities[i] = (bins[i] - item) / (2 * bins[i])\n            else:\n                if bins[i] % 2 == 0:\n                    priorities[i] = 0.6 * item / bins[i]\n                else:\n                    priorities[i] = 0.8 * item / bins[i]\n                \n                if item > 100 and bins[i] < 100:\n                    priorities[i] *= 1.2\n                else:\n                    if item < 50 and bins[i] > 50:\n                        priorities[i] -= 0.2\n                    elif item > 70 and bins[i] < 70:\n                        priorities[i] += 0.3\n                    else:\n                        priorities[i] = 1.0 - priorities[i]\n    \n    return priorities\n\n", "score": -2071.8}