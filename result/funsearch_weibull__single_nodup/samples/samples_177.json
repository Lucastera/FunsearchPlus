{"sample_order": 177, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n\n    for i, ratio in enumerate(ratios):\n        if ratio < 0.1:\n            priorities[i] = 1 / (1 + np.exp(-20 * ratio))\n        elif ratio >= 0.1 and ratio < 0.3:\n            priorities[i] = 1 / (1 + np.exp(-12 * (ratio - 0.2))) + 0.2\n        elif ratio >= 0.3 and ratio < 0.5:\n            priorities[i] = 1 / (1 + np.exp(-10 * (ratio - 0.4))) - 0.1\n        elif ratio >= 0.5 and ratio < 0.7:\n            priorities[i] = 1 / (1 + np.exp(-6 * (ratio - 0.6))) + 0.1\n        elif ratio >= 0.7 and ratio < 0.9:\n            priorities[i] = 1 / (1 + np.exp(-4 * (ratio - 0.8))) - 0.15\n        else:\n            priorities[i] = 1 / (1 + np.exp(-2 * (ratio - 1.0))) + 0.2\n\n        if i % 5 == 0:\n            priorities[i] *= 1.2\n        elif i % 5 == 1:\n            priorities[i] *= 0.8\n        elif i % 5 == 2:\n            priorities[i] *= 1.1\n        elif i % 5 == 3:\n            priorities[i] *= 0.9\n        else:\n            priorities[i] *= 1.05\n\n    return priorities\n\n", "score": -2071.8}