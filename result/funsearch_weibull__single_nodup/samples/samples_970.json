{"sample_order": 970, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            if bins[i] == 0:\n                priorities[i] = 0.0\n            elif bins[i] == item:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = (item + bins[i]) / (2 * bins[i])\n        else:\n            priority_diff = (item - bins[i]) / item\n            if priority_diff < 0.2:\n                priorities[i] = 0.1\n            elif priority_diff >= 0.2 and priority_diff < 0.4:\n                priorities[i] = 0.3\n            elif priority_diff >= 0.4 and priority_diff < 0.6:\n                priorities[i] = 0.5\n            elif priority_diff >= 0.6 and priority_diff < 0.8:\n                priorities[i] = 0.7\n            else:\n                priorities[i] = 0.9\n\n    for j in range(len(priorities)):\n        if priorities[j] >= 0.5:\n            priorities[j] *= 1.2\n        else:\n            priorities[j] *= 0.8\n\n    for k in range(len(priorities)):\n        if item % 2 == 0:\n            priorities[k] += 0.1\n        else:\n            priorities[k] -= 0.1\n\n    max_priority = np.max(priorities)\n    for l in range(len(priorities)):\n        if priorities[l] == max_priority:\n            priorities[l] = 1.0\n        else:\n            priorities[l] = 0.0\n\n    return priorities\n\n", "score": -2070.8}