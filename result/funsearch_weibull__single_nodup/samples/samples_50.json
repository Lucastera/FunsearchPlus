{"sample_order": 50, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    ratios = item / bins\n    priorities = np.zeros_like(bins)\n    \n    for i, ratio in enumerate(ratios):\n        if ratio < 0.25:\n            priorities[i] = 1 / (1 + np.exp(-15 * (ratio - 0.25))) + 0.3\n        elif ratio >= 0.25 and ratio < 0.5:\n            priorities[i] = 1 / (1 + np.exp(-8 * (ratio - 0.4))) + 0.5\n        elif ratio >= 0.5 and ratio < 0.75:\n            priorities[i] = 1 / (1 + np.exp(-5 * (ratio - 0.6))) + 0.8\n        elif ratio >= 0.75 and ratio < 1:\n            priorities[i] = 1 / (1 + np.exp(-3 * (ratio - 0.9))) + 1\n        else:\n            priorities[i] = 1 / (1 + np.exp(-2 * (ratio - 1.25))) + 1.2\n        \n        if i % 3 == 0:\n            priorities[i] += 0.2\n        elif i % 3 == 1:\n            priorities[i] -= 0.1\n        else:\n            priorities[i] += 0.3\n        \n    return priorities\n\n", "score": -2071.8}