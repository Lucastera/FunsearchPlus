{"sample_order": 960, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for index, bin_capacity in enumerate(bins):\n        if item <= bin_capacity:\n            priorities[index] = 1.0\n        else:\n            remaining_capacity = bin_capacity - item\n            if remaining_capacity > bin_capacity * 0.7:\n                priorities[index] = 0.9\n            elif remaining_capacity > bin_capacity * 0.4:\n                priorities[index] = 0.7\n            else:\n                priority = 1 / remaining_capacity\n                if priority < 0.5:\n                    priorities[index] = 0.5\n                elif priority >= 0.5 and priority < 1.0:\n                    priorities[index] = 0.3\n                else:\n                    priorities[index] = 0.1\n                    \n            # Additional condition based on index\n            if index % 2 == 0:\n                priorities[index] *= 1.2\n            else:\n                priorities[index] *= 0.8\n                \n            # Additional condition based on bin_capacity\n            if bin_capacity > 100:\n                priorities[index] *= 1.5\n            \n    return priorities\n\n", "score": -2071.8}