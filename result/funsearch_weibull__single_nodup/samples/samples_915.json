{"sample_order": 915, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if item < 0.5 * bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n            \n        if item > 2 * bins[i]:\n            priorities[i] *= 1.5\n        elif item > 1.5 * bins[i]:\n            priorities[i] *= 1.3\n        elif item > 1.2 * bins[i]:\n            priorities[i] *= 1.2\n        \n        if item >= 5 * bins[i]:\n            priorities[i] = 3.0\n        elif item >= 4 * bins[i]:\n            priorities[i] = 2.5\n        elif priorities[i] < 1.8 and item >= 3 * bins[i]:\n            priorities[i] = 1.8\n        elif priorities[i] < 1.5 and item >= 2.5 * bins[i]:\n            priorities[i] = 1.5\n        elif priorities[i] < 1.3 and item >= 2 * bins[i]:\n            priorities[i] = 1.3\n        elif priorities[i] < 1.0 and item >= bins[i]:\n            priorities[i] = 1.0\n            \n    return priorities\n\n", "score": -2073.6}