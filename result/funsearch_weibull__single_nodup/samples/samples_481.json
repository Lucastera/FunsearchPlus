{"sample_order": 481, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = []\n    for i, bin_capacity in enumerate(bins):\n        ratio = item / bin_capacity\n        priority = 0\n\n        if ratio < 0.1:\n            priority = 1 / (1 + np.exp(-30 * (ratio - 0.1))) + 0.1\n        elif ratio >= 0.1 and ratio < 0.5:\n            priority = 1 / (1 + np.exp(-15 * (ratio - 0.3))) + 0.3\n        elif ratio >= 0.5 and ratio < 0.7:\n            priority = 1 / (1 + np.exp(-10 * (ratio - 0.6))) + 0.4\n        elif ratio >= 0.7 and ratio < 0.9:\n            priority = 1 / (1 + np.exp(-5 * (ratio - 0.8))) + 0.5\n        else:\n            priority = 1 / (1 + np.exp(-2 * (ratio - 1))) + 0.6\n\n        if i % 4 == 0:\n            priority += 0.25\n            if ratio < 0.2:\n                priority += 0.1\n        elif i % 4 == 1:\n            priority -= 0.1\n            if ratio >= 0.4 and ratio < 0.6:\n                priority -= 0.2\n        elif i % 4 == 2:\n            priority += 0.15\n            if ratio >= 0.6 and ratio < 0.8:\n                priority += 0.3\n        else:\n            for j in range(3):\n                priority -= 0.05\n                if ratio >= 0.7:\n                    priority -= 0.1\n        \n        priorities.append(priority)\n\n    return priorities\n\n", "score": -2133.0}