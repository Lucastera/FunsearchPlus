{"sample_order": 34, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = item / bins[i]\n        elif bins[i] >= item / 2:\n            priorities[i] = 0.5 * item / bins[i]\n        else:\n            count = 0\n            while item > bins[i]:\n                item -= bins[i]\n                count += 1\n            priorities[i] = count + item / bins[i]\n    for j in range(len(bins)):\n        if priorities[j] < 0.5:\n            priorities[j] = 0.5 * priorities[j]\n        elif priorities[j] > 1.5:\n            priorities[j] = 1.5\n    return priorities\n\n", "score": -2069.2}