{"sample_order": 335, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] == 0:\n            priorities[i] = 0.0\n        else:\n            if item % bins[i] == 0:\n                priorities[i] = 0.7\n            else:\n                priorities[i] = 0.3\n                for j in range(2, int((item + bins[i]) ** 0.5) + 1):\n                    if item % j == 0 and bins[i] % j == 0:\n                        priorities[i] += 0.05\n                    elif item % j == 0 or bins[i] % j == 0:\n                        priorities[i] -= 0.05\n                if item > bins[i]:\n                    priorities[i] -= 0.1\n    return priorities\n\n", "score": -2071.8}