{"sample_order": 464, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Further improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            if bins[i] == 0:\n                priorities[i] = 0.0\n            elif bins[i] == item:\n                priorities[i] = 1.0\n            else:\n                priorities[i] = (item + bins[i]) / (2 * bins[i])\n        else:\n            remaining_space = bins[i] - item\n            if remaining_space <= 0.1 * bins[i]:\n                priorities[i] = 0.2\n            elif remaining_space > 0.1 * bins[i] and remaining_space <= 0.3 * bins[i]:\n                priorities[i] = 0.4\n            elif remaining_space > 0.3 * bins[i] and remaining_space <= 0.5 * bins[i]:\n                priorities[i] = 0.6\n            elif remaining_space > 0.5 * bins[i] and remaining_space <= 0.7 * bins[i]:\n                priorities[i] = 0.8\n            else:\n                priorities[i] = 1.0\n    \n    return priorities\n\n", "score": -2069.2}