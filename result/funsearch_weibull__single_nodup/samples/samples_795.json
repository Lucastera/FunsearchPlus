{"sample_order": 795, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Complex version of priority calculation.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        elif bins[i] == 0:\n            priorities[i] = 0.0\n        else:\n            if item < bins[i]:\n                priority_ratio = item / bins[i]\n                priorities[i] = 1 - priority_ratio if priority_ratio < 0.5 else priority_ratio\n            else:\n                priority_ratio = bins[i] / item\n                priorities[i] = 1 - priority_ratio if priority_ratio < 0.5 else priority_ratio\n            if bins[i] % 2 == 0:\n                priorities[i] += 0.1\n            if bins[i] - item > 5:\n                priorities[i] *= 1.1\n            else:\n                priorities[i] = priorities[i] / 2\n            \n            if priorities[i] > 0.7:\n                priorities[i] = 1.0\n            elif priorities[i] > 0.5:\n                priorities[i] += 0.2\n            elif priorities[i] > 0.3:\n                priorities[i] -= 0.1\n            else:\n                priorities[i] = 0.1\n        \n    return priorities\n\n", "score": -2071.8}