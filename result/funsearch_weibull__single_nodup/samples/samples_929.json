{"sample_order": 929, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n\n        if item > 2 * bins[i]:\n            priorities[i] *= 1.5\n        elif item > 1.5 * bins[i]:\n            priorities[i] *= 1.2\n        elif item > 1.2 * bins[i]:\n            priorities[i] *= 1.1\n\n        if priorities[i] < 0.5:\n            if item < 0.5 * bins[i]:\n                priorities[i] = 0.3\n            elif item >= 0.5 * bins[i] and item < bins[i]:\n                priorities[i] = 0.5\n        elif priorities[i] > 1.5 and item < 3 * bins[i]:\n            if item < 2 * bins[i]:\n                priorities[i] = 1.7\n            elif item >= 2 * bins[i] and item < 2.5 * bins[i]:\n                priorities[i] = 1.9\n            elif item >= 2.5 * bins[i] and item < 3 * bins[i]:\n                priorities[i] = 1.95\n        elif item >= 3 * bins[i] and item < 4 * bins[i]:\n            priorities[i] = 2.0\n        elif item >= 4 * bins[i]:\n            priorities[i] = 3.0\n\n    min_bin_capacity = np.min(bins)\n    max_bin_capacity = np.max(bins)\n    min_capacity_count = np.count_nonzero(bins == min_bin_capacity)\n    max_capacity_count = np.count_nonzero(bins == max_bin_capacity)\n\n    for j in range(len(bins)):\n        if bins[j] % 2 == 0:\n            priorities[j] += 0.15\n        elif bins[j] % 3 == 0:\n            priorities[j] += 0.2\n        else:\n            priorities[j] += 0.1\n\n    if min_capacity_count == 1:\n        for k in range(len(bins)):\n            if bins[k] == min_bin_capacity:\n                priorities[k] += 0.5\n    elif min_capacity_count > 1:\n        priorities += 0.3 * min_capacity_count\n\n    if max_capacity_count == 1:\n        for m in range(len(bins)):\n            if bins[m] == max_bin_capacity:\n                priorities[m] += 0.8\n    elif max_capacity_count > 1:\n        priorities += 0.5 * max_capacity_count\n\n    return priorities\n\n", "score": null}