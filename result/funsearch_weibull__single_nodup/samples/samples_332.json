{"sample_order": 332, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1 / bins[i]\n        else:\n            priorities[i] = 0\n    \n    max_priority = np.max(priorities)\n    \n    for i in range(len(bins)):\n        if priorities[i] == max_priority:\n            priorities[i] = 1.0\n        elif priorities[i] >= 0.5:\n            priorities[i] = 0.9\n        elif priorities[i] >= 0.3:\n            priorities[i] = 0.7\n        else:\n            priorities[i] = 0.5\n    \n    return priorities\n\n", "score": -2071.8}