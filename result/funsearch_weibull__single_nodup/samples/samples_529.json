{"sample_order": 529, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if item < bins[i]:\n            priorities[i] = item / bins[i]\n        else:\n            priorities[i] = 1.0\n\n        if item > 2 * bins[i]:\n            priorities[i] *= 2.0\n        elif item > 1.5 * bins[i] and item <= 2 * bins[i]:\n            priorities[i] *= 1.8\n        elif item > 1.2 * bins[i] and item <= 1.5 * bins[i]:\n            priorities[i] *= 1.5\n        elif item > 1.0 * bins[i] and item <= 1.2 * bins[i]:\n            priorities[i] *= 1.3\n        else:\n            priorities[i] *= 1.1\n\n        if item >= 0.9 * bins[i] and item < 1.0 * bins[i]:\n            priorities[i] *= 0.9\n        elif item >= 0.8 * bins[i] and item < 0.9 * bins[i]:\n            priorities[i] *= 0.8\n        elif item >= 0.7 * bins[i] and item < 0.8 * bins[i]:\n            priorities[i] *= 0.7\n        elif item >= 0.6 * bins[i] and item < 0.7 * bins[i]:\n            priorities[i] *= 0.6\n        elif item >= 0.5 * bins[i] and item < 0.6 * bins[i]:\n            priorities[i] *= 0.5\n        else:\n            priorities[i] *= 0.4\n\n    return priorities\n\n", "score": -2071.8}